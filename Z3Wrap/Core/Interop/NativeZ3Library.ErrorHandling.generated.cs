// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Error Handling
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int GetErrorCodeDelegate(IntPtr c);

    /// <summary>
    /// Return the error code for the last API call. A call to a Z3 function may return a non Z3_OK error code, when it is not used correctly.
    /// </summary>
    /// <seealso cref="SetErrorHandler"/>
    [Z3Function("Z3_get_error_code")]
    internal int GetErrorCode(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_error_code");
        var func = Marshal.GetDelegateForFunctionPointer<GetErrorCodeDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetErrorHandlerDelegate(IntPtr c, IntPtr h);

    /// <summary>
    /// Register a Z3 error handler. A call to a Z3 function may return a non Z3_OK error code, when it is not used correctly. An error handler can be registered and will be called in this case. To disable the use of the error handler, simply register with h=NULL.
    /// </summary>
    /// <remarks>
    /// Warning: Log files, created using Z3_open_log, may be potentially incomplete/incorrect if error handlers are used.
    /// </remarks>
    /// <seealso cref="GetErrorCode"/>
    [Z3Function("Z3_set_error_handler")]
    internal void SetErrorHandler(IntPtr c, IntPtr h)
    {
        var funcPtr = GetFunctionPointer("Z3_set_error_handler");
        var func = Marshal.GetDelegateForFunctionPointer<SetErrorHandlerDelegate>(funcPtr);
        func(c, h);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetErrorDelegate(IntPtr c, int e);

    /// <summary>
    /// Set an error.
    /// </summary>
    [Z3Function("Z3_set_error")]
    internal void SetError(IntPtr c, int e)
    {
        var funcPtr = GetFunctionPointer("Z3_set_error");
        var func = Marshal.GetDelegateForFunctionPointer<SetErrorDelegate>(funcPtr);
        func(c, e);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetErrorMsgDelegate(IntPtr c, int err);

    /// <summary>
    /// Return a string describing the given error code.
    /// </summary>
    [Z3Function("Z3_get_error_msg")]
    internal IntPtr GetErrorMsg(IntPtr c, int err)
    {
        var funcPtr = GetFunctionPointer("Z3_get_error_msg");
        var func = Marshal.GetDelegateForFunctionPointer<GetErrorMsgDelegate>(funcPtr);
        return func(c, err);
    }

}
