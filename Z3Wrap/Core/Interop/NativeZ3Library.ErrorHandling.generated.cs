// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Error Handling
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate ErrorCode GetErrorCodeDelegate(IntPtr c);

    /// <summary>
    ///  Return the error code for the last API call. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <remarks>
    /// A call to a Z3 function may return a non Z3_OK error code, when it is not used correctly.
    /// </remarks>
    /// <seealso cref="SetErrorHandler"/>
    [Z3Function("Z3_get_error_code")]
    internal ErrorCode GetErrorCode(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_error_code");
        var func = Marshal.GetDelegateForFunctionPointer<GetErrorCodeDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetErrorHandlerDelegate(IntPtr c, IntPtr h);

    /// <summary>
    ///  Register a Z3 error handler. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="h" ctype="Z3_error_handler">error_handler parameter</param>
    /// <remarks>
    /// A call to a Z3 function may return a non <c>Z3_OK</c> error code, when it is not used correctly. An error handler can be registered and will be called in this case. To disable the use of the error handler, simply register with <c>h=NULL</c> .
    /// Warning: Log files, created using <see cref="OpenLog"/> , may be potentially incomplete/incorrect if error handlers are used. 
    /// </remarks>
    /// <seealso cref="GetErrorCode"/>
    [Z3Function("Z3_set_error_handler")]
    internal void SetErrorHandler(IntPtr c, IntPtr h)
    {
        var funcPtr = GetFunctionPointer("Z3_set_error_handler");
        var func = Marshal.GetDelegateForFunctionPointer<SetErrorHandlerDelegate>(funcPtr);
        func(c, h);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetErrorDelegate(IntPtr c, ErrorCode e);

    /// <summary>
    ///  Set an error. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="e" ctype="Z3_error_code">error_code parameter</param>
    [Z3Function("Z3_set_error")]
    internal void SetError(IntPtr c, ErrorCode e)
    {
        var funcPtr = GetFunctionPointer("Z3_set_error");
        var func = Marshal.GetDelegateForFunctionPointer<SetErrorDelegate>(funcPtr);
        func(c, e);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetErrorMsgDelegate(IntPtr c, ErrorCode err);

    /// <summary>
    ///  Return a string describing the given error code. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="err" ctype="Z3_error_code">error_code parameter</param>
    [Z3Function("Z3_get_error_msg")]
    internal IntPtr GetErrorMsg(IntPtr c, ErrorCode err)
    {
        var funcPtr = GetFunctionPointer("Z3_get_error_msg");
        var func = Marshal.GetDelegateForFunctionPointer<GetErrorMsgDelegate>(funcPtr);
        return func(c, err);
    }

}
