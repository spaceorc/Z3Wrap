// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Interaction logging
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool OpenLogDelegate(IntPtr filename);

    /// <summary>
    /// Log interaction to a file.
    /// </summary>
    /// <param name="filename" ctype="Z3_string">string parameter</param>
    /// <remarks>
    /// extra_API('Z3_open_log', INT, (_in(STRING),))
    /// </remarks>
    /// <seealso cref="AppendLog"/>
    /// <seealso cref="CloseLog"/>
    [Z3Function("Z3_open_log")]
    internal bool OpenLog(IntPtr filename)
    {
        var funcPtr = GetFunctionPointer("Z3_open_log");
        var func = Marshal.GetDelegateForFunctionPointer<OpenLogDelegate>(funcPtr);
        return func(filename);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AppendLogDelegate(IntPtr @string);

    /// <summary>
    /// Append user-defined string to interaction log.
    /// </summary>
    /// <param name="string" ctype="Z3_string">string parameter</param>
    /// <remarks>
    /// extra_API('Z3_append_log', VOID, (_in(STRING),))
    /// </remarks>
    /// <seealso cref="OpenLog"/>
    /// <seealso cref="CloseLog"/>
    [Z3Function("Z3_append_log")]
    internal void AppendLog(IntPtr @string)
    {
        var funcPtr = GetFunctionPointer("Z3_append_log");
        var func = Marshal.GetDelegateForFunctionPointer<AppendLogDelegate>(funcPtr);
        func(@string);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void CloseLogDelegate();

    /// <summary>
    /// Close interaction log.
    /// </summary>
    /// <remarks>
    /// extra_API('Z3_close_log', VOID, ())
    /// </remarks>
    /// <seealso cref="OpenLog"/>
    /// <seealso cref="AppendLog"/>
    [Z3Function("Z3_close_log")]
    internal void CloseLog()
    {
        var funcPtr = GetFunctionPointer("Z3_close_log");
        var func = Marshal.GetDelegateForFunctionPointer<CloseLogDelegate>(funcPtr);
        func();
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ToggleWarningMessagesDelegate(bool enabled);

    /// <summary>
    /// Enable/disable printing warning messages to the console.
    /// </summary>
    /// <param name="enabled" ctype="bool">bool parameter</param>
    [Z3Function("Z3_toggle_warning_messages")]
    internal void ToggleWarningMessages(bool enabled)
    {
        var funcPtr = GetFunctionPointer("Z3_toggle_warning_messages");
        var func = Marshal.GetDelegateForFunctionPointer<ToggleWarningMessagesDelegate>(funcPtr);
        func(enabled);
    }

}
