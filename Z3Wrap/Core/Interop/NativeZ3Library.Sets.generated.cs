// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Sets
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetSortDelegate(IntPtr c, IntPtr ty);

    /// <summary>
    /// Create Set type.
    /// </summary>
    [Z3Function("Z3_mk_set_sort")]
    internal IntPtr MkSetSort(IntPtr c, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_sort");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetSortDelegate>(funcPtr);
        return func(c, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkEmptySetDelegate(IntPtr c, IntPtr domain);

    /// <summary>
    /// Create the empty set.
    /// </summary>
    [Z3Function("Z3_mk_empty_set")]
    internal IntPtr MkEmptySet(IntPtr c, IntPtr domain)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_empty_set");
        var func = Marshal.GetDelegateForFunctionPointer<MkEmptySetDelegate>(funcPtr);
        return func(c, domain);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFullSetDelegate(IntPtr c, IntPtr domain);

    /// <summary>
    /// Create the full set.
    /// </summary>
    [Z3Function("Z3_mk_full_set")]
    internal IntPtr MkFullSet(IntPtr c, IntPtr domain)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_full_set");
        var func = Marshal.GetDelegateForFunctionPointer<MkFullSetDelegate>(funcPtr);
        return func(c, domain);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetAddDelegate(IntPtr c, IntPtr set, IntPtr elem);

    /// <summary>
    /// <para>
    /// Add an element to a set.
    /// </para>
    /// <para>
    /// The first argument must be a set, the second an element.
    /// </para>
    /// </summary>
    [Z3Function("Z3_mk_set_add")]
    internal IntPtr MkSetAdd(IntPtr c, IntPtr set, IntPtr elem)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_add");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetAddDelegate>(funcPtr);
        return func(c, set, elem);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetDelDelegate(IntPtr c, IntPtr set, IntPtr elem);

    /// <summary>
    /// <para>
    /// Remove an element to a set.
    /// </para>
    /// <para>
    /// The first argument must be a set, the second an element.
    /// </para>
    /// </summary>
    [Z3Function("Z3_mk_set_del")]
    internal IntPtr MkSetDel(IntPtr c, IntPtr set, IntPtr elem)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_del");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetDelDelegate>(funcPtr);
        return func(c, set, elem);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetUnionDelegate(IntPtr c, uint numArgs, IntPtr[] args);

    /// <summary>
    /// Take the union of a list of sets.
    /// </summary>
    [Z3Function("Z3_mk_set_union")]
    internal IntPtr MkSetUnion(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_union");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetUnionDelegate>(funcPtr);
        return func(c, numArgs, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetIntersectDelegate(IntPtr c, uint numArgs, IntPtr[] args);

    /// <summary>
    /// Take the intersection of a list of sets.
    /// </summary>
    [Z3Function("Z3_mk_set_intersect")]
    internal IntPtr MkSetIntersect(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_intersect");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetIntersectDelegate>(funcPtr);
        return func(c, numArgs, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetDifferenceDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    /// <summary>
    /// Take the set difference between two sets.
    /// </summary>
    [Z3Function("Z3_mk_set_difference")]
    internal IntPtr MkSetDifference(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_difference");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetDifferenceDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetComplementDelegate(IntPtr c, IntPtr arg);

    /// <summary>
    /// Take the complement of a set.
    /// </summary>
    [Z3Function("Z3_mk_set_complement")]
    internal IntPtr MkSetComplement(IntPtr c, IntPtr arg)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_complement");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetComplementDelegate>(funcPtr);
        return func(c, arg);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetMemberDelegate(IntPtr c, IntPtr elem, IntPtr set);

    /// <summary>
    /// <para>
    /// Check for set membership.
    /// </para>
    /// <para>
    /// The first argument should be an element type of the set.
    /// </para>
    /// </summary>
    [Z3Function("Z3_mk_set_member")]
    internal IntPtr MkSetMember(IntPtr c, IntPtr elem, IntPtr set)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_member");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetMemberDelegate>(funcPtr);
        return func(c, elem, set);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSetSubsetDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    /// <summary>
    /// Check for subsetness of sets.
    /// </summary>
    [Z3Function("Z3_mk_set_subset")]
    internal IntPtr MkSetSubset(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_subset");
        var func = Marshal.GetDelegateForFunctionPointer<MkSetSubsetDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkArrayExtDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    /// <summary>
    /// Create array extensionality index given two arrays with the same sort.
    /// The meaning is given by the axiom:
    /// (=&gt; (= (select A (array-ext A B)) (select B (array-ext A B))) (= A B))
    /// </summary>
    [Z3Function("Z3_mk_array_ext")]
    internal IntPtr MkArrayExt(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_array_ext");
        var func = Marshal.GetDelegateForFunctionPointer<MkArrayExtDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

}
