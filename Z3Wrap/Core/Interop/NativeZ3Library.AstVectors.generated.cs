// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_ast_containers.h / AST vectors
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkAstVectorDelegate(IntPtr c);

    /// <summary>
    /// Return an empty AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <remarks>
    /// Reference counting must be used to manage AST vectors, even when the Z3_context was
    /// created using <see cref="MkContext"/> instead of <see cref="MkContextRc"/>.
    /// </remarks>
    [Z3Function("Z3_mk_ast_vector")]
    internal IntPtr MkAstVector(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ast_vector");
        var func = Marshal.GetDelegateForFunctionPointer<MkAstVectorDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstVectorIncRefDelegate(IntPtr c, IntPtr v);

    /// <summary>
    /// Increment the reference counter of the given AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    [Z3Function("Z3_ast_vector_inc_ref")]
    internal void AstVectorIncRef(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorIncRefDelegate>(funcPtr);
        func(c, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstVectorDecRefDelegate(IntPtr c, IntPtr v);

    /// <summary>
    /// Decrement the reference counter of the given AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    [Z3Function("Z3_ast_vector_dec_ref")]
    internal void AstVectorDecRef(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorDecRefDelegate>(funcPtr);
        func(c, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint AstVectorSizeDelegate(IntPtr c, IntPtr v);

    /// <summary>
    /// Return the size of the given AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    [Z3Function("Z3_ast_vector_size")]
    internal uint AstVectorSize(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_size");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorSizeDelegate>(funcPtr);
        return func(c, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstVectorGetDelegate(IntPtr c, IntPtr v, uint i);

    /// <summary>
    /// Return the AST at position i in the AST vector v.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <remarks>
    /// Precondition: i &lt; Z3_ast_vector_size(c, v)
    /// </remarks>
    [Z3Function("Z3_ast_vector_get")]
    internal IntPtr AstVectorGet(IntPtr c, IntPtr v, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_get");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorGetDelegate>(funcPtr);
        return func(c, v, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstVectorSetDelegate(IntPtr c, IntPtr v, uint i, IntPtr a);

    /// <summary>
    /// Update position i of the AST vector v with the AST a.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: i &lt; Z3_ast_vector_size(c, v)
    /// </remarks>
    [Z3Function("Z3_ast_vector_set")]
    internal void AstVectorSet(IntPtr c, IntPtr v, uint i, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_set");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorSetDelegate>(funcPtr);
        func(c, v, i, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstVectorResizeDelegate(IntPtr c, IntPtr v, uint n);

    /// <summary>
    /// Resize the AST vector v.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="n" ctype="unsigned">unsigned parameter</param>
    [Z3Function("Z3_ast_vector_resize")]
    internal void AstVectorResize(IntPtr c, IntPtr v, uint n)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_resize");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorResizeDelegate>(funcPtr);
        func(c, v, n);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstVectorPushDelegate(IntPtr c, IntPtr v, IntPtr a);

    /// <summary>
    /// Add the AST a in the end of the AST vector v. The size of v is increased by one.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    [Z3Function("Z3_ast_vector_push")]
    internal void AstVectorPush(IntPtr c, IntPtr v, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_push");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorPushDelegate>(funcPtr);
        func(c, v, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstVectorTranslateDelegate(IntPtr s, IntPtr v, IntPtr t);

    /// <summary>
    /// Translate the AST vector v from context s into an AST vector in context t.
    /// </summary>
    /// <param name="s" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="t" ctype="Z3_context">context parameter</param>
    [Z3Function("Z3_ast_vector_translate")]
    internal IntPtr AstVectorTranslate(IntPtr s, IntPtr v, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_translate");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorTranslateDelegate>(funcPtr);
        return func(s, v, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstVectorToStringDelegate(IntPtr c, IntPtr v);

    /// <summary>
    /// Convert AST vector into a string.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    [Z3Function("Z3_ast_vector_to_string")]
    internal IntPtr AstVectorToString(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<AstVectorToStringDelegate>(funcPtr);
        return func(c, v);
    }

}
