// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_optimization.h / Optimization facilities
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkOptimizeDelegate(IntPtr c);

    /// <summary>
    /// Create a new optimize context.
    /// </summary>
    /// <remarks>
    /// User must use Z3_optimize_inc_ref and Z3_optimize_dec_ref to manage optimize objects. Even if the context was created using Z3_mk_context instead of Z3_mk_context_rc.
    /// </remarks>
    [Z3Function("Z3_mk_optimize")]
    internal IntPtr MkOptimize(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_optimize");
        var func = Marshal.GetDelegateForFunctionPointer<MkOptimizeDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeIncRefDelegate(IntPtr c, IntPtr d);

    /// <summary>
    /// Increment the reference counter of the given optimize context
    /// </summary>
    [Z3Function("Z3_optimize_inc_ref")]
    internal void OptimizeIncRef(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeIncRefDelegate>(funcPtr);
        func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeDecRefDelegate(IntPtr c, IntPtr d);

    /// <summary>
    /// Decrement the reference counter of the given optimize context.
    /// </summary>
    [Z3Function("Z3_optimize_dec_ref")]
    internal void OptimizeDecRef(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeDecRefDelegate>(funcPtr);
        func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeAssertDelegate(IntPtr c, IntPtr o, IntPtr a);

    /// <summary>
    /// Assert hard constraint to the optimization context.
    /// </summary>
    /// <seealso cref="OptimizeAssertSoft"/>
    /// <seealso cref="OptimizeAssertAndTrack"/>
    [Z3Function("Z3_optimize_assert")]
    internal void OptimizeAssert(IntPtr c, IntPtr o, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_assert");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeAssertDelegate>(funcPtr);
        func(c, o, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeAssertAndTrackDelegate(IntPtr c, IntPtr o, IntPtr a, IntPtr t);

    /// <summary>
    /// Assert tracked hard constraint to the optimization context.
    /// </summary>
    /// <seealso cref="OptimizeAssert"/>
    /// <seealso cref="OptimizeAssertSoft"/>
    [Z3Function("Z3_optimize_assert_and_track")]
    internal void OptimizeAssertAndTrack(IntPtr c, IntPtr o, IntPtr a, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_assert_and_track");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeAssertAndTrackDelegate>(funcPtr);
        func(c, o, a, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint OptimizeAssertSoftDelegate(IntPtr c, IntPtr o, IntPtr a, IntPtr weight, IntPtr id);

    /// <summary>
    /// Assert soft constraint to the optimization context.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="a">- formula</param>
    /// <param name="weight">- a penalty for violating soft constraint. Negative weights convert into rewards.</param>
    /// <param name="id">- optional identifier to group soft constraints</param>
    /// <seealso cref="OptimizeAssert"/>
    /// <seealso cref="OptimizeAssertAndTrack"/>
    [Z3Function("Z3_optimize_assert_soft")]
    internal uint OptimizeAssertSoft(IntPtr c, IntPtr o, IntPtr a, IntPtr weight, IntPtr id)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_assert_soft");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeAssertSoftDelegate>(funcPtr);
        return func(c, o, a, weight, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint OptimizeMaximizeDelegate(IntPtr c, IntPtr o, IntPtr t);

    /// <summary>
    /// Add a maximization constraint.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="t">- arithmetical term</param>
    /// <seealso cref="OptimizeMinimize"/>
    [Z3Function("Z3_optimize_maximize")]
    internal uint OptimizeMaximize(IntPtr c, IntPtr o, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_maximize");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeMaximizeDelegate>(funcPtr);
        return func(c, o, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint OptimizeMinimizeDelegate(IntPtr c, IntPtr o, IntPtr t);

    /// <summary>
    /// Add a minimization constraint.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="t">- arithmetical term</param>
    /// <seealso cref="OptimizeMaximize"/>
    [Z3Function("Z3_optimize_minimize")]
    internal uint OptimizeMinimize(IntPtr c, IntPtr o, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_minimize");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeMinimizeDelegate>(funcPtr);
        return func(c, o, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizePushDelegate(IntPtr c, IntPtr d);

    /// <summary>
    /// Create a backtracking point. The optimize solver contains a set of rules, added facts and assertions. The set of rules, facts and assertions are restored upon calling Z3_optimize_pop.
    /// </summary>
    /// <seealso cref="OptimizePop"/>
    [Z3Function("Z3_optimize_push")]
    internal void OptimizePush(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_push");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizePushDelegate>(funcPtr);
        func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizePopDelegate(IntPtr c, IntPtr d);

    /// <summary>
    /// Backtrack one level.
    /// </summary>
    /// <remarks>
    /// Precondition: The number of calls to pop cannot exceed calls to push.
    /// </remarks>
    /// <seealso cref="OptimizePush"/>
    [Z3Function("Z3_optimize_pop")]
    internal void OptimizePop(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_pop");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizePopDelegate>(funcPtr);
        func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeSetInitialValueDelegate(IntPtr c, IntPtr o, IntPtr v, IntPtr val);

    /// <summary>
    /// provide an initialization hint to the solver. The initialization hint is used to calibrate an initial value of the expression that represents a variable. If the variable is Boolean, the initial phase is set according to value. If the variable is an integer or real, the initial Simplex tableau is recalibrated to attempt to follow the value assignment.
    /// </summary>
    [Z3Function("Z3_optimize_set_initial_value")]
    internal void OptimizeSetInitialValue(IntPtr c, IntPtr o, IntPtr v, IntPtr val)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_set_initial_value");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeSetInitialValueDelegate>(funcPtr);
        func(c, o, v, val);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int OptimizeCheckDelegate(IntPtr c, IntPtr o, uint num_assumptions, IntPtr[] assumptions);

    /// <summary>
    /// Check consistency and produce optimal values.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="num_assumptions">- number of additional assumptions</param>
    /// <param name="assumptions">- the additional assumptions</param>
    /// <seealso cref="OptimizeGetReasonUnknown"/>
    /// <seealso cref="OptimizeGetModel"/>
    /// <seealso cref="OptimizeGetStatistics"/>
    /// <seealso cref="OptimizeGetUnsatCore"/>
    [Z3Function("Z3_optimize_check")]
    internal int OptimizeCheck(IntPtr c, IntPtr o, uint num_assumptions, IntPtr[] assumptions)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_check");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeCheckDelegate>(funcPtr);
        return func(c, o, num_assumptions, assumptions);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetReasonUnknownDelegate(IntPtr c, IntPtr d);

    /// <summary>
    /// Retrieve a string that describes the last status returned by Z3_optimize_check. Use this method when Z3_optimize_check returns Z3_L_UNDEF.
    /// </summary>
    [Z3Function("Z3_optimize_get_reason_unknown")]
    internal IntPtr OptimizeGetReasonUnknown(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_reason_unknown");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetReasonUnknownDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetModelDelegate(IntPtr c, IntPtr o);

    /// <summary>
    /// Retrieve the model for the last Z3_optimize_check The error handler is invoked if a model is not available because the commands above were not invoked for the given optimization solver, or if the result was Z3_L_FALSE.
    /// </summary>
    [Z3Function("Z3_optimize_get_model")]
    internal IntPtr OptimizeGetModel(IntPtr c, IntPtr o)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_model");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetModelDelegate>(funcPtr);
        return func(c, o);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetUnsatCoreDelegate(IntPtr c, IntPtr o);

    /// <summary>
    /// Retrieve the unsat core for the last Z3_optimize_check The unsat core is a subset of the assumptions a.
    /// </summary>
    [Z3Function("Z3_optimize_get_unsat_core")]
    internal IntPtr OptimizeGetUnsatCore(IntPtr c, IntPtr o)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_unsat_core");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetUnsatCoreDelegate>(funcPtr);
        return func(c, o);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeSetParamsDelegate(IntPtr c, IntPtr o, IntPtr p);

    /// <summary>
    /// Set parameters on optimization context.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="p">- parameters</param>
    /// <seealso cref="OptimizeGetHelp"/>
    /// <seealso cref="OptimizeGetParamDescrs"/>
    [Z3Function("Z3_optimize_set_params")]
    internal void OptimizeSetParams(IntPtr c, IntPtr o, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_set_params");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeSetParamsDelegate>(funcPtr);
        func(c, o, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetParamDescrsDelegate(IntPtr c, IntPtr o);

    /// <summary>
    /// Return the parameter description set for the given optimize object.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <seealso cref="OptimizeGetHelp"/>
    /// <seealso cref="OptimizeSetParams"/>
    [Z3Function("Z3_optimize_get_param_descrs")]
    internal IntPtr OptimizeGetParamDescrs(IntPtr c, IntPtr o)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetParamDescrsDelegate>(funcPtr);
        return func(c, o);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetLowerDelegate(IntPtr c, IntPtr o, uint idx);

    /// <summary>
    /// Retrieve lower bound value or approximation for the i'th optimization objective.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="idx">- index of optimization objective</param>
    /// <seealso cref="OptimizeGetUpper"/>
    /// <seealso cref="OptimizeGetLowerAsVector"/>
    /// <seealso cref="OptimizeGetUpperAsVector"/>
    [Z3Function("Z3_optimize_get_lower")]
    internal IntPtr OptimizeGetLower(IntPtr c, IntPtr o, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_lower");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetLowerDelegate>(funcPtr);
        return func(c, o, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetUpperDelegate(IntPtr c, IntPtr o, uint idx);

    /// <summary>
    /// Retrieve upper bound value or approximation for the i'th optimization objective.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="idx">- index of optimization objective</param>
    /// <seealso cref="OptimizeGetLower"/>
    /// <seealso cref="OptimizeGetLowerAsVector"/>
    /// <seealso cref="OptimizeGetUpperAsVector"/>
    [Z3Function("Z3_optimize_get_upper")]
    internal IntPtr OptimizeGetUpper(IntPtr c, IntPtr o, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_upper");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetUpperDelegate>(funcPtr);
        return func(c, o, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetLowerAsVectorDelegate(IntPtr c, IntPtr o, uint idx);

    /// <summary>
    /// Retrieve lower bound value or approximation for the i'th optimization objective. The returned vector is of length 3. It always contains numerals. The three numerals are coefficients a, b, c and encode the result of Z3_optimize_get_lower a * infinity + b + c * epsilon.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="idx">- index of optimization objective</param>
    /// <seealso cref="OptimizeGetLower"/>
    /// <seealso cref="OptimizeGetUpper"/>
    /// <seealso cref="OptimizeGetUpperAsVector"/>
    [Z3Function("Z3_optimize_get_lower_as_vector")]
    internal IntPtr OptimizeGetLowerAsVector(IntPtr c, IntPtr o, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_lower_as_vector");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetLowerAsVectorDelegate>(funcPtr);
        return func(c, o, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetUpperAsVectorDelegate(IntPtr c, IntPtr o, uint idx);

    /// <summary>
    /// Retrieve upper bound value or approximation for the i'th optimization objective.
    /// </summary>
    /// <param name="c">- context</param>
    /// <param name="o">- optimization context</param>
    /// <param name="idx">- index of optimization objective</param>
    /// <seealso cref="OptimizeGetLower"/>
    /// <seealso cref="OptimizeGetUpper"/>
    /// <seealso cref="OptimizeGetLowerAsVector"/>
    [Z3Function("Z3_optimize_get_upper_as_vector")]
    internal IntPtr OptimizeGetUpperAsVector(IntPtr c, IntPtr o, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_upper_as_vector");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetUpperAsVectorDelegate>(funcPtr);
        return func(c, o, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeToStringDelegate(IntPtr c, IntPtr o);

    /// <summary>
    /// Print the current context as a string.
    /// </summary>
    /// <param name="c">- context.</param>
    /// <param name="o">- optimization context.</param>
    /// <seealso cref="OptimizeFromFile"/>
    /// <seealso cref="OptimizeFromString"/>
    [Z3Function("Z3_optimize_to_string")]
    internal IntPtr OptimizeToString(IntPtr c, IntPtr o)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeToStringDelegate>(funcPtr);
        return func(c, o);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeFromStringDelegate(IntPtr c, IntPtr o, IntPtr s);

    /// <summary>
    /// Parse an SMT-LIB2 string with assertions, soft constraints and optimization objectives. Add the parsed constraints and objectives to the optimization context.
    /// </summary>
    /// <param name="c">- context.</param>
    /// <param name="o">- optimize context.</param>
    /// <param name="s">- string containing SMT2 specification.</param>
    /// <seealso cref="OptimizeFromFile"/>
    /// <seealso cref="OptimizeToString"/>
    [Z3Function("Z3_optimize_from_string")]
    internal void OptimizeFromString(IntPtr c, IntPtr o, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_from_string");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeFromStringDelegate>(funcPtr);
        func(c, o, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeFromFileDelegate(IntPtr c, IntPtr o, IntPtr s);

    /// <summary>
    /// Parse an SMT-LIB2 file with assertions, soft constraints and optimization objectives. Add the parsed constraints and objectives to the optimization context.
    /// </summary>
    /// <param name="c">- context.</param>
    /// <param name="o">- optimize context.</param>
    /// <param name="s">- path to file containing SMT2 specification.</param>
    /// <seealso cref="OptimizeFromString"/>
    /// <seealso cref="OptimizeToString"/>
    [Z3Function("Z3_optimize_from_file")]
    internal void OptimizeFromFile(IntPtr c, IntPtr o, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_from_file");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeFromFileDelegate>(funcPtr);
        func(c, o, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetHelpDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Return a string containing a description of parameters accepted by optimize.
    /// </summary>
    /// <seealso cref="OptimizeGetParamDescrs"/>
    /// <seealso cref="OptimizeSetParams"/>
    [Z3Function("Z3_optimize_get_help")]
    internal IntPtr OptimizeGetHelp(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetHelpDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetStatisticsDelegate(IntPtr c, IntPtr d);

    /// <summary>
    /// Retrieve statistics information from the last call to Z3_optimize_check
    /// </summary>
    [Z3Function("Z3_optimize_get_statistics")]
    internal IntPtr OptimizeGetStatistics(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_statistics");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetStatisticsDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetAssertionsDelegate(IntPtr c, IntPtr o);

    /// <summary>
    /// Return the set of asserted formulas on the optimization context.
    /// </summary>
    [Z3Function("Z3_optimize_get_assertions")]
    internal IntPtr OptimizeGetAssertions(IntPtr c, IntPtr o)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_assertions");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetAssertionsDelegate>(funcPtr);
        return func(c, o);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr OptimizeGetObjectivesDelegate(IntPtr c, IntPtr o);

    /// <summary>
    /// Return objectives on the optimization context. If the objective function is a max-sat objective it is returned as a Pseudo-Boolean (minimization) sum of the form (+ (if f1 w1 0) (if f2 w2 0) ...) If the objective function is entered as a maximization objective, then return the corresponding minimization objective. In this way the resulting objective function is always returned as a minimization objective.
    /// </summary>
    [Z3Function("Z3_optimize_get_objectives")]
    internal IntPtr OptimizeGetObjectives(IntPtr c, IntPtr o)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_get_objectives");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeGetObjectivesDelegate>(funcPtr);
        return func(c, o);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void OptimizeRegisterModelEhDelegate(IntPtr c, IntPtr o, IntPtr m, IntPtr ctx, IntPtr model_eh);

    /// <summary>
    /// register a model event handler for new models.
    /// </summary>
    [Z3Function("Z3_optimize_register_model_eh")]
    internal void OptimizeRegisterModelEh(IntPtr c, IntPtr o, IntPtr m, IntPtr ctx, IntPtr model_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_optimize_register_model_eh");
        var func = Marshal.GetDelegateForFunctionPointer<OptimizeRegisterModelEhDelegate>(funcPtr);
        func(c, o, m, ctx, model_eh);
    }

}
