// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Accessors
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate SymbolKind GetSymbolKindDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return <c>Z3_INT_SYMBOL</c> if the symbol was constructed using <see cref="MkIntSymbol"/> , and <c>Z3_STRING_SYMBOL</c> if the symbol was constructed using <see cref="MkStringSymbol"/> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_symbol">symbol parameter</param>
    /// <returns ctype="Z3_symbol_kind">symbol_kind value</returns>
    [Z3Function("Z3_get_symbol_kind")]
    internal SymbolKind GetSymbolKind(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_symbol_kind");
        var func = Marshal.GetDelegateForFunctionPointer<GetSymbolKindDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int GetSymbolIntDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return the symbol int value. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_symbol">symbol parameter</param>
    /// <returns ctype="int">int value</returns>
    /// <remarks>
    /// Precondition: Z3_get_symbol_kind(s) == Z3_INT_SYMBOL 
    /// </remarks>
    /// <seealso cref="MkIntSymbol"/>
    [Z3Function("Z3_get_symbol_int")]
    internal int GetSymbolInt(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_symbol_int");
        var func = Marshal.GetDelegateForFunctionPointer<GetSymbolIntDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetSymbolStringDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return the symbol name. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_symbol">symbol parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: Z3_get_symbol_kind(s) == Z3_STRING_SYMBOL 
    /// Warning: The returned buffer is statically allocated by Z3. It will be automatically deallocated when <see cref="DelContext"/> is invoked. So, the buffer is invalidated in the next call to <c>Z3_get_symbol_string</c> . 
    /// </remarks>
    /// <seealso cref="MkStringSymbol"/>
    [Z3Function("Z3_get_symbol_string")]
    internal IntPtr GetSymbolString(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_symbol_string");
        var func = Marshal.GetDelegateForFunctionPointer<GetSymbolStringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetSortNameDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Return the sort name as a symbol. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="Z3_symbol">symbol value</returns>
    [Z3Function("Z3_get_sort_name")]
    internal IntPtr GetSortName(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_sort_name");
        var func = Marshal.GetDelegateForFunctionPointer<GetSortNameDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetSortIdDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return a unique identifier for <c>s</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_sort_id")]
    internal uint GetSortId(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_sort_id");
        var func = Marshal.GetDelegateForFunctionPointer<GetSortIdDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SortToAstDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Convert a <c>Z3_sort</c> into <c>Z3_ast</c> . This is just type casting. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    [Z3Function("Z3_sort_to_ast")]
    internal IntPtr SortToAst(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_sort_to_ast");
        var func = Marshal.GetDelegateForFunctionPointer<SortToAstDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsEqSortDelegate(IntPtr c, IntPtr s1, IntPtr s2);

    /// <summary>
    ///  compare sorts. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s1" ctype="Z3_sort">sort parameter</param>
    /// <param name="s2" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_eq_sort")]
    internal bool IsEqSort(IntPtr c, IntPtr s1, IntPtr s2)
    {
        var funcPtr = GetFunctionPointer("Z3_is_eq_sort");
        var func = Marshal.GetDelegateForFunctionPointer<IsEqSortDelegate>(funcPtr);
        return func(c, s1, s2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate SortKind GetSortKindDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the sort kind (e.g., array, tuple, int, bool, etc). 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="Z3_sort_kind">sort_kind value</returns>
    /// <seealso cref="SortKind"/>
    [Z3Function("Z3_get_sort_kind")]
    internal SortKind GetSortKind(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_sort_kind");
        var func = Marshal.GetDelegateForFunctionPointer<GetSortKindDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetBvSortSizeDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the size of the given bit-vector sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, t) == Z3_BV_SORT 
    /// </remarks>
    /// <seealso cref="MkBvSort"/>
    /// <seealso cref="GetSortKind"/>
    [Z3Function("Z3_get_bv_sort_size")]
    internal uint GetBvSortSize(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_bv_sort_size");
        var func = Marshal.GetDelegateForFunctionPointer<GetBvSortSizeDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetFiniteDomainSortSizeDelegate(IntPtr c, IntPtr s, out ulong r);

    /// <summary>
    ///  Store the size of the sort in <c>r</c> . Return <c>false</c> if the call failed. That is, Z3_get_sort_kind(s) == Z3_FINITE_DOMAIN_SORT. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <param name="r" ctype="uint64_t*">uint64_t parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_get_finite_domain_sort_size")]
    internal bool GetFiniteDomainSortSize(IntPtr c, IntPtr s, out ulong r)
    {
        var funcPtr = GetFunctionPointer("Z3_get_finite_domain_sort_size");
        var func = Marshal.GetDelegateForFunctionPointer<GetFiniteDomainSortSizeDelegate>(funcPtr);
        return func(c, s, out r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetArrayArityDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return the arity (number of dimensions) of the given array sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(s) == Z3_ARRAY_SORT 
    /// </remarks>
    /// <seealso cref="GetArraySortDomainN"/>
    [Z3Function("Z3_get_array_arity")]
    internal uint GetArrayArity(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_array_arity");
        var func = Marshal.GetDelegateForFunctionPointer<GetArrayArityDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetArraySortDomainDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the domain of the given array sort. In the case of a multi-dimensional array, this function returns the sort of the first dimension. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, t) == Z3_ARRAY_SORT 
    /// </remarks>
    /// <seealso cref="MkArraySort"/>
    /// <seealso cref="GetSortKind"/>
    /// <seealso cref="GetArraySortDomainN"/>
    [Z3Function("Z3_get_array_sort_domain")]
    internal IntPtr GetArraySortDomain(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_array_sort_domain");
        var func = Marshal.GetDelegateForFunctionPointer<GetArraySortDomainDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetArraySortDomainNDelegate(IntPtr c, IntPtr t, uint idx);

    /// <summary>
    ///  Return the i'th domain sort of an n-dimensional array. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, t) == Z3_ARRAY_SORT 
    /// </remarks>
    /// <seealso cref="MkArraySort"/>
    /// <seealso cref="GetSortKind"/>
    /// <seealso cref="GetArraySortDomain"/>
    [Z3Function("Z3_get_array_sort_domain_n")]
    internal IntPtr GetArraySortDomainN(IntPtr c, IntPtr t, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_array_sort_domain_n");
        var func = Marshal.GetDelegateForFunctionPointer<GetArraySortDomainNDelegate>(funcPtr);
        return func(c, t, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetArraySortRangeDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the range of the given array sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, t) == Z3_ARRAY_SORT 
    /// </remarks>
    /// <seealso cref="MkArraySort"/>
    /// <seealso cref="GetSortKind"/>
    [Z3Function("Z3_get_array_sort_range")]
    internal IntPtr GetArraySortRange(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_array_sort_range");
        var func = Marshal.GetDelegateForFunctionPointer<GetArraySortRangeDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetTupleSortMkDeclDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the constructor declaration of the given tuple sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, t) == Z3_DATATYPE_SORT 
    /// </remarks>
    /// <seealso cref="MkTupleSort"/>
    /// <seealso cref="GetSortKind"/>
    [Z3Function("Z3_get_tuple_sort_mk_decl")]
    internal IntPtr GetTupleSortMkDecl(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_tuple_sort_mk_decl");
        var func = Marshal.GetDelegateForFunctionPointer<GetTupleSortMkDeclDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetTupleSortNumFieldsDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the number of fields of the given tuple sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, t) == Z3_DATATYPE_SORT 
    /// </remarks>
    /// <seealso cref="MkTupleSort"/>
    /// <seealso cref="GetSortKind"/>
    [Z3Function("Z3_get_tuple_sort_num_fields")]
    internal uint GetTupleSortNumFields(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_tuple_sort_num_fields");
        var func = Marshal.GetDelegateForFunctionPointer<GetTupleSortNumFieldsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetTupleSortFieldDeclDelegate(IntPtr c, IntPtr t, uint i);

    /// <summary>
    ///  Return the i-th field declaration (i.e., projection function declaration) of the given tuple sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(t) == Z3_DATATYPE_SORT 
    /// Precondition: i &lt; Z3_get_tuple_sort_num_fields(c, t) 
    /// </remarks>
    /// <seealso cref="MkTupleSort"/>
    /// <seealso cref="GetSortKind"/>
    [Z3Function("Z3_get_tuple_sort_field_decl")]
    internal IntPtr GetTupleSortFieldDecl(IntPtr c, IntPtr t, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_tuple_sort_field_decl");
        var func = Marshal.GetDelegateForFunctionPointer<GetTupleSortFieldDeclDelegate>(funcPtr);
        return func(c, t, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsRecursiveDatatypeSortDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Check if <c>s</c> is a recursive datatype sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_recursive_datatype_sort")]
    internal bool IsRecursiveDatatypeSort(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_is_recursive_datatype_sort");
        var func = Marshal.GetDelegateForFunctionPointer<IsRecursiveDatatypeSortDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetDatatypeSortNumConstructorsDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return number of constructors for datatype. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(t) == Z3_DATATYPE_SORT 
    /// </remarks>
    /// <seealso cref="GetDatatypeSortConstructor"/>
    /// <seealso cref="GetDatatypeSortRecognizer"/>
    /// <seealso cref="GetDatatypeSortConstructorAccessor"/>
    [Z3Function("Z3_get_datatype_sort_num_constructors")]
    internal uint GetDatatypeSortNumConstructors(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_datatype_sort_num_constructors");
        var func = Marshal.GetDelegateForFunctionPointer<GetDatatypeSortNumConstructorsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDatatypeSortConstructorDelegate(IntPtr c, IntPtr t, uint idx);

    /// <summary>
    ///  Return idx'th constructor. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(t) == Z3_DATATYPE_SORT 
    /// Precondition: idx &lt; Z3_get_datatype_sort_num_constructors(c, t) 
    /// </remarks>
    /// <seealso cref="GetDatatypeSortNumConstructors"/>
    /// <seealso cref="GetDatatypeSortRecognizer"/>
    /// <seealso cref="GetDatatypeSortConstructorAccessor"/>
    [Z3Function("Z3_get_datatype_sort_constructor")]
    internal IntPtr GetDatatypeSortConstructor(IntPtr c, IntPtr t, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_datatype_sort_constructor");
        var func = Marshal.GetDelegateForFunctionPointer<GetDatatypeSortConstructorDelegate>(funcPtr);
        return func(c, t, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDatatypeSortRecognizerDelegate(IntPtr c, IntPtr t, uint idx);

    /// <summary>
    ///  Return idx'th recognizer. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(t) == Z3_DATATYPE_SORT 
    /// Precondition: idx &lt; Z3_get_datatype_sort_num_constructors(c, t) 
    /// </remarks>
    /// <seealso cref="GetDatatypeSortNumConstructors"/>
    /// <seealso cref="GetDatatypeSortConstructor"/>
    /// <seealso cref="GetDatatypeSortConstructorAccessor"/>
    [Z3Function("Z3_get_datatype_sort_recognizer")]
    internal IntPtr GetDatatypeSortRecognizer(IntPtr c, IntPtr t, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_datatype_sort_recognizer");
        var func = Marshal.GetDelegateForFunctionPointer<GetDatatypeSortRecognizerDelegate>(funcPtr);
        return func(c, t, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDatatypeSortConstructorAccessorDelegate(IntPtr c, IntPtr t, uint idxC, uint idxA);

    /// <summary>
    ///  Return idx_a'th accessor for the idx_c'th constructor. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_sort">sort parameter</param>
    /// <param name="idxC" ctype="unsigned">unsigned parameter</param>
    /// <param name="idxA" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(t) == Z3_DATATYPE_SORT 
    /// Precondition: idx_c &lt; Z3_get_datatype_sort_num_constructors(c, t) 
    /// Precondition: idx_a &lt; Z3_get_domain_size(c, Z3_get_datatype_sort_constructor(c, idx_c)) 
    /// </remarks>
    /// <seealso cref="GetDatatypeSortNumConstructors"/>
    /// <seealso cref="GetDatatypeSortConstructor"/>
    /// <seealso cref="GetDatatypeSortRecognizer"/>
    [Z3Function("Z3_get_datatype_sort_constructor_accessor")]
    internal IntPtr GetDatatypeSortConstructorAccessor(IntPtr c, IntPtr t, uint idxC, uint idxA)
    {
        var funcPtr = GetFunctionPointer("Z3_get_datatype_sort_constructor_accessor");
        var func = Marshal.GetDelegateForFunctionPointer<GetDatatypeSortConstructorAccessorDelegate>(funcPtr);
        return func(c, t, idxC, idxA);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr DatatypeUpdateFieldDelegate(IntPtr c, IntPtr fieldAccess, IntPtr t, IntPtr value);

    /// <summary>
    ///  Update record field with a value. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="fieldAccess" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="t" ctype="Z3_ast">ast parameter</param>
    /// <param name="value" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(Z3_get_sort(c, t)) == Z3_get_domain(c, field_access, 1) == Z3_DATATYPE_SORT 
    /// Precondition: Z3_get_sort(c, value) == Z3_get_range(c, field_access) 
    /// </remarks>
    /// <seealso cref="MkStore"/>
    [Z3Function("Z3_datatype_update_field")]
    internal IntPtr DatatypeUpdateField(IntPtr c, IntPtr fieldAccess, IntPtr t, IntPtr value)
    {
        var funcPtr = GetFunctionPointer("Z3_datatype_update_field");
        var func = Marshal.GetDelegateForFunctionPointer<DatatypeUpdateFieldDelegate>(funcPtr);
        return func(c, fieldAccess, t, value);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetRelationArityDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return arity of relation. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(s) == Z3_RELATION_SORT 
    /// </remarks>
    /// <seealso cref="GetRelationColumn"/>
    [Z3Function("Z3_get_relation_arity")]
    internal uint GetRelationArity(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_relation_arity");
        var func = Marshal.GetDelegateForFunctionPointer<GetRelationArityDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetRelationColumnDelegate(IntPtr c, IntPtr s, uint col);

    /// <summary>
    ///  Return sort at i'th column of relation sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    /// <param name="col" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: Z3_get_sort_kind(c, s) == Z3_RELATION_SORT 
    /// Precondition: col &lt; Z3_get_relation_arity(c, s) 
    /// </remarks>
    /// <seealso cref="GetRelationArity"/>
    [Z3Function("Z3_get_relation_column")]
    internal IntPtr GetRelationColumn(IntPtr c, IntPtr s, uint col)
    {
        var funcPtr = GetFunctionPointer("Z3_get_relation_column");
        var func = Marshal.GetDelegateForFunctionPointer<GetRelationColumnDelegate>(funcPtr);
        return func(c, s, col);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkAtmostDelegate(IntPtr c, uint numArgs, IntPtr[] args, uint k);

    /// <summary>
    ///  Pseudo-Boolean relations. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    /// <param name="k" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Encode p1 + p2 + ... + pn &lt;= k
    /// </remarks>
    [Z3Function("Z3_mk_atmost")]
    internal IntPtr MkAtmost(IntPtr c, uint numArgs, IntPtr[] args, uint k)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_atmost");
        var func = Marshal.GetDelegateForFunctionPointer<MkAtmostDelegate>(funcPtr);
        return func(c, numArgs, args, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkAtleastDelegate(IntPtr c, uint numArgs, IntPtr[] args, uint k);

    /// <summary>
    ///  Pseudo-Boolean relations. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    /// <param name="k" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Encode p1 + p2 + ... + pn &gt;= k
    /// </remarks>
    [Z3Function("Z3_mk_atleast")]
    internal IntPtr MkAtleast(IntPtr c, uint numArgs, IntPtr[] args, uint k)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_atleast");
        var func = Marshal.GetDelegateForFunctionPointer<MkAtleastDelegate>(funcPtr);
        return func(c, numArgs, args, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkPbleDelegate(IntPtr c, uint numArgs, IntPtr[] args, int[] coeffs, int k);

    /// <summary>
    ///  Pseudo-Boolean relations. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    /// <param name="coeffs" ctype="int const[]">int parameter</param>
    /// <param name="k" ctype="int">int parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Encode k1*p1 + k2*p2 + ... + kn*pn &lt;= k
    /// </remarks>
    [Z3Function("Z3_mk_pble")]
    internal IntPtr MkPble(IntPtr c, uint numArgs, IntPtr[] args, int[] coeffs, int k)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_pble");
        var func = Marshal.GetDelegateForFunctionPointer<MkPbleDelegate>(funcPtr);
        return func(c, numArgs, args, coeffs, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkPbgeDelegate(IntPtr c, uint numArgs, IntPtr[] args, int[] coeffs, int k);

    /// <summary>
    ///  Pseudo-Boolean relations. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    /// <param name="coeffs" ctype="int const[]">int parameter</param>
    /// <param name="k" ctype="int">int parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Encode k1*p1 + k2*p2 + ... + kn*pn &gt;= k
    /// </remarks>
    [Z3Function("Z3_mk_pbge")]
    internal IntPtr MkPbge(IntPtr c, uint numArgs, IntPtr[] args, int[] coeffs, int k)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_pbge");
        var func = Marshal.GetDelegateForFunctionPointer<MkPbgeDelegate>(funcPtr);
        return func(c, numArgs, args, coeffs, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkPbeqDelegate(IntPtr c, uint numArgs, IntPtr[] args, int[] coeffs, int k);

    /// <summary>
    ///  Pseudo-Boolean relations. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    /// <param name="coeffs" ctype="int const[]">int parameter</param>
    /// <param name="k" ctype="int">int parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Encode k1*p1 + k2*p2 + ... + kn*pn = k
    /// </remarks>
    [Z3Function("Z3_mk_pbeq")]
    internal IntPtr MkPbeq(IntPtr c, uint numArgs, IntPtr[] args, int[] coeffs, int k)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_pbeq");
        var func = Marshal.GetDelegateForFunctionPointer<MkPbeqDelegate>(funcPtr);
        return func(c, numArgs, args, coeffs, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FuncDeclToAstDelegate(IntPtr c, IntPtr f);

    /// <summary>
    ///  Convert a <c>Z3_func_decl</c> into <c>Z3_ast</c> . This is just type casting. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="f" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    [Z3Function("Z3_func_decl_to_ast")]
    internal IntPtr FuncDeclToAst(IntPtr c, IntPtr f)
    {
        var funcPtr = GetFunctionPointer("Z3_func_decl_to_ast");
        var func = Marshal.GetDelegateForFunctionPointer<FuncDeclToAstDelegate>(funcPtr);
        return func(c, f);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsEqFuncDeclDelegate(IntPtr c, IntPtr f1, IntPtr f2);

    /// <summary>
    ///  Compare terms. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="f1" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="f2" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_eq_func_decl")]
    internal bool IsEqFuncDecl(IntPtr c, IntPtr f1, IntPtr f2)
    {
        var funcPtr = GetFunctionPointer("Z3_is_eq_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<IsEqFuncDeclDelegate>(funcPtr);
        return func(c, f1, f2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetFuncDeclIdDelegate(IntPtr c, IntPtr f);

    /// <summary>
    ///  Return a unique identifier for <c>f</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="f" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_func_decl_id")]
    internal uint GetFuncDeclId(IntPtr c, IntPtr f)
    {
        var funcPtr = GetFunctionPointer("Z3_get_func_decl_id");
        var func = Marshal.GetDelegateForFunctionPointer<GetFuncDeclIdDelegate>(funcPtr);
        return func(c, f);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDeclNameDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Return the constant declaration name as a symbol. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="Z3_symbol">symbol value</returns>
    [Z3Function("Z3_get_decl_name")]
    internal IntPtr GetDeclName(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_name");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclNameDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate DeclKind GetDeclKindDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Return declaration kind corresponding to declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="Z3_decl_kind">decl_kind value</returns>
    [Z3Function("Z3_get_decl_kind")]
    internal DeclKind GetDeclKind(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_kind");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclKindDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetDomainSizeDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Return the number of parameters of the given declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="GetArity"/>
    [Z3Function("Z3_get_domain_size")]
    internal uint GetDomainSize(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_domain_size");
        var func = Marshal.GetDelegateForFunctionPointer<GetDomainSizeDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetArityDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Alias for <c>Z3_get_domain_size</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="GetDomainSize"/>
    [Z3Function("Z3_get_arity")]
    internal uint GetArity(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_arity");
        var func = Marshal.GetDelegateForFunctionPointer<GetArityDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDomainDelegate(IntPtr c, IntPtr d, uint i);

    /// <summary>
    ///  Return the sort of the i-th parameter of the given function declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_get_domain_size(d) 
    /// </remarks>
    /// <seealso cref="GetDomainSize"/>
    [Z3Function("Z3_get_domain")]
    internal IntPtr GetDomain(IntPtr c, IntPtr d, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_domain");
        var func = Marshal.GetDelegateForFunctionPointer<GetDomainDelegate>(funcPtr);
        return func(c, d, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetRangeDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Return the range of the given declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// If <c>d</c> is a constant (i.e., has zero arguments), then this function returns the sort of the constant.
    /// </remarks>
    [Z3Function("Z3_get_range")]
    internal IntPtr GetRange(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_range");
        var func = Marshal.GetDelegateForFunctionPointer<GetRangeDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetDeclNumParametersDelegate(IntPtr c, IntPtr d);

    /// <summary>
    ///  Return the number of parameters associated with a declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_decl_num_parameters")]
    internal uint GetDeclNumParameters(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_num_parameters");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclNumParametersDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate ParameterKind GetDeclParameterKindDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the parameter type associated with a declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> the context </param>
    /// <param name="d" ctype="Z3_func_decl"> the function declaration </param>
    /// <param name="idx" ctype="unsigned"> is the index of the named parameter it should be between 0 and the number of parameters. </param>
    /// <returns ctype="Z3_parameter_kind">parameter_kind value</returns>
    [Z3Function("Z3_get_decl_parameter_kind")]
    internal ParameterKind GetDeclParameterKind(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_parameter_kind");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclParameterKindDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int GetDeclIntParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the integer value associated with an integer parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="int">int value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_INT 
    /// </remarks>
    [Z3Function("Z3_get_decl_int_parameter")]
    internal int GetDeclIntParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_int_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclIntParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate double GetDeclDoubleParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the double value associated with an double parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="double">double value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_DOUBLE 
    /// </remarks>
    [Z3Function("Z3_get_decl_double_parameter")]
    internal double GetDeclDoubleParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_double_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclDoubleParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDeclSymbolParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the double value associated with an double parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_symbol">symbol value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_SYMBOL 
    /// </remarks>
    [Z3Function("Z3_get_decl_symbol_parameter")]
    internal IntPtr GetDeclSymbolParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_symbol_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclSymbolParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDeclSortParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the sort value associated with a sort parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_SORT 
    /// </remarks>
    [Z3Function("Z3_get_decl_sort_parameter")]
    internal IntPtr GetDeclSortParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_sort_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclSortParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDeclAstParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the expression value associated with an expression parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_AST 
    /// </remarks>
    [Z3Function("Z3_get_decl_ast_parameter")]
    internal IntPtr GetDeclAstParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_ast_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclAstParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDeclFuncDeclParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the expression value associated with an expression parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_FUNC_DECL 
    /// </remarks>
    [Z3Function("Z3_get_decl_func_decl_parameter")]
    internal IntPtr GetDeclFuncDeclParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_func_decl_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclFuncDeclParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDeclRationalParameterDelegate(IntPtr c, IntPtr d, uint idx);

    /// <summary>
    ///  Return the rational value, as a string, associated with a rational parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="d" ctype="Z3_func_decl">func_decl parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: Z3_get_decl_parameter_kind(c, d, idx) == Z3_PARAMETER_RATIONAL 
    /// </remarks>
    [Z3Function("Z3_get_decl_rational_parameter")]
    internal IntPtr GetDeclRationalParameter(IntPtr c, IntPtr d, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_decl_rational_parameter");
        var func = Marshal.GetDelegateForFunctionPointer<GetDeclRationalParameterDelegate>(funcPtr);
        return func(c, d, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AppToAstDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Convert a <c>Z3_app</c> into <c>Z3_ast</c> . This is just type casting. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_app">app parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    [Z3Function("Z3_app_to_ast")]
    internal IntPtr AppToAst(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_app_to_ast");
        var func = Marshal.GetDelegateForFunctionPointer<AppToAstDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetAppDeclDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return the declaration of a constant or function application. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_app">app parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    [Z3Function("Z3_get_app_decl")]
    internal IntPtr GetAppDecl(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_app_decl");
        var func = Marshal.GetDelegateForFunctionPointer<GetAppDeclDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetAppNumArgsDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return the number of argument of an application. If <c>t</c> is an constant, then the number of arguments is 0. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_app">app parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="GetAppArg"/>
    [Z3Function("Z3_get_app_num_args")]
    internal uint GetAppNumArgs(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_app_num_args");
        var func = Marshal.GetDelegateForFunctionPointer<GetAppNumArgsDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetAppArgDelegate(IntPtr c, IntPtr a, uint i);

    /// <summary>
    ///  Return the i-th argument of the given application. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_app">app parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_get_app_num_args(c, a) 
    /// </remarks>
    /// <seealso cref="GetAppNumArgs"/>
    [Z3Function("Z3_get_app_arg")]
    internal IntPtr GetAppArg(IntPtr c, IntPtr a, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_app_arg");
        var func = Marshal.GetDelegateForFunctionPointer<GetAppArgDelegate>(funcPtr);
        return func(c, a, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsEqAstDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    ///  Compare terms. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t1" ctype="Z3_ast">ast parameter</param>
    /// <param name="t2" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_eq_ast")]
    internal bool IsEqAst(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_is_eq_ast");
        var func = Marshal.GetDelegateForFunctionPointer<IsEqAstDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetAstIdDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return a unique identifier for <c>t</c> . The identifier is unique up to structural equality. Thus, two ast nodes created by the same context and having the same children and same function symbols have the same identifiers. Ast nodes created in the same context, but having different children or different functions have different identifiers. Variables and quantifiers are also assigned different identifiers according to their structure. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_ast_id")]
    internal uint GetAstId(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_get_ast_id");
        var func = Marshal.GetDelegateForFunctionPointer<GetAstIdDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetAstHashDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return a hash code for the given AST. The hash code is structural but two different AST objects can map to the same hash. The result of <c>Z3_get_ast_id</c> returns an identifier that is unique over the set of live AST objects. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_ast_hash")]
    internal uint GetAstHash(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_ast_hash");
        var func = Marshal.GetDelegateForFunctionPointer<GetAstHashDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetSortDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return the sort of an AST node. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// The AST node must be a constant, application, numeral, bound variable, or quantifier.
    /// </remarks>
    [Z3Function("Z3_get_sort")]
    internal IntPtr GetSort(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_sort");
        var func = Marshal.GetDelegateForFunctionPointer<GetSortDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsWellSortedDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return <c>true</c> if the given expression <c>t</c> is well sorted. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_well_sorted")]
    internal bool IsWellSorted(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_is_well_sorted");
        var func = Marshal.GetDelegateForFunctionPointer<IsWellSortedDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate Lbool GetBoolValueDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return <c>Z3_L_TRUE</c> if <c>a</c> is true, <c>Z3_L_FALSE</c> if it is false, and <c>Z3_L_UNDEF</c> otherwise. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_lbool">lbool value</returns>
    [Z3Function("Z3_get_bool_value")]
    internal Lbool GetBoolValue(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_bool_value");
        var func = Marshal.GetDelegateForFunctionPointer<GetBoolValueDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate AstKind GetAstKindDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return the kind of the given AST. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast_kind">ast_kind value</returns>
    [Z3Function("Z3_get_ast_kind")]
    internal AstKind GetAstKind(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_ast_kind");
        var func = Marshal.GetDelegateForFunctionPointer<GetAstKindDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsAppDelegate(IntPtr c, IntPtr a);

    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_app")]
    internal bool IsApp(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_app");
        var func = Marshal.GetDelegateForFunctionPointer<IsAppDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsGroundDelegate(IntPtr c, IntPtr a);

    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_ground")]
    internal bool IsGround(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_ground");
        var func = Marshal.GetDelegateForFunctionPointer<IsGroundDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetDepthDelegate(IntPtr c, IntPtr a);

    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_depth")]
    internal uint GetDepth(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_depth");
        var func = Marshal.GetDelegateForFunctionPointer<GetDepthDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsNumeralAstDelegate(IntPtr c, IntPtr a);

    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_numeral_ast")]
    internal bool IsNumeralAst(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_numeral_ast");
        var func = Marshal.GetDelegateForFunctionPointer<IsNumeralAstDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsAlgebraicNumberDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return <c>true</c> if the given AST is a real algebraic number. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_algebraic_number")]
    internal bool IsAlgebraicNumber(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_algebraic_number");
        var func = Marshal.GetDelegateForFunctionPointer<IsAlgebraicNumberDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ToAppDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Convert an <c>ast</c> into an <c>APP_AST</c> . This is just type casting. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_app">app value</returns>
    /// <remarks>
    /// Precondition: <code>
    /// Z3_get_ast_kind(c, a) == \c Z3_APP_AST
    /// </code> 
    /// </remarks>
    [Z3Function("Z3_to_app")]
    internal IntPtr ToApp(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_to_app");
        var func = Marshal.GetDelegateForFunctionPointer<ToAppDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ToFuncDeclDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Convert an AST into a FUNC_DECL_AST. This is just type casting. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_func_decl">func_decl value</returns>
    /// <remarks>
    /// Precondition: <code>
    /// Z3_get_ast_kind(c, a) == Z3_FUNC_DECL_AST
    /// </code> 
    /// </remarks>
    [Z3Function("Z3_to_func_decl")]
    internal IntPtr ToFuncDecl(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_to_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<ToFuncDeclDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetNumeralStringDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return numeral value, as a decimal string of a numeric constant term. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, a) == Z3_NUMERAL_AST 
    /// </remarks>
    [Z3Function("Z3_get_numeral_string")]
    internal IntPtr GetNumeralString(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_string");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralStringDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetNumeralBinaryStringDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return numeral value, as a binary string of a numeric constant term. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, a) == Z3_NUMERAL_AST 
    /// Precondition: a represents a non-negative integer 
    /// </remarks>
    [Z3Function("Z3_get_numeral_binary_string")]
    internal IntPtr GetNumeralBinaryString(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_binary_string");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralBinaryStringDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetNumeralDecimalStringDelegate(IntPtr c, IntPtr a, uint precision);

    /// <summary>
    ///  Return numeral as a string in decimal notation. The result has at most <c>precision</c> decimal places. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="precision" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, a) == Z3_NUMERAL_AST || Z3_is_algebraic_number(c, a) 
    /// </remarks>
    [Z3Function("Z3_get_numeral_decimal_string")]
    internal IntPtr GetNumeralDecimalString(IntPtr c, IntPtr a, uint precision)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_decimal_string");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralDecimalStringDelegate>(funcPtr);
        return func(c, a, precision);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate double GetNumeralDoubleDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return numeral as a double. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="double">double value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, a) == Z3_NUMERAL_AST || Z3_is_algebraic_number(c, a) 
    /// </remarks>
    [Z3Function("Z3_get_numeral_double")]
    internal double GetNumeralDouble(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_double");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralDoubleDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetNumeratorDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return the numerator (as a numeral AST) of a numeral AST of sort Real. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, a) == Z3_NUMERAL_AST 
    /// </remarks>
    [Z3Function("Z3_get_numerator")]
    internal IntPtr GetNumerator(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numerator");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeratorDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetDenominatorDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return the denominator (as a numeral AST) of a numeral AST of sort Real. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, a) == Z3_NUMERAL_AST 
    /// </remarks>
    [Z3Function("Z3_get_denominator")]
    internal IntPtr GetDenominator(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_denominator");
        var func = Marshal.GetDelegateForFunctionPointer<GetDenominatorDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetNumeralSmallDelegate(IntPtr c, IntPtr a, out long num, out long den);

    /// <summary>
    ///  Return numeral value, as a pair of 64 bit numbers if the representation fits. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context. </param>
    /// <param name="a" ctype="Z3_ast"> term. </param>
    /// <param name="num" ctype="int64_t*"> numerator. </param>
    /// <param name="den" ctype="int64_t*"> denominator. </param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Return <c>true</c> if the numeral value fits in 64 bit numerals, <c>false</c> otherwise. Equivalent to <c>Z3_get_numeral_rational_int64</c> except that for unsupported expression arguments <c>Z3_get_numeral_small</c> signals an error while <c>Z3_get_numeral_rational_int64</c> returns <c>false</c> .
    /// Precondition: Z3_get_ast_kind(a) == Z3_NUMERAL_AST 
    /// </remarks>
    [Z3Function("Z3_get_numeral_small")]
    internal bool GetNumeralSmall(IntPtr c, IntPtr a, out long num, out long den)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_small");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralSmallDelegate>(funcPtr);
        return func(c, a, out num, out den);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetNumeralIntDelegate(IntPtr c, IntPtr v, out int i);

    /// <summary>
    ///  Similar to <see cref="GetNumeralString"/> , but only succeeds if the value can fit in a machine int. Return <c>true</c> if the call succeeded. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast">ast parameter</param>
    /// <param name="i" ctype="int*">int parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, v) == Z3_NUMERAL_AST 
    /// </remarks>
    /// <seealso cref="GetNumeralString"/>
    [Z3Function("Z3_get_numeral_int")]
    internal bool GetNumeralInt(IntPtr c, IntPtr v, out int i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_int");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralIntDelegate>(funcPtr);
        return func(c, v, out i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetNumeralUintDelegate(IntPtr c, IntPtr v, out uint u);

    /// <summary>
    ///  Similar to <see cref="GetNumeralString"/> , but only succeeds if the value can fit in a machine unsigned int. Return <c>true</c> if the call succeeded. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast">ast parameter</param>
    /// <param name="u" ctype="unsigned*">unsigned parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, v) == Z3_NUMERAL_AST 
    /// </remarks>
    /// <seealso cref="GetNumeralString"/>
    [Z3Function("Z3_get_numeral_uint")]
    internal bool GetNumeralUint(IntPtr c, IntPtr v, out uint u)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_uint");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralUintDelegate>(funcPtr);
        return func(c, v, out u);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetNumeralUint64Delegate(IntPtr c, IntPtr v, out ulong u);

    /// <summary>
    ///  Similar to <see cref="GetNumeralString"/> , but only succeeds if the value can fit in a machine <c>uint64_t</c> int. Return <c>true</c> if the call succeeded. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast">ast parameter</param>
    /// <param name="u" ctype="uint64_t*">uint64_t parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, v) == Z3_NUMERAL_AST 
    /// </remarks>
    /// <seealso cref="GetNumeralString"/>
    [Z3Function("Z3_get_numeral_uint64")]
    internal bool GetNumeralUint64(IntPtr c, IntPtr v, out ulong u)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_uint64");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralUint64Delegate>(funcPtr);
        return func(c, v, out u);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetNumeralInt64Delegate(IntPtr c, IntPtr v, out long i);

    /// <summary>
    ///  Similar to <see cref="GetNumeralString"/> , but only succeeds if the value can fit in a machine <c>int64_t</c> int. Return <c>true</c> if the call succeeded. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast">ast parameter</param>
    /// <param name="i" ctype="int64_t*">int64_t parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, v) == Z3_NUMERAL_AST 
    /// </remarks>
    /// <seealso cref="GetNumeralString"/>
    [Z3Function("Z3_get_numeral_int64")]
    internal bool GetNumeralInt64(IntPtr c, IntPtr v, out long i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_int64");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralInt64Delegate>(funcPtr);
        return func(c, v, out i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GetNumeralRationalInt64Delegate(IntPtr c, IntPtr v, out long num, out long den);

    /// <summary>
    ///  Similar to <see cref="GetNumeralString"/> , but only succeeds if the value can fit as a rational number as machine <c>int64_t</c> int. Return <c>true</c> if the call succeeded. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast">ast parameter</param>
    /// <param name="num" ctype="int64_t*">int64_t parameter</param>
    /// <param name="den" ctype="int64_t*">int64_t parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(c, v) == Z3_NUMERAL_AST 
    /// </remarks>
    /// <seealso cref="GetNumeralString"/>
    [Z3Function("Z3_get_numeral_rational_int64")]
    internal bool GetNumeralRationalInt64(IntPtr c, IntPtr v, out long num, out long den)
    {
        var funcPtr = GetFunctionPointer("Z3_get_numeral_rational_int64");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumeralRationalInt64Delegate>(funcPtr);
        return func(c, v, out num, out den);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetAlgebraicNumberLowerDelegate(IntPtr c, IntPtr a, uint precision);

    /// <summary>
    ///  Return a lower bound for the given real algebraic number. The interval isolating the number is smaller than 1/10^precision. The result is a numeral AST of sort Real. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="precision" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_is_algebraic_number(c, a) 
    /// </remarks>
    [Z3Function("Z3_get_algebraic_number_lower")]
    internal IntPtr GetAlgebraicNumberLower(IntPtr c, IntPtr a, uint precision)
    {
        var funcPtr = GetFunctionPointer("Z3_get_algebraic_number_lower");
        var func = Marshal.GetDelegateForFunctionPointer<GetAlgebraicNumberLowerDelegate>(funcPtr);
        return func(c, a, precision);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetAlgebraicNumberUpperDelegate(IntPtr c, IntPtr a, uint precision);

    /// <summary>
    ///  Return a upper bound for the given real algebraic number. The interval isolating the number is smaller than 1/10^precision. The result is a numeral AST of sort Real. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="precision" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_is_algebraic_number(c, a) 
    /// </remarks>
    [Z3Function("Z3_get_algebraic_number_upper")]
    internal IntPtr GetAlgebraicNumberUpper(IntPtr c, IntPtr a, uint precision)
    {
        var funcPtr = GetFunctionPointer("Z3_get_algebraic_number_upper");
        var func = Marshal.GetDelegateForFunctionPointer<GetAlgebraicNumberUpperDelegate>(funcPtr);
        return func(c, a, precision);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr PatternToAstDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Convert a Z3_pattern into Z3_ast. This is just type casting. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_pattern">pattern parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    [Z3Function("Z3_pattern_to_ast")]
    internal IntPtr PatternToAst(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_pattern_to_ast");
        var func = Marshal.GetDelegateForFunctionPointer<PatternToAstDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetPatternNumTermsDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Return number of terms in pattern. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_pattern">pattern parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_get_pattern_num_terms")]
    internal uint GetPatternNumTerms(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_get_pattern_num_terms");
        var func = Marshal.GetDelegateForFunctionPointer<GetPatternNumTermsDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetPatternDelegate(IntPtr c, IntPtr p, uint idx);

    /// <summary>
    ///  Return i'th ast in pattern. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_pattern">pattern parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    [Z3Function("Z3_get_pattern")]
    internal IntPtr GetPattern(IntPtr c, IntPtr p, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_get_pattern");
        var func = Marshal.GetDelegateForFunctionPointer<GetPatternDelegate>(funcPtr);
        return func(c, p, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetIndexValueDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return index of de-Bruijn bound variable. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_VAR_AST 
    /// </remarks>
    [Z3Function("Z3_get_index_value")]
    internal uint GetIndexValue(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_index_value");
        var func = Marshal.GetDelegateForFunctionPointer<GetIndexValueDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsQuantifierForallDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Determine if an ast is a universal quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_quantifier_forall")]
    internal bool IsQuantifierForall(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_quantifier_forall");
        var func = Marshal.GetDelegateForFunctionPointer<IsQuantifierForallDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsQuantifierExistsDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Determine if ast is an existential quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    [Z3Function("Z3_is_quantifier_exists")]
    internal bool IsQuantifierExists(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_quantifier_exists");
        var func = Marshal.GetDelegateForFunctionPointer<IsQuantifierExistsDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool IsLambdaDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Determine if ast is a lambda expression. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_is_lambda")]
    internal bool IsLambda(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_is_lambda");
        var func = Marshal.GetDelegateForFunctionPointer<IsLambdaDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetQuantifierWeightDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Obtain weight of quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_weight")]
    internal uint GetQuantifierWeight(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_weight");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierWeightDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierSkolemIdDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Obtain skolem id of quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_symbol">symbol value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_skolem_id")]
    internal IntPtr GetQuantifierSkolemId(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_skolem_id");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierSkolemIdDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierIdDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Obtain id of quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_symbol">symbol value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_id")]
    internal IntPtr GetQuantifierId(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_id");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierIdDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetQuantifierNumPatternsDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return number of patterns used in quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_num_patterns")]
    internal uint GetQuantifierNumPatterns(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_num_patterns");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierNumPatternsDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierPatternAstDelegate(IntPtr c, IntPtr a, uint i);

    /// <summary>
    ///  Return i'th pattern. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_pattern">pattern value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_pattern_ast")]
    internal IntPtr GetQuantifierPatternAst(IntPtr c, IntPtr a, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_pattern_ast");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierPatternAstDelegate>(funcPtr);
        return func(c, a, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetQuantifierNumNoPatternsDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return number of no_patterns used in quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_num_no_patterns")]
    internal uint GetQuantifierNumNoPatterns(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_num_no_patterns");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierNumNoPatternsDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierNoPatternAstDelegate(IntPtr c, IntPtr a, uint i);

    /// <summary>
    ///  Return i'th no_pattern. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_no_pattern_ast")]
    internal IntPtr GetQuantifierNoPatternAst(IntPtr c, IntPtr a, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_no_pattern_ast");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierNoPatternAstDelegate>(funcPtr);
        return func(c, a, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetQuantifierNumBoundDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return number of bound variables of quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_num_bound")]
    internal uint GetQuantifierNumBound(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_num_bound");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierNumBoundDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierBoundNameDelegate(IntPtr c, IntPtr a, uint i);

    /// <summary>
    ///  Return symbol of the i'th bound variable. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_symbol">symbol value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_bound_name")]
    internal IntPtr GetQuantifierBoundName(IntPtr c, IntPtr a, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_bound_name");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierBoundNameDelegate>(funcPtr);
        return func(c, a, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierBoundSortDelegate(IntPtr c, IntPtr a, uint i);

    /// <summary>
    ///  Return sort of the i'th bound variable. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_sort">sort value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_bound_sort")]
    internal IntPtr GetQuantifierBoundSort(IntPtr c, IntPtr a, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_bound_sort");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierBoundSortDelegate>(funcPtr);
        return func(c, a, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetQuantifierBodyDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Return body of quantifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_get_ast_kind(a) == Z3_QUANTIFIER_AST 
    /// </remarks>
    [Z3Function("Z3_get_quantifier_body")]
    internal IntPtr GetQuantifierBody(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_get_quantifier_body");
        var func = Marshal.GetDelegateForFunctionPointer<GetQuantifierBodyDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifyDelegate(IntPtr c, IntPtr a);

    /// <summary>
    ///  Interface to simplifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Provides an interface to the AST simplifier used by Z3. It returns an AST object which is equal to the argument. The returned AST is simplified using algebraic simplification rules, such as constant propagation (propagating true/false over logical connectives).
    /// </remarks>
    /// <seealso cref="SimplifyEx"/>
    [Z3Function("Z3_simplify")]
    internal IntPtr Simplify(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_simplify");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifyDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifyExDelegate(IntPtr c, IntPtr a, IntPtr p);

    /// <summary>
    ///  Interface to simplifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Provides an interface to the AST simplifier used by Z3. This procedure is similar to <see cref="Simplify"/> , but the behavior of the simplifier can be configured using the given parameter set.
    /// </remarks>
    /// <seealso cref="Simplify"/>
    /// <seealso cref="SimplifyGetHelp"/>
    /// <seealso cref="SimplifyGetParamDescrs"/>
    [Z3Function("Z3_simplify_ex")]
    internal IntPtr SimplifyEx(IntPtr c, IntPtr a, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_simplify_ex");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifyExDelegate>(funcPtr);
        return func(c, a, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifyGetHelpDelegate(IntPtr c);

    /// <summary>
    ///  Return a string describing all available parameters. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <seealso cref="SimplifyEx"/>
    /// <seealso cref="SimplifyGetParamDescrs"/>
    [Z3Function("Z3_simplify_get_help")]
    internal IntPtr SimplifyGetHelp(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_simplify_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifyGetHelpDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifyGetParamDescrsDelegate(IntPtr c);

    /// <summary>
    ///  Return the parameter description set for the simplify procedure. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_param_descrs">param_descrs value</returns>
    /// <seealso cref="SimplifyEx"/>
    /// <seealso cref="SimplifyGetHelp"/>
    [Z3Function("Z3_simplify_get_param_descrs")]
    internal IntPtr SimplifyGetParamDescrs(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_simplify_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifyGetParamDescrsDelegate>(funcPtr);
        return func(c);
    }

}
