// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Create configuration
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkConfigDelegate();

    /// <summary>
    ///  Create a configuration object for the Z3 context object. 
    /// </summary>
    /// <remarks>
    /// Configurations are created in order to assign parameters prior to creating contexts for Z3 interaction. For example, if the users wishes to use proof generation, then call: <c>Z3_set_param_value(cfg\, "proof"\, "true")</c>
    /// In previous versions of Z3, the <c>Z3_config</c> was used to store global and module configurations. Now, we should use <c>Z3_global_param_set</c> . 
    /// </remarks>
    /// <seealso cref="SetParamValue"/>
    /// <seealso cref="DelConfig"/>
    [Z3Function("Z3_mk_config")]
    internal IntPtr MkConfig()
    {
        var funcPtr = GetFunctionPointer("Z3_mk_config");
        var func = Marshal.GetDelegateForFunctionPointer<MkConfigDelegate>(funcPtr);
        return func();
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void DelConfigDelegate(IntPtr c);

    /// <summary>
    ///  Delete the given configuration object. 
    /// </summary>
    /// <param name="c" ctype="Z3_config">config parameter</param>
    /// <seealso cref="MkConfig"/>
    [Z3Function("Z3_del_config")]
    internal void DelConfig(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_del_config");
        var func = Marshal.GetDelegateForFunctionPointer<DelConfigDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetParamValueDelegate(IntPtr c, IntPtr paramId, IntPtr paramValue);

    /// <summary>
    ///  Set a configuration parameter. 
    /// </summary>
    /// <param name="c" ctype="Z3_config">config parameter</param>
    /// <param name="paramId" ctype="Z3_string">string parameter</param>
    /// <param name="paramValue" ctype="Z3_string">string parameter</param>
    /// <remarks>
    /// The following parameters can be set for
    /// </remarks>
    /// <seealso cref="MkConfig"/>
    [Z3Function("Z3_set_param_value")]
    internal void SetParamValue(IntPtr c, IntPtr paramId, IntPtr paramValue)
    {
        var funcPtr = GetFunctionPointer("Z3_set_param_value");
        var func = Marshal.GetDelegateForFunctionPointer<SetParamValueDelegate>(funcPtr);
        func(c, paramId, paramValue);
    }

}
