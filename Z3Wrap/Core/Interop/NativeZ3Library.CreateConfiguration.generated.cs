// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Create configuration
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkConfigDelegate();

    /// <summary>
    /// <para>
    /// Create a configuration object for the Z3 context object.
    /// </para>
    /// <para>
    /// Configurations are created in order to assign parameters prior to creating
    /// contexts for Z3 interaction. For example, if the users wishes to use proof
    /// generation, then call:
    /// </para>
    /// <para>
    /// <code>Z3_set_param_value(cfg\, "proof"\, "true")</code>
    /// </para>
    /// </summary>
    /// <remarks>
    /// <para>
    /// In previous versions of Z3, the Z3_config was used to store
    /// global and module configurations. Now, we should use Z3_global_param_set.
    /// </para>
    /// <para>
    /// The following parameters can be set:
    /// </para>
    /// <para>
    /// <list type="bullet">
    /// <item><description>proof  (Boolean)           Enable proof generation</description></item>
    /// <item><description>debug_ref_count (Boolean)  Enable debug support for Z3_ast reference counting</description></item>
    /// <item><description>trace  (Boolean)           Tracing support for VCC</description></item>
    /// <item><description>trace_file_name (String)   Trace out file for VCC traces</description></item>
    /// <item><description>timeout (unsigned)         default timeout (in milliseconds) used for solvers</description></item>
    /// <item><description>well_sorted_check          type checker</description></item>
    /// <item><description>auto_config                use heuristics to automatically select solver and configure it</description></item>
    /// <item><description>model                      model generation for solvers, this parameter can be overwritten when creating a solver</description></item>
    /// <item><description>model_validate             validate models produced by solvers</description></item>
    /// <item><description>unsat_core                 unsat-core generation for solvers, this parameter can be overwritten when creating a solver</description></item>
    /// <item><description>encoding                   the string encoding used internally (must be either "unicode" - 18 bit, "bmp" - 16 bit or "ascii" - 8 bit)</description></item>
    /// </list>
    /// </para>
    /// </remarks>
    /// <seealso cref="SetParamValue"/>
    /// <seealso cref="DelConfig"/>
    [Z3Function("Z3_mk_config")]
    internal IntPtr MkConfig()
    {
        var funcPtr = GetFunctionPointer("Z3_mk_config");
        var func = Marshal.GetDelegateForFunctionPointer<MkConfigDelegate>(funcPtr);
        return func();
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void DelConfigDelegate(IntPtr c);

    /// <summary>
    /// Delete the given configuration object.
    /// </summary>
    /// <seealso cref="MkConfig"/>
    [Z3Function("Z3_del_config")]
    internal void DelConfig(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_del_config");
        var func = Marshal.GetDelegateForFunctionPointer<DelConfigDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetParamValueDelegate(IntPtr c, IntPtr paramId, IntPtr paramValue);

    /// <summary>
    /// <para>
    /// Set a configuration parameter.
    /// </para>
    /// <para>
    /// The following parameters can be set for
    /// </para>
    /// </summary>
    /// <seealso cref="MkConfig"/>
    [Z3Function("Z3_set_param_value")]
    internal void SetParamValue(IntPtr c, IntPtr paramId, IntPtr paramValue)
    {
        var funcPtr = GetFunctionPointer("Z3_set_param_value");
        var func = Marshal.GetDelegateForFunctionPointer<SetParamValueDelegate>(funcPtr);
        func(c, paramId, paramValue);
    }

}
