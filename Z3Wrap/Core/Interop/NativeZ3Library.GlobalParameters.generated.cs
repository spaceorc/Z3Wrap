// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Global Parameters
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void GlobalParamSetDelegate(IntPtr paramId, IntPtr paramValue);

    /// <summary>
    /// <para>
    /// Set a global (or module) parameter.
    /// This setting is shared by all Z3 contexts.
    /// </para>
    /// <para>
    /// When a Z3 module is initialized it will use the value of these parameters
    /// when Z3_params objects are not provided.
    /// </para>
    /// <para>
    /// The name of parameter can be composed of characters [a-z][A-Z], digits [0-9], '-' and '_'.
    /// The character '.' is a delimiter (more later).
    /// </para>
    /// <para>
    /// The parameter names are case-insensitive. The character '-' should be viewed as an "alias" for '_'.
    /// Thus, the following parameter names are considered equivalent: "pp.decimal-precision"  and "PP.DECIMAL_PRECISION".
    /// </para>
    /// <para>
    /// This function can be used to set parameters for a specific Z3 module.
    /// This can be done by using &lt;module-name&gt;.&lt;parameter-name&gt;.
    /// For example:
    /// Z3_global_param_set('pp.decimal', 'true')
    /// will set the parameter "decimal" in the module "pp" to true.
    /// </para>
    /// </summary>
    /// <param name="paramId" ctype="Z3_string">string parameter</param>
    /// <param name="paramValue" ctype="Z3_string">string parameter</param>
    /// <seealso cref="GlobalParamGet"/>
    /// <seealso cref="GlobalParamResetAll"/>
    [Z3Function("Z3_global_param_set")]
    internal void GlobalParamSet(IntPtr paramId, IntPtr paramValue)
    {
        var funcPtr = GetFunctionPointer("Z3_global_param_set");
        var func = Marshal.GetDelegateForFunctionPointer<GlobalParamSetDelegate>(funcPtr);
        func(paramId, paramValue);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void GlobalParamResetAllDelegate();

    /// <summary>
    /// Restore the value of all global (and module) parameters.
    /// This command will not affect already created objects (such as tactics and solvers).
    /// </summary>
    /// <seealso cref="GlobalParamGet"/>
    /// <seealso cref="GlobalParamSet"/>
    [Z3Function("Z3_global_param_reset_all")]
    internal void GlobalParamResetAll()
    {
        var funcPtr = GetFunctionPointer("Z3_global_param_reset_all");
        var func = Marshal.GetDelegateForFunctionPointer<GlobalParamResetAllDelegate>(funcPtr);
        func();
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool GlobalParamGetDelegate(IntPtr paramId, IntPtr paramValue);

    /// <summary>
    /// <para>
    /// Get a global (or module) parameter.
    /// </para>
    /// <para>
    /// Returns false if the parameter value does not exist.
    /// </para>
    /// </summary>
    /// <param name="paramId" ctype="Z3_string">string parameter</param>
    /// <param name="paramValue" ctype="Z3_string_ptr">string_ptr parameter</param>
    /// <remarks>
    /// This function cannot be invoked simultaneously from different threads without synchronization.
    /// The result string stored in param_value is stored in shared location.
    /// </remarks>
    /// <seealso cref="GlobalParamResetAll"/>
    /// <seealso cref="GlobalParamSet"/>
    [Z3Function("Z3_global_param_get")]
    internal bool GlobalParamGet(IntPtr paramId, IntPtr paramValue)
    {
        var funcPtr = GetFunctionPointer("Z3_global_param_get");
        var func = Marshal.GetDelegateForFunctionPointer<GlobalParamGetDelegate>(funcPtr);
        return func(paramId, paramValue);
    }

}
