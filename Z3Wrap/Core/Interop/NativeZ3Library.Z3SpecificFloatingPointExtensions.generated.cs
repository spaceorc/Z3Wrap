// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_fpa.h / Z3-specific floating-point extensions
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint FpaGetEbitsDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Retrieves the number of bits reserved for the exponent in a FloatingPoint sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="s" ctype="Z3_sort"> FloatingPoint sort </param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="FpaGetSbits"/>
    [Z3Function("Z3_fpa_get_ebits")]
    internal uint FpaGetEbits(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_ebits");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetEbitsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint FpaGetSbitsDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Retrieves the number of bits reserved for the significand in a FloatingPoint sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="s" ctype="Z3_sort"> FloatingPoint sort </param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="FpaGetEbits"/>
    [Z3Function("Z3_fpa_get_sbits")]
    internal uint FpaGetSbits(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_sbits");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetSbitsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralNanDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is a NaN. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralInf"/>
    /// <seealso cref="FpaIsNumeralNormal"/>
    /// <seealso cref="FpaIsNumeralSubnormal"/>
    /// <seealso cref="FpaIsNumeralZero"/>
    [Z3Function("Z3_fpa_is_numeral_nan")]
    internal bool FpaIsNumeralNan(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_nan");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralNanDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralInfDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is a +oo or -oo. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralNan"/>
    /// <seealso cref="FpaIsNumeralNormal"/>
    /// <seealso cref="FpaIsNumeralSubnormal"/>
    /// <seealso cref="FpaIsNumeralZero"/>
    [Z3Function("Z3_fpa_is_numeral_inf")]
    internal bool FpaIsNumeralInf(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_inf");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralInfDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralZeroDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is +zero or -zero. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralInf"/>
    /// <seealso cref="FpaIsNumeralNan"/>
    /// <seealso cref="FpaIsNumeralNormal"/>
    /// <seealso cref="FpaIsNumeralSubnormal"/>
    [Z3Function("Z3_fpa_is_numeral_zero")]
    internal bool FpaIsNumeralZero(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_zero");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralZeroDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralNormalDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is normal. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralInf"/>
    /// <seealso cref="FpaIsNumeralNan"/>
    /// <seealso cref="FpaIsNumeralSubnormal"/>
    /// <seealso cref="FpaIsNumeralZero"/>
    [Z3Function("Z3_fpa_is_numeral_normal")]
    internal bool FpaIsNumeralNormal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_normal");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralNormalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralSubnormalDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is subnormal. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralInf"/>
    /// <seealso cref="FpaIsNumeralNan"/>
    /// <seealso cref="FpaIsNumeralNormal"/>
    /// <seealso cref="FpaIsNumeralZero"/>
    [Z3Function("Z3_fpa_is_numeral_subnormal")]
    internal bool FpaIsNumeralSubnormal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_subnormal");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralSubnormalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralPositiveDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is positive. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralNegative"/>
    [Z3Function("Z3_fpa_is_numeral_positive")]
    internal bool FpaIsNumeralPositive(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_positive");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralPositiveDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaIsNumeralNegativeDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Checks whether a given floating-point numeral is negative. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="bool">bool value</returns>
    /// <seealso cref="FpaIsNumeralPositive"/>
    [Z3Function("Z3_fpa_is_numeral_negative")]
    internal bool FpaIsNumeralNegative(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_negative");
        var func = Marshal.GetDelegateForFunctionPointer<FpaIsNumeralNegativeDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FpaGetNumeralSignBvDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Retrieves the sign of a floating-point literal as a bit-vector expression. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Remarks: NaN is an invalid argument.
    /// </remarks>
    [Z3Function("Z3_fpa_get_numeral_sign_bv")]
    internal IntPtr FpaGetNumeralSignBv(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_sign_bv");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralSignBvDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FpaGetNumeralSignificandBvDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Retrieves the significand of a floating-point literal as a bit-vector expression. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Remarks: NaN is an invalid argument.
    /// </remarks>
    [Z3Function("Z3_fpa_get_numeral_significand_bv")]
    internal IntPtr FpaGetNumeralSignificandBv(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_significand_bv");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralSignificandBvDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaGetNumeralSignDelegate(IntPtr c, IntPtr t, IntPtr sgn);

    /// <summary>
    ///  Retrieves the sign of a floating-point literal. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <param name="sgn" ctype="int *"> the retrieved sign </param>
    /// <returns ctype="bool">true if <c>t</c> corresponds to a floating point numeral, otherwise invokes exception handler or returns false </returns>
    [Z3Function("Z3_fpa_get_numeral_sign")]
    internal bool FpaGetNumeralSign(IntPtr c, IntPtr t, IntPtr sgn)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_sign");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralSignDelegate>(funcPtr);
        return func(c, t, sgn);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FpaGetNumeralSignificandStringDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the significand value of a floating-point numeral as a string. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <returns ctype="Z3_string">true if <c>t</c> corresponds to a floating point numeral, otherwise invokes exception handler or returns false </returns>
    [Z3Function("Z3_fpa_get_numeral_significand_string")]
    internal IntPtr FpaGetNumeralSignificandString(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_significand_string");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralSignificandStringDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaGetNumeralSignificandUint64Delegate(IntPtr c, IntPtr t, IntPtr n);

    /// <summary>
    ///  Return the significand value of a floating-point numeral as a uint64. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <param name="n" ctype="uint64_t *"> pointer to output uint64 </param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Remarks: This function extracts the significand bits in <c>t</c> , without the hidden bit or normalization. Sets the <c>Z3_INVALID_ARG</c> error code if the significand does not fit into a <c>uint64</c> . NaN is an invalid argument.
    /// </remarks>
    [Z3Function("Z3_fpa_get_numeral_significand_uint64")]
    internal bool FpaGetNumeralSignificandUint64(IntPtr c, IntPtr t, IntPtr n)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_significand_uint64");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralSignificandUint64Delegate>(funcPtr);
        return func(c, t, n);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FpaGetNumeralExponentStringDelegate(IntPtr c, IntPtr t, bool biased);

    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_ast">ast parameter</param>
    /// <param name="biased" ctype="bool">bool parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// <code>
    /// \brief Return the exponent value of a floating-point numeral as a string.
    ///
    /// \param c logical context
    /// \param t a floating-point numeral
    /// \param biased flag to indicate whether the result is in biased representation
    /// \returns true if \c t corresponds to a floating point numeral, otherwise invokes exception handler or returns false
    ///
    /// Remarks: This function extracts the exponent in `t`, without normalization.
    /// NaN is an invalid argument.
    ///
    /// </code>
    /// </remarks>
    [Z3Function("Z3_fpa_get_numeral_exponent_string")]
    internal IntPtr FpaGetNumeralExponentString(IntPtr c, IntPtr t, bool biased)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_exponent_string");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralExponentStringDelegate>(funcPtr);
        return func(c, t, biased);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool FpaGetNumeralExponentInt64Delegate(IntPtr c, IntPtr t, IntPtr n, bool biased);

    /// <summary>
    ///  Return the exponent value of a floating-point numeral as a signed 64-bit integer. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <param name="n" ctype="int64_t *"> exponent </param>
    /// <param name="biased" ctype="bool"> flag to indicate whether the result is in biased representation </param>
    /// <returns ctype="bool">true if <c>t</c> corresponds to a floating point numeral, otherwise invokes exception handler or returns false </returns>
    [Z3Function("Z3_fpa_get_numeral_exponent_int64")]
    internal bool FpaGetNumeralExponentInt64(IntPtr c, IntPtr t, IntPtr n, bool biased)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_exponent_int64");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralExponentInt64Delegate>(funcPtr);
        return func(c, t, n, biased);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FpaGetNumeralExponentBvDelegate(IntPtr c, IntPtr t, bool biased);

    /// <summary>
    ///  Retrieves the exponent of a floating-point literal as a bit-vector expression. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> a floating-point numeral </param>
    /// <param name="biased" ctype="bool"> flag to indicate whether the result is in biased representation </param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Remarks: This function extracts the exponent in <c>t</c> , without normalization. NaN is an invalid arguments.
    /// </remarks>
    [Z3Function("Z3_fpa_get_numeral_exponent_bv")]
    internal IntPtr FpaGetNumeralExponentBv(IntPtr c, IntPtr t, bool biased)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_exponent_bv");
        var func = Marshal.GetDelegateForFunctionPointer<FpaGetNumeralExponentBvDelegate>(funcPtr);
        return func(c, t, biased);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToIeeeBvDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Conversion of a floating-point term into a bit-vector term in IEEE 754-2008 format. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="t" ctype="Z3_ast"> term of FloatingPoint sort </param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// <c>t</c> must have FloatingPoint sort. The size of the resulting bit-vector is automatically determined. Note that IEEE 754-2008 allows multiple different representations of NaN. This conversion knows only one NaN and it will always produce the same bit-vector representation of that NaN.
    /// </remarks>
    [Z3Function("Z3_mk_fpa_to_ieee_bv")]
    internal IntPtr MkFpaToIeeeBv(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_ieee_bv");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToIeeeBvDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToFpIntRealDelegate(IntPtr c, IntPtr rm, IntPtr exp, IntPtr sig, IntPtr s);

    /// <summary>
    ///  Conversion of a real-sorted significand and an integer-sorted exponent into a term of FloatingPoint sort. 
    /// </summary>
    /// <param name="c" ctype="Z3_context"> logical context </param>
    /// <param name="rm" ctype="Z3_ast"> term of RoundingMode sort </param>
    /// <param name="exp" ctype="Z3_ast"> exponent term of Int sort </param>
    /// <param name="sig" ctype="Z3_ast"> significand term of Real sort </param>
    /// <param name="s" ctype="Z3_sort"> FloatingPoint sort </param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Produces a term that represents the conversion of <c>sig * 2^exp</c> into a floating-point term of sort <c>s</c> . If necessary, the result will be rounded according to rounding mode <c>rm</c> . <c>s</c> must be a FloatingPoint sort, <c>rm</c> must be of RoundingMode sort, <c>exp</c> must be of int sort, <c>sig</c> must be of real sort.
    /// </remarks>
    [Z3Function("Z3_mk_fpa_to_fp_int_real")]
    internal IntPtr MkFpaToFpIntReal(IntPtr c, IntPtr rm, IntPtr exp, IntPtr sig, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_int_real");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToFpIntRealDelegate>(funcPtr);
        return func(c, rm, exp, sig, s);
    }

}
