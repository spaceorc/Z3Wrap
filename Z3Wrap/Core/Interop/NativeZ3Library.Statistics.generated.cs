// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Statistics
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

#nullable enable

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr StatsToStringDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Convert a statistics into a string. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_stats_to_string")]
    internal IntPtr StatsToString(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<StatsToStringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void StatsIncRefDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Increment the reference counter of the given statistics object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    [Z3Function("Z3_stats_inc_ref")]
    internal void StatsIncRef(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<StatsIncRefDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void StatsDecRefDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Decrement the reference counter of the given statistics object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    [Z3Function("Z3_stats_dec_ref")]
    internal void StatsDecRef(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<StatsDecRefDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint StatsSizeDelegate(IntPtr c, IntPtr s);

    /// <summary>
    ///  Return the number of statistical data in <c>s</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    [Z3Function("Z3_stats_size")]
    internal uint StatsSize(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_size");
        var func = Marshal.GetDelegateForFunctionPointer<StatsSizeDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr StatsGetKeyDelegate(IntPtr c, IntPtr s, uint idx);

    /// <summary>
    ///  Return the key (a string) for a particular statistical data. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) 
    /// </remarks>
    [Z3Function("Z3_stats_get_key")]
    internal IntPtr StatsGetKey(IntPtr c, IntPtr s, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_get_key");
        var func = Marshal.GetDelegateForFunctionPointer<StatsGetKeyDelegate>(funcPtr);
        return func(c, s, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool StatsIsUintDelegate(IntPtr c, IntPtr s, uint idx);

    /// <summary>
    ///  Return <c>true</c> if the given statistical data is a unsigned integer. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) 
    /// </remarks>
    [Z3Function("Z3_stats_is_uint")]
    internal bool StatsIsUint(IntPtr c, IntPtr s, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_is_uint");
        var func = Marshal.GetDelegateForFunctionPointer<StatsIsUintDelegate>(funcPtr);
        return func(c, s, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool StatsIsDoubleDelegate(IntPtr c, IntPtr s, uint idx);

    /// <summary>
    ///  Return <c>true</c> if the given statistical data is a double. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) 
    /// </remarks>
    [Z3Function("Z3_stats_is_double")]
    internal bool StatsIsDouble(IntPtr c, IntPtr s, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_is_double");
        var func = Marshal.GetDelegateForFunctionPointer<StatsIsDoubleDelegate>(funcPtr);
        return func(c, s, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint StatsGetUintValueDelegate(IntPtr c, IntPtr s, uint idx);

    /// <summary>
    ///  Return the unsigned value of the given statistical data. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) &amp;&amp; Z3_stats_is_uint(c, s) 
    /// </remarks>
    [Z3Function("Z3_stats_get_uint_value")]
    internal uint StatsGetUintValue(IntPtr c, IntPtr s, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_get_uint_value");
        var func = Marshal.GetDelegateForFunctionPointer<StatsGetUintValueDelegate>(funcPtr);
        return func(c, s, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate double StatsGetDoubleValueDelegate(IntPtr c, IntPtr s, uint idx);

    /// <summary>
    ///  Return the double value of the given statistical data. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="double">double value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) &amp;&amp; Z3_stats_is_double(c, s) 
    /// </remarks>
    [Z3Function("Z3_stats_get_double_value")]
    internal double StatsGetDoubleValue(IntPtr c, IntPtr s, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_stats_get_double_value");
        var func = Marshal.GetDelegateForFunctionPointer<StatsGetDoubleValueDelegate>(funcPtr);
        return func(c, s, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate ulong GetEstimatedAllocSizeDelegate();

    /// <summary>
    ///  Return the estimated allocated memory in bytes. 
    /// </summary>
    /// <returns ctype="uint64_t">uint64_t value</returns>
    [Z3Function("Z3_get_estimated_alloc_size")]
    internal ulong GetEstimatedAllocSize()
    {
        var funcPtr = GetFunctionPointer("Z3_get_estimated_alloc_size");
        var func = Marshal.GetDelegateForFunctionPointer<GetEstimatedAllocSizeDelegate>(funcPtr);
        return func();
    }

}
