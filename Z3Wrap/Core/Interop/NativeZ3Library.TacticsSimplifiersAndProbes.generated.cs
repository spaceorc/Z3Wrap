// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Tactics, Simplifiers and Probes
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

#nullable enable

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkTacticDelegate(IntPtr c, IntPtr name);

    /// <summary>
    ///  Return a tactic associated with the given name. The complete list of tactics may be obtained using the procedures <see cref="GetNumTactics"/> and <see cref="GetTacticName"/> . It may also be obtained using the command <c>(help-tactic)</c> in the SMT 2.0 front-end. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="name" ctype="Z3_string">string parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    /// <remarks>
    /// Tactics are the basic building block for creating custom solvers for specific problem domains.
    /// </remarks>
    [Z3Function("Z3_mk_tactic")]
    internal IntPtr MkTactic(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_tactic");
        var func = Marshal.GetDelegateForFunctionPointer<MkTacticDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void TacticIncRefDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Increment the reference counter of the given tactic. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    [Z3Function("Z3_tactic_inc_ref")]
    internal void TacticIncRef(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<TacticIncRefDelegate>(funcPtr);
        func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void TacticDecRefDelegate(IntPtr c, IntPtr g);

    /// <summary>
    ///  Decrement the reference counter of the given tactic. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="g" ctype="Z3_tactic">tactic parameter</param>
    [Z3Function("Z3_tactic_dec_ref")]
    internal void TacticDecRef(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<TacticDecRefDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkProbeDelegate(IntPtr c, IntPtr name);

    /// <summary>
    ///  Return a probe associated with the given name. The complete list of probes may be obtained using the procedures <see cref="GetNumProbes"/> and <see cref="GetProbeName"/> . It may also be obtained using the command <c>(help-tactic)</c> in the SMT 2.0 front-end. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="name" ctype="Z3_string">string parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// Probes are used to inspect a goal (aka problem) and collect information that may be used to decide which solver and/or preprocessing step will be used.
    /// </remarks>
    [Z3Function("Z3_mk_probe")]
    internal IntPtr MkProbe(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_probe");
        var func = Marshal.GetDelegateForFunctionPointer<MkProbeDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ProbeIncRefDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Increment the reference counter of the given probe. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    [Z3Function("Z3_probe_inc_ref")]
    internal void ProbeIncRef(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeIncRefDelegate>(funcPtr);
        func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ProbeDecRefDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Decrement the reference counter of the given probe. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    [Z3Function("Z3_probe_dec_ref")]
    internal void ProbeDecRef(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeDecRefDelegate>(funcPtr);
        func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticAndThenDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    ///  Return a tactic that applies <c>t1</c> to a given goal and <c>t2</c> to every subgoal produced by <c>t1</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t1" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="t2" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_and_then")]
    internal IntPtr TacticAndThen(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_and_then");
        var func = Marshal.GetDelegateForFunctionPointer<TacticAndThenDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticOrElseDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    ///  Return a tactic that first applies <c>t1</c> to a given goal, if it fails then returns the result of <c>t2</c> applied to the given goal. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t1" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="t2" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_or_else")]
    internal IntPtr TacticOrElse(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_or_else");
        var func = Marshal.GetDelegateForFunctionPointer<TacticOrElseDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticParOrDelegate(IntPtr c, uint num, IntPtr[] ts);

    /// <summary>
    ///  Return a tactic that applies the given tactics in parallel. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="num" ctype="unsigned">unsigned parameter</param>
    /// <param name="ts" ctype="Z3_tactic const[]">tactic parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_par_or")]
    internal IntPtr TacticParOr(IntPtr c, uint num, IntPtr[] ts)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_par_or");
        var func = Marshal.GetDelegateForFunctionPointer<TacticParOrDelegate>(funcPtr);
        return func(c, num, ts);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticParAndThenDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    ///  Return a tactic that applies <c>t1</c> to a given goal and then <c>t2</c> to every subgoal produced by <c>t1</c> . The subgoals are processed in parallel. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t1" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="t2" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_par_and_then")]
    internal IntPtr TacticParAndThen(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_par_and_then");
        var func = Marshal.GetDelegateForFunctionPointer<TacticParAndThenDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticTryForDelegate(IntPtr c, IntPtr t, uint ms);

    /// <summary>
    ///  Return a tactic that applies <c>t</c> to a given goal for <c>ms</c> milliseconds. If <c>t</c> does not terminate in <c>ms</c> milliseconds, then it fails. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="ms" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_try_for")]
    internal IntPtr TacticTryFor(IntPtr c, IntPtr t, uint ms)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_try_for");
        var func = Marshal.GetDelegateForFunctionPointer<TacticTryForDelegate>(funcPtr);
        return func(c, t, ms);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticWhenDelegate(IntPtr c, IntPtr p, IntPtr t);

    /// <summary>
    ///  Return a tactic that applies <c>t</c> to a given goal is the probe <c>p</c> evaluates to true. If <c>p</c> evaluates to false, then the new tactic behaves like the skip tactic. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_when")]
    internal IntPtr TacticWhen(IntPtr c, IntPtr p, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_when");
        var func = Marshal.GetDelegateForFunctionPointer<TacticWhenDelegate>(funcPtr);
        return func(c, p, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticCondDelegate(IntPtr c, IntPtr p, IntPtr t1, IntPtr t2);

    /// <summary>
    ///  Return a tactic that applies <c>t1</c> to a given goal if the probe <c>p</c> evaluates to true, and <c>t2</c> if <c>p</c> evaluates to false. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    /// <param name="t1" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="t2" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_cond")]
    internal IntPtr TacticCond(IntPtr c, IntPtr p, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_cond");
        var func = Marshal.GetDelegateForFunctionPointer<TacticCondDelegate>(funcPtr);
        return func(c, p, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticRepeatDelegate(IntPtr c, IntPtr t, uint max);

    /// <summary>
    ///  Return a tactic that keeps applying <c>t</c> until the goal is not modified anymore or the maximum number of iterations <c>max</c> is reached. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="max" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_repeat")]
    internal IntPtr TacticRepeat(IntPtr c, IntPtr t, uint max)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_repeat");
        var func = Marshal.GetDelegateForFunctionPointer<TacticRepeatDelegate>(funcPtr);
        return func(c, t, max);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticSkipDelegate(IntPtr c);

    /// <summary>
    ///  Return a tactic that just return the given goal. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_skip")]
    internal IntPtr TacticSkip(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_skip");
        var func = Marshal.GetDelegateForFunctionPointer<TacticSkipDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticFailDelegate(IntPtr c);

    /// <summary>
    ///  Return a tactic that always fails. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_fail")]
    internal IntPtr TacticFail(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_fail");
        var func = Marshal.GetDelegateForFunctionPointer<TacticFailDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticFailIfDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Return a tactic that fails if the probe <c>p</c> evaluates to false. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_fail_if")]
    internal IntPtr TacticFailIf(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_fail_if");
        var func = Marshal.GetDelegateForFunctionPointer<TacticFailIfDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticFailIfNotDecidedDelegate(IntPtr c);

    /// <summary>
    ///  Return a tactic that fails if the goal is not trivially satisfiable (i.e., empty) or trivially unsatisfiable (i.e., contains false). 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_fail_if_not_decided")]
    internal IntPtr TacticFailIfNotDecided(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_fail_if_not_decided");
        var func = Marshal.GetDelegateForFunctionPointer<TacticFailIfNotDecidedDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticUsingParamsDelegate(IntPtr c, IntPtr t, IntPtr p);

    /// <summary>
    ///  Return a tactic that applies <c>t</c> using the given set of parameters. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <returns ctype="Z3_tactic">tactic value</returns>
    [Z3Function("Z3_tactic_using_params")]
    internal IntPtr TacticUsingParams(IntPtr c, IntPtr t, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_using_params");
        var func = Marshal.GetDelegateForFunctionPointer<TacticUsingParamsDelegate>(funcPtr);
        return func(c, t, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkSimplifierDelegate(IntPtr c, IntPtr name);

    /// <summary>
    ///  Return a simplifier associated with the given name. The complete list of simplifiers may be obtained using the procedures <see cref="GetNumSimplifiers"/> and <see cref="GetSimplifierName"/> . It may also be obtained using the command <c>(help-simplifier)</c> in the SMT 2.0 front-end. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="name" ctype="Z3_string">string parameter</param>
    /// <returns ctype="Z3_simplifier">simplifier value</returns>
    /// <remarks>
    /// Simplifiers are the basic building block for creating custom solvers for specific problem domains.
    /// </remarks>
    [Z3Function("Z3_mk_simplifier")]
    internal IntPtr MkSimplifier(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_simplifier");
        var func = Marshal.GetDelegateForFunctionPointer<MkSimplifierDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SimplifierIncRefDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Increment the reference counter of the given simplifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_simplifier">simplifier parameter</param>
    [Z3Function("Z3_simplifier_inc_ref")]
    internal void SimplifierIncRef(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierIncRefDelegate>(funcPtr);
        func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SimplifierDecRefDelegate(IntPtr c, IntPtr g);

    /// <summary>
    ///  Decrement the reference counter of the given simplifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="g" ctype="Z3_simplifier">simplifier parameter</param>
    [Z3Function("Z3_simplifier_dec_ref")]
    internal void SimplifierDecRef(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierDecRefDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SolverAddSimplifierDelegate(IntPtr c, IntPtr solver, IntPtr simplifier);

    /// <summary>
    ///  Attach simplifier to a solver. The solver will use the simplifier for incremental pre-processing. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="solver" ctype="Z3_solver">solver parameter</param>
    /// <param name="simplifier" ctype="Z3_simplifier">simplifier parameter</param>
    /// <returns ctype="Z3_solver">solver value</returns>
    [Z3Function("Z3_solver_add_simplifier")]
    internal IntPtr SolverAddSimplifier(IntPtr c, IntPtr solver, IntPtr simplifier)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_add_simplifier");
        var func = Marshal.GetDelegateForFunctionPointer<SolverAddSimplifierDelegate>(funcPtr);
        return func(c, solver, simplifier);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifierAndThenDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    ///  Return a simplifier that applies <c>t1</c> to a given goal and <c>t2</c> to every subgoal produced by <c>t1</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t1" ctype="Z3_simplifier">simplifier parameter</param>
    /// <param name="t2" ctype="Z3_simplifier">simplifier parameter</param>
    /// <returns ctype="Z3_simplifier">simplifier value</returns>
    [Z3Function("Z3_simplifier_and_then")]
    internal IntPtr SimplifierAndThen(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_and_then");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierAndThenDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifierUsingParamsDelegate(IntPtr c, IntPtr t, IntPtr p);

    /// <summary>
    ///  Return a simplifier that applies <c>t</c> using the given set of parameters. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_simplifier">simplifier parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <returns ctype="Z3_simplifier">simplifier value</returns>
    [Z3Function("Z3_simplifier_using_params")]
    internal IntPtr SimplifierUsingParams(IntPtr c, IntPtr t, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_using_params");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierUsingParamsDelegate>(funcPtr);
        return func(c, t, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetNumSimplifiersDelegate(IntPtr c);

    /// <summary>
    ///  Return the number of builtin simplifiers available in Z3. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="GetSimplifierName"/>
    [Z3Function("Z3_get_num_simplifiers")]
    internal uint GetNumSimplifiers(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_num_simplifiers");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumSimplifiersDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetSimplifierNameDelegate(IntPtr c, uint i);

    /// <summary>
    ///  Return the name of the idx simplifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_get_num_simplifiers(c) 
    /// </remarks>
    /// <seealso cref="GetNumSimplifiers"/>
    [Z3Function("Z3_get_simplifier_name")]
    internal IntPtr GetSimplifierName(IntPtr c, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_simplifier_name");
        var func = Marshal.GetDelegateForFunctionPointer<GetSimplifierNameDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifierGetHelpDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return a string containing a description of parameters accepted by the given simplifier. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_simplifier">simplifier parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_simplifier_get_help")]
    internal IntPtr SimplifierGetHelp(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierGetHelpDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifierGetParamDescrsDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the parameter description set for the given simplifier object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_simplifier">simplifier parameter</param>
    /// <returns ctype="Z3_param_descrs">param_descrs value</returns>
    [Z3Function("Z3_simplifier_get_param_descrs")]
    internal IntPtr SimplifierGetParamDescrs(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierGetParamDescrsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SimplifierGetDescrDelegate(IntPtr c, IntPtr name);

    /// <summary>
    ///  Return a string containing a description of the simplifier with the given name. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="name" ctype="Z3_string">string parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_simplifier_get_descr")]
    internal IntPtr SimplifierGetDescr(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_get_descr");
        var func = Marshal.GetDelegateForFunctionPointer<SimplifierGetDescrDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeConstDelegate(IntPtr x, double val);

    /// <summary>
    ///  Return a probe that always evaluates to val. 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="val" ctype="double">double parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    [Z3Function("Z3_probe_const")]
    internal IntPtr ProbeConst(IntPtr x, double val)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_const");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeConstDelegate>(funcPtr);
        return func(x, val);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeLtDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when the value returned by <c>p1</c> is less than the value returned by <c>p2</c> . 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_lt")]
    internal IntPtr ProbeLt(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_lt");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeLtDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeGtDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when the value returned by <c>p1</c> is greater than the value returned by <c>p2</c> . 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_gt")]
    internal IntPtr ProbeGt(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_gt");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeGtDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeLeDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when the value returned by <c>p1</c> is less than or equal to the value returned by <c>p2</c> . 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_le")]
    internal IntPtr ProbeLe(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_le");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeLeDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeGeDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when the value returned by <c>p1</c> is greater than or equal to the value returned by <c>p2</c> . 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_ge")]
    internal IntPtr ProbeGe(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_ge");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeGeDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeEqDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when the value returned by <c>p1</c> is equal to the value returned by <c>p2</c> . 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_eq")]
    internal IntPtr ProbeEq(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_eq");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeEqDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeAndDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when <c>p1</c> and <c>p2</c> evaluates to true. 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_and")]
    internal IntPtr ProbeAnd(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_and");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeAndDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeOrDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    /// <summary>
    ///  Return a probe that evaluates to "true" when <c>p1</c> or <c>p2</c> evaluates to true. 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p1" ctype="Z3_probe">probe parameter</param>
    /// <param name="p2" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_or")]
    internal IntPtr ProbeOr(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_or");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeOrDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeNotDelegate(IntPtr x, IntPtr p);

    /// <summary>
    ///  Return a probe that evaluates to "true" when <c>p</c> does not evaluate to true. 
    /// </summary>
    /// <param name="x" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    /// <returns ctype="Z3_probe">probe value</returns>
    /// <remarks>
    /// For probes, "true" is any value different from 0.0. 
    /// </remarks>
    [Z3Function("Z3_probe_not")]
    internal IntPtr ProbeNot(IntPtr x, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_not");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeNotDelegate>(funcPtr);
        return func(x, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetNumTacticsDelegate(IntPtr c);

    /// <summary>
    ///  Return the number of builtin tactics available in Z3. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="GetTacticName"/>
    [Z3Function("Z3_get_num_tactics")]
    internal uint GetNumTactics(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_num_tactics");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumTacticsDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetTacticNameDelegate(IntPtr c, uint i);

    /// <summary>
    ///  Return the name of the idx tactic. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_get_num_tactics(c) 
    /// </remarks>
    /// <seealso cref="GetNumTactics"/>
    [Z3Function("Z3_get_tactic_name")]
    internal IntPtr GetTacticName(IntPtr c, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_tactic_name");
        var func = Marshal.GetDelegateForFunctionPointer<GetTacticNameDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint GetNumProbesDelegate(IntPtr c);

    /// <summary>
    ///  Return the number of builtin probes available in Z3. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="GetProbeName"/>
    [Z3Function("Z3_get_num_probes")]
    internal uint GetNumProbes(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_num_probes");
        var func = Marshal.GetDelegateForFunctionPointer<GetNumProbesDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetProbeNameDelegate(IntPtr c, uint i);

    /// <summary>
    ///  Return the name of the <c>i</c> probe. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_get_num_probes(c) 
    /// </remarks>
    /// <seealso cref="GetNumProbes"/>
    [Z3Function("Z3_get_probe_name")]
    internal IntPtr GetProbeName(IntPtr c, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_probe_name");
        var func = Marshal.GetDelegateForFunctionPointer<GetProbeNameDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticGetHelpDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return a string containing a description of parameters accepted by the given tactic. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_tactic_get_help")]
    internal IntPtr TacticGetHelp(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<TacticGetHelpDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticGetParamDescrsDelegate(IntPtr c, IntPtr t);

    /// <summary>
    ///  Return the parameter description set for the given tactic object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <returns ctype="Z3_param_descrs">param_descrs value</returns>
    [Z3Function("Z3_tactic_get_param_descrs")]
    internal IntPtr TacticGetParamDescrs(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<TacticGetParamDescrsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticGetDescrDelegate(IntPtr c, IntPtr name);

    /// <summary>
    ///  Return a string containing a description of the tactic with the given name. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="name" ctype="Z3_string">string parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_tactic_get_descr")]
    internal IntPtr TacticGetDescr(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_get_descr");
        var func = Marshal.GetDelegateForFunctionPointer<TacticGetDescrDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ProbeGetDescrDelegate(IntPtr c, IntPtr name);

    /// <summary>
    ///  Return a string containing a description of the probe with the given name. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="name" ctype="Z3_string">string parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_probe_get_descr")]
    internal IntPtr ProbeGetDescr(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_get_descr");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeGetDescrDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate double ProbeApplyDelegate(IntPtr c, IntPtr p, IntPtr g);

    /// <summary>
    ///  Execute the probe over the goal. The probe always produce a double value. "Boolean" probes return 0.0 for false, and a value different from 0.0 for true. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_probe">probe parameter</param>
    /// <param name="g" ctype="Z3_goal">goal parameter</param>
    /// <returns ctype="double">double value</returns>
    [Z3Function("Z3_probe_apply")]
    internal double ProbeApply(IntPtr c, IntPtr p, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_apply");
        var func = Marshal.GetDelegateForFunctionPointer<ProbeApplyDelegate>(funcPtr);
        return func(c, p, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticApplyDelegate(IntPtr c, IntPtr t, IntPtr g);

    /// <summary>
    ///  Apply tactic <c>t</c> to the goal <c>g</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="g" ctype="Z3_goal">goal parameter</param>
    /// <returns ctype="Z3_apply_result">apply_result value</returns>
    /// <seealso cref="TacticApplyEx"/>
    [Z3Function("Z3_tactic_apply")]
    internal IntPtr TacticApply(IntPtr c, IntPtr t, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_apply");
        var func = Marshal.GetDelegateForFunctionPointer<TacticApplyDelegate>(funcPtr);
        return func(c, t, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TacticApplyExDelegate(IntPtr c, IntPtr t, IntPtr g, IntPtr p);

    /// <summary>
    ///  Apply tactic <c>t</c> to the goal <c>g</c> using the parameter set <c>p</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="t" ctype="Z3_tactic">tactic parameter</param>
    /// <param name="g" ctype="Z3_goal">goal parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <returns ctype="Z3_apply_result">apply_result value</returns>
    /// <seealso cref="TacticApply"/>
    [Z3Function("Z3_tactic_apply_ex")]
    internal IntPtr TacticApplyEx(IntPtr c, IntPtr t, IntPtr g, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_apply_ex");
        var func = Marshal.GetDelegateForFunctionPointer<TacticApplyExDelegate>(funcPtr);
        return func(c, t, g, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ApplyResultIncRefDelegate(IntPtr c, IntPtr r);

    /// <summary>
    ///  Increment the reference counter of the given <c>Z3_apply_result</c> object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="r" ctype="Z3_apply_result">apply_result parameter</param>
    [Z3Function("Z3_apply_result_inc_ref")]
    internal void ApplyResultIncRef(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ApplyResultIncRefDelegate>(funcPtr);
        func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ApplyResultDecRefDelegate(IntPtr c, IntPtr r);

    /// <summary>
    ///  Decrement the reference counter of the given <c>Z3_apply_result</c> object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="r" ctype="Z3_apply_result">apply_result parameter</param>
    [Z3Function("Z3_apply_result_dec_ref")]
    internal void ApplyResultDecRef(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ApplyResultDecRefDelegate>(funcPtr);
        func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ApplyResultToStringDelegate(IntPtr c, IntPtr r);

    /// <summary>
    ///  Convert the <c>Z3_apply_result</c> object returned by <see cref="TacticApply"/> into a string. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="r" ctype="Z3_apply_result">apply_result parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_apply_result_to_string")]
    internal IntPtr ApplyResultToString(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<ApplyResultToStringDelegate>(funcPtr);
        return func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint ApplyResultGetNumSubgoalsDelegate(IntPtr c, IntPtr r);

    /// <summary>
    ///  Return the number of subgoals in the <c>Z3_apply_result</c> object returned by <see cref="TacticApply"/> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="r" ctype="Z3_apply_result">apply_result parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <seealso cref="ApplyResultGetSubgoal"/>
    [Z3Function("Z3_apply_result_get_num_subgoals")]
    internal uint ApplyResultGetNumSubgoals(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_get_num_subgoals");
        var func = Marshal.GetDelegateForFunctionPointer<ApplyResultGetNumSubgoalsDelegate>(funcPtr);
        return func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ApplyResultGetSubgoalDelegate(IntPtr c, IntPtr r, uint i);

    /// <summary>
    ///  Return one of the subgoals in the <c>Z3_apply_result</c> object returned by <see cref="TacticApply"/> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="r" ctype="Z3_apply_result">apply_result parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_goal">goal value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_apply_result_get_num_subgoals(c, r) 
    /// </remarks>
    /// <seealso cref="ApplyResultGetNumSubgoals"/>
    [Z3Function("Z3_apply_result_get_subgoal")]
    internal IntPtr ApplyResultGetSubgoal(IntPtr c, IntPtr r, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_get_subgoal");
        var func = Marshal.GetDelegateForFunctionPointer<ApplyResultGetSubgoalDelegate>(funcPtr);
        return func(c, r, i);
    }

}
