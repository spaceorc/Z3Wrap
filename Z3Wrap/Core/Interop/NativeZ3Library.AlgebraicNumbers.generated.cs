// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_algebraic.h / Algebraic Numbers
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicIsValueDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return true if a can be used as value in the Z3 real algebraic
    /// number package.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    [Z3Function("Z3_algebraic_is_value")]
    internal bool AlgebraicIsValue(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_value");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicIsValueDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicIsPosDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return true if a is positive, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_is_pos")]
    internal bool AlgebraicIsPos(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_pos");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicIsPosDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicIsNegDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return true if a is negative, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_is_neg")]
    internal bool AlgebraicIsNeg(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_neg");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicIsNegDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicIsZeroDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return true if a is zero, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_is_zero")]
    internal bool AlgebraicIsZero(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_zero");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicIsZeroDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int AlgebraicSignDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return 1 if a is positive, 0 if a is zero, and -1 if a is negative.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_sign")]
    internal int AlgebraicSign(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_sign");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicSignDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicAddDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return the value a + b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_add")]
    internal IntPtr AlgebraicAdd(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_add");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicAddDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicSubDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return the value a - b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_sub")]
    internal IntPtr AlgebraicSub(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_sub");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicSubDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicMulDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return the value a * b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_mul")]
    internal IntPtr AlgebraicMul(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_mul");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicMulDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicDivDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return the value a / b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// Precondition: !Z3_algebraic_is_zero(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_div")]
    internal IntPtr AlgebraicDiv(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_div");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicDivDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicRootDelegate(IntPtr c, IntPtr a, uint k);

    /// <summary>
    /// Return the a^(1/k)
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="k" ctype="unsigned">unsigned parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: k is even =&gt; !Z3_algebraic_is_neg(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_root")]
    internal IntPtr AlgebraicRoot(IntPtr c, IntPtr a, uint k)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_root");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicRootDelegate>(funcPtr);
        return func(c, a, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicPowerDelegate(IntPtr c, IntPtr a, uint k);

    /// <summary>
    /// Return the a^k
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="k" ctype="unsigned">unsigned parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_power")]
    internal IntPtr AlgebraicPower(IntPtr c, IntPtr a, uint k)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_power");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicPowerDelegate>(funcPtr);
        return func(c, a, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicLtDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return true if a &lt; b, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_lt")]
    internal bool AlgebraicLt(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_lt");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicLtDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicGtDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return true if a &gt; b, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_gt")]
    internal bool AlgebraicGt(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_gt");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicGtDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicLeDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return true if a &lt;= b, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_le")]
    internal bool AlgebraicLe(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_le");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicLeDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicGeDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return true if a &gt;= b, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_ge")]
    internal bool AlgebraicGe(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_ge");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicGeDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicEqDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return true if a == b, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_eq")]
    internal bool AlgebraicEq(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_eq");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicEqDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AlgebraicNeqDelegate(IntPtr c, IntPtr a, IntPtr b);

    /// <summary>
    /// Return true if a != b, and false otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    [Z3Function("Z3_algebraic_neq")]
    internal bool AlgebraicNeq(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_neq");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicNeqDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicRootsDelegate(IntPtr c, IntPtr p, uint n, IntPtr[] a);

    /// <summary>
    /// Given a multivariate polynomial p(x_0, ..., x_{n-1}, x_n), returns the
    /// roots of the univariate polynomial p(a[0], ..., a[n-1], x_n).
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_ast">ast parameter</param>
    /// <param name="n" ctype="unsigned">unsigned parameter</param>
    /// <param name="a" ctype="Z3_ast[]">ast parameter</param>
    /// <remarks>
    /// Precondition: p is a Z3 expression that contains only arithmetic terms and free variables.
    /// Precondition: forall i in [0, n) Z3_algebraic_is_value(c, a[i])
    /// </remarks>
    [Z3Function("Z3_algebraic_roots")]
    internal IntPtr AlgebraicRoots(IntPtr c, IntPtr p, uint n, IntPtr[] a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_roots");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicRootsDelegate>(funcPtr);
        return func(c, p, n, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int AlgebraicEvalDelegate(IntPtr c, IntPtr p, uint n, IntPtr[] a);

    /// <summary>
    /// Given a multivariate polynomial p(x_0, ..., x_{n-1}), return the
    /// sign of p(a[0], ..., a[n-1]).
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_ast">ast parameter</param>
    /// <param name="n" ctype="unsigned">unsigned parameter</param>
    /// <param name="a" ctype="Z3_ast[]">ast parameter</param>
    /// <remarks>
    /// Precondition: p is a Z3 expression that contains only arithmetic terms and free variables.
    /// Precondition: forall i in [0, n) Z3_algebraic_is_value(c, a[i])
    /// </remarks>
    [Z3Function("Z3_algebraic_eval")]
    internal int AlgebraicEval(IntPtr c, IntPtr p, uint n, IntPtr[] a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_eval");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicEvalDelegate>(funcPtr);
        return func(c, p, n, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AlgebraicGetPolyDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return the coefficients of the defining polynomial.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_get_poly")]
    internal IntPtr AlgebraicGetPoly(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_get_poly");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicGetPolyDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint AlgebraicGetIDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Return which root of the polynomial the algebraic number represents.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    [Z3Function("Z3_algebraic_get_i")]
    internal uint AlgebraicGetI(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_get_i");
        var func = Marshal.GetDelegateForFunctionPointer<AlgebraicGetIDelegate>(funcPtr);
        return func(c, a);
    }

}
