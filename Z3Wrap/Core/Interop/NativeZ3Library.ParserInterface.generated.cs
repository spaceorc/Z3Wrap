// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Parser interface
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ParseSmtlib2StringDelegate(IntPtr c, IntPtr str, uint numSorts, IntPtr[] sortNames, IntPtr[] sorts, uint numDecls, IntPtr[] declNames, IntPtr[] decls);

    /// <summary>
    ///  Parse the given string using the SMT-LIB2 parser. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="str" ctype="Z3_string">string parameter</param>
    /// <param name="numSorts" ctype="unsigned">unsigned parameter</param>
    /// <param name="sortNames" ctype="Z3_symbol const[]">symbol parameter</param>
    /// <param name="sorts" ctype="Z3_sort const[]">sort parameter</param>
    /// <param name="numDecls" ctype="unsigned">unsigned parameter</param>
    /// <param name="declNames" ctype="Z3_symbol const[]">symbol parameter</param>
    /// <param name="decls" ctype="Z3_func_decl const[]">func_decl parameter</param>
    /// <remarks>
    /// It returns a formula comprising of the conjunction of assertions in the scope (up to push/pop) at the end of the string.
    /// </remarks>
    [Z3Function("Z3_parse_smtlib2_string")]
    internal IntPtr ParseSmtlib2String(IntPtr c, IntPtr str, uint numSorts, IntPtr[] sortNames, IntPtr[] sorts, uint numDecls, IntPtr[] declNames, IntPtr[] decls)
    {
        var funcPtr = GetFunctionPointer("Z3_parse_smtlib2_string");
        var func = Marshal.GetDelegateForFunctionPointer<ParseSmtlib2StringDelegate>(funcPtr);
        return func(c, str, numSorts, sortNames, sorts, numDecls, declNames, decls);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ParseSmtlib2FileDelegate(IntPtr c, IntPtr fileName, uint numSorts, IntPtr[] sortNames, IntPtr[] sorts, uint numDecls, IntPtr[] declNames, IntPtr[] decls);

    /// <summary>
    ///  Similar to <see cref="ParseSmtlib2String"/> , but reads the benchmark from a file. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="fileName" ctype="Z3_string">string parameter</param>
    /// <param name="numSorts" ctype="unsigned">unsigned parameter</param>
    /// <param name="sortNames" ctype="Z3_symbol const[]">symbol parameter</param>
    /// <param name="sorts" ctype="Z3_sort const[]">sort parameter</param>
    /// <param name="numDecls" ctype="unsigned">unsigned parameter</param>
    /// <param name="declNames" ctype="Z3_symbol const[]">symbol parameter</param>
    /// <param name="decls" ctype="Z3_func_decl const[]">func_decl parameter</param>
    [Z3Function("Z3_parse_smtlib2_file")]
    internal IntPtr ParseSmtlib2File(IntPtr c, IntPtr fileName, uint numSorts, IntPtr[] sortNames, IntPtr[] sorts, uint numDecls, IntPtr[] declNames, IntPtr[] decls)
    {
        var funcPtr = GetFunctionPointer("Z3_parse_smtlib2_file");
        var func = Marshal.GetDelegateForFunctionPointer<ParseSmtlib2FileDelegate>(funcPtr);
        return func(c, fileName, numSorts, sortNames, sorts, numDecls, declNames, decls);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr EvalSmtlib2StringDelegate(IntPtr c, IntPtr str);

    /// <summary>
    ///  Parse and evaluate and SMT-LIB2 command sequence. The state from a previous call is saved so the next evaluation builds on top of the previous call. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="str" ctype="Z3_string">string parameter</param>
    /// <returns>output generated from processing commands. </returns>
    [Z3Function("Z3_eval_smtlib2_string")]
    internal IntPtr EvalSmtlib2String(IntPtr c, IntPtr str)
    {
        var funcPtr = GetFunctionPointer("Z3_eval_smtlib2_string");
        var func = Marshal.GetDelegateForFunctionPointer<EvalSmtlib2StringDelegate>(funcPtr);
        return func(c, str);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkParserContextDelegate(IntPtr c);

    /// <summary>
    ///  Create a parser context. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <remarks>
    /// A parser context maintains state between calls to <c>Z3_parser_context_parse_string</c> where the caller can pass in a set of SMTLIB2 commands. It maintains all the declarations from previous calls together with of sorts and function declarations (including 0-ary) that are added directly to the context.
    /// </remarks>
    [Z3Function("Z3_mk_parser_context")]
    internal IntPtr MkParserContext(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_parser_context");
        var func = Marshal.GetDelegateForFunctionPointer<MkParserContextDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParserContextIncRefDelegate(IntPtr c, IntPtr pc);

    /// <summary>
    ///  Increment the reference counter of the given <c>Z3_parser_context</c> object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="pc" ctype="Z3_parser_context">parser_context parameter</param>
    [Z3Function("Z3_parser_context_inc_ref")]
    internal void ParserContextIncRef(IntPtr c, IntPtr pc)
    {
        var funcPtr = GetFunctionPointer("Z3_parser_context_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ParserContextIncRefDelegate>(funcPtr);
        func(c, pc);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParserContextDecRefDelegate(IntPtr c, IntPtr pc);

    /// <summary>
    ///  Decrement the reference counter of the given <c>Z3_parser_context</c> object. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="pc" ctype="Z3_parser_context">parser_context parameter</param>
    [Z3Function("Z3_parser_context_dec_ref")]
    internal void ParserContextDecRef(IntPtr c, IntPtr pc)
    {
        var funcPtr = GetFunctionPointer("Z3_parser_context_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ParserContextDecRefDelegate>(funcPtr);
        func(c, pc);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParserContextAddSortDelegate(IntPtr c, IntPtr pc, IntPtr s);

    /// <summary>
    ///  Add a sort declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="pc" ctype="Z3_parser_context">parser_context parameter</param>
    /// <param name="s" ctype="Z3_sort">sort parameter</param>
    [Z3Function("Z3_parser_context_add_sort")]
    internal void ParserContextAddSort(IntPtr c, IntPtr pc, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_parser_context_add_sort");
        var func = Marshal.GetDelegateForFunctionPointer<ParserContextAddSortDelegate>(funcPtr);
        func(c, pc, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParserContextAddDeclDelegate(IntPtr c, IntPtr pc, IntPtr f);

    /// <summary>
    ///  Add a function declaration. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="pc" ctype="Z3_parser_context">parser_context parameter</param>
    /// <param name="f" ctype="Z3_func_decl">func_decl parameter</param>
    [Z3Function("Z3_parser_context_add_decl")]
    internal void ParserContextAddDecl(IntPtr c, IntPtr pc, IntPtr f)
    {
        var funcPtr = GetFunctionPointer("Z3_parser_context_add_decl");
        var func = Marshal.GetDelegateForFunctionPointer<ParserContextAddDeclDelegate>(funcPtr);
        func(c, pc, f);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ParserContextFromStringDelegate(IntPtr c, IntPtr pc, IntPtr s);

    /// <summary>
    ///  Parse a string of SMTLIB2 commands. Return assertions. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="pc" ctype="Z3_parser_context">parser_context parameter</param>
    /// <param name="s" ctype="Z3_string">string parameter</param>
    [Z3Function("Z3_parser_context_from_string")]
    internal IntPtr ParserContextFromString(IntPtr c, IntPtr pc, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_parser_context_from_string");
        var func = Marshal.GetDelegateForFunctionPointer<ParserContextFromStringDelegate>(funcPtr);
        return func(c, pc, s);
    }

}
