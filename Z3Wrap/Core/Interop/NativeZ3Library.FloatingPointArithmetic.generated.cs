// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_fpa.h / Floating-Point Arithmetic
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundingModeSortDelegate(IntPtr c);

    /// <summary>
    /// Create the RoundingMode sort.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundNearestTiesToAway"/>
    /// <seealso cref="MkFpaRoundNearestTiesToEven"/>
    /// <seealso cref="MkFpaRoundTowardNegative"/>
    /// <seealso cref="MkFpaRoundTowardPositive"/>
    /// <seealso cref="MkFpaRoundTowardZero"/>
    [Z3Function("Z3_mk_fpa_rounding_mode_sort")]
    internal IntPtr MkFpaRoundingModeSort(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rounding_mode_sort");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundingModeSortDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundNearestTiesToEvenDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the NearestTiesToEven rounding mode. This is the same
    /// as Z3_mk_fpa_rne.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRoundNearestTiesToAway"/>
    /// <seealso cref="MkFpaRoundTowardNegative"/>
    /// <seealso cref="MkFpaRoundTowardPositive"/>
    /// <seealso cref="MkFpaRoundTowardZero"/>
    [Z3Function("Z3_mk_fpa_round_nearest_ties_to_even")]
    internal IntPtr MkFpaRoundNearestTiesToEven(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_nearest_ties_to_even");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundNearestTiesToEvenDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRneDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the NearestTiesToEven rounding mode. This is the same
    /// as Z3_mk_fpa_round_nearest_ties_to_even.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRna"/>
    /// <seealso cref="MkFpaRtn"/>
    /// <seealso cref="MkFpaRtp"/>
    /// <seealso cref="MkFpaRtz"/>
    [Z3Function("Z3_mk_fpa_rne")]
    internal IntPtr MkFpaRne(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rne");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRneDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundNearestTiesToAwayDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the NearestTiesToAway rounding mode. This is the same
    /// as Z3_mk_fpa_rna.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRoundNearestTiesToEven"/>
    /// <seealso cref="MkFpaRoundTowardNegative"/>
    /// <seealso cref="MkFpaRoundTowardPositive"/>
    /// <seealso cref="MkFpaRoundTowardZero"/>
    [Z3Function("Z3_mk_fpa_round_nearest_ties_to_away")]
    internal IntPtr MkFpaRoundNearestTiesToAway(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_nearest_ties_to_away");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundNearestTiesToAwayDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRnaDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the NearestTiesToAway rounding mode. This is the same
    /// as Z3_mk_fpa_round_nearest_ties_to_away.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRne"/>
    /// <seealso cref="MkFpaRtn"/>
    /// <seealso cref="MkFpaRtp"/>
    /// <seealso cref="MkFpaRtz"/>
    [Z3Function("Z3_mk_fpa_rna")]
    internal IntPtr MkFpaRna(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rna");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRnaDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundTowardPositiveDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the TowardPositive rounding mode. This is the same as
    /// Z3_mk_fpa_rtp.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRoundNearestTiesToAway"/>
    /// <seealso cref="MkFpaRoundNearestTiesToEven"/>
    /// <seealso cref="MkFpaRoundTowardNegative"/>
    /// <seealso cref="MkFpaRoundTowardZero"/>
    [Z3Function("Z3_mk_fpa_round_toward_positive")]
    internal IntPtr MkFpaRoundTowardPositive(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_toward_positive");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundTowardPositiveDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRtpDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the TowardPositive rounding mode. This is the same as
    /// Z3_mk_fpa_round_toward_positive.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRna"/>
    /// <seealso cref="MkFpaRne"/>
    /// <seealso cref="MkFpaRtn"/>
    /// <seealso cref="MkFpaRtz"/>
    [Z3Function("Z3_mk_fpa_rtp")]
    internal IntPtr MkFpaRtp(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rtp");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRtpDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundTowardNegativeDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the TowardNegative rounding mode. This is the same as
    /// Z3_mk_fpa_rtn.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRoundNearestTiesToAway"/>
    /// <seealso cref="MkFpaRoundNearestTiesToEven"/>
    /// <seealso cref="MkFpaRoundTowardPositive"/>
    /// <seealso cref="MkFpaRoundTowardZero"/>
    [Z3Function("Z3_mk_fpa_round_toward_negative")]
    internal IntPtr MkFpaRoundTowardNegative(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_toward_negative");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundTowardNegativeDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRtnDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the TowardNegative rounding mode. This is the same as
    /// Z3_mk_fpa_round_toward_negative.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRna"/>
    /// <seealso cref="MkFpaRne"/>
    /// <seealso cref="MkFpaRtp"/>
    /// <seealso cref="MkFpaRtz"/>
    [Z3Function("Z3_mk_fpa_rtn")]
    internal IntPtr MkFpaRtn(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rtn");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRtnDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundTowardZeroDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the TowardZero rounding mode. This is the same as
    /// Z3_mk_fpa_rtz.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRoundNearestTiesToAway"/>
    /// <seealso cref="MkFpaRoundNearestTiesToEven"/>
    /// <seealso cref="MkFpaRoundTowardNegative"/>
    /// <seealso cref="MkFpaRoundTowardPositive"/>
    [Z3Function("Z3_mk_fpa_round_toward_zero")]
    internal IntPtr MkFpaRoundTowardZero(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_toward_zero");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundTowardZeroDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRtzDelegate(IntPtr c);

    /// <summary>
    /// Create a numeral of RoundingMode sort which represents the TowardZero rounding mode. This is the same as
    /// Z3_mk_fpa_round_toward_zero.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaRoundingModeSort"/>
    /// <seealso cref="MkFpaRna"/>
    /// <seealso cref="MkFpaRne"/>
    /// <seealso cref="MkFpaRtn"/>
    /// <seealso cref="MkFpaRtp"/>
    [Z3Function("Z3_mk_fpa_rtz")]
    internal IntPtr MkFpaRtz(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rtz");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRtzDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSortDelegate(IntPtr c, uint ebits, uint sbits);

    /// <summary>
    /// Create a FloatingPoint sort.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="ebits">number of exponent bits</param>
    /// <param name="sbits">number of significand bits</param>
    /// <remarks>
    /// ebits must be larger than 1 and sbits must be larger than 2.
    /// </remarks>
    /// <seealso cref="MkFpaSortHalf"/>
    /// <seealso cref="MkFpaSortSingle"/>
    /// <seealso cref="MkFpaSortDouble"/>
    /// <seealso cref="MkFpaSortQuadruple"/>
    [Z3Function("Z3_mk_fpa_sort")]
    internal IntPtr MkFpaSort(IntPtr c, uint ebits, uint sbits)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSortDelegate>(funcPtr);
        return func(c, ebits, sbits);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSortHalfDelegate(IntPtr c);

    /// <summary>
    /// Create the half-precision (16-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_16.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSortSingle"/>
    /// <seealso cref="MkFpaSortDouble"/>
    /// <seealso cref="MkFpaSortQuadruple"/>
    [Z3Function("Z3_mk_fpa_sort_half")]
    internal IntPtr MkFpaSortHalf(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_half");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSortHalfDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSort16Delegate(IntPtr c);

    /// <summary>
    /// Create the half-precision (16-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_half.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSort32"/>
    /// <seealso cref="MkFpaSort64"/>
    /// <seealso cref="MkFpaSort128"/>
    [Z3Function("Z3_mk_fpa_sort_16")]
    internal IntPtr MkFpaSort16(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_16");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSort16Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSortSingleDelegate(IntPtr c);

    /// <summary>
    /// Create the single-precision (32-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_32.
    /// </summary>
    /// <param name="c">logical context.</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSortHalf"/>
    /// <seealso cref="MkFpaSortDouble"/>
    /// <seealso cref="MkFpaSortQuadruple"/>
    [Z3Function("Z3_mk_fpa_sort_single")]
    internal IntPtr MkFpaSortSingle(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_single");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSortSingleDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSort32Delegate(IntPtr c);

    /// <summary>
    /// Create the single-precision (32-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_single.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSort16"/>
    /// <seealso cref="MkFpaSort64"/>
    /// <seealso cref="MkFpaSort128"/>
    [Z3Function("Z3_mk_fpa_sort_32")]
    internal IntPtr MkFpaSort32(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_32");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSort32Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSortDoubleDelegate(IntPtr c);

    /// <summary>
    /// Create the double-precision (64-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_64.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSortHalf"/>
    /// <seealso cref="MkFpaSortSingle"/>
    /// <seealso cref="MkFpaSortQuadruple"/>
    [Z3Function("Z3_mk_fpa_sort_double")]
    internal IntPtr MkFpaSortDouble(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_double");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSortDoubleDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSort64Delegate(IntPtr c);

    /// <summary>
    /// Create the double-precision (64-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_double.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSort16"/>
    /// <seealso cref="MkFpaSort32"/>
    /// <seealso cref="MkFpaSort128"/>
    [Z3Function("Z3_mk_fpa_sort_64")]
    internal IntPtr MkFpaSort64(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_64");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSort64Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSortQuadrupleDelegate(IntPtr c);

    /// <summary>
    /// Create the quadruple-precision (128-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_128.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSortHalf"/>
    /// <seealso cref="MkFpaSortSingle"/>
    /// <seealso cref="MkFpaSortDouble"/>
    [Z3Function("Z3_mk_fpa_sort_quadruple")]
    internal IntPtr MkFpaSortQuadruple(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_quadruple");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSortQuadrupleDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSort128Delegate(IntPtr c);

    /// <summary>
    /// Create the quadruple-precision (128-bit) FloatingPoint sort. This is the same as Z3_mk_fpa_sort_quadruple.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <seealso cref="MkFpaSort"/>
    /// <seealso cref="MkFpaSort16"/>
    /// <seealso cref="MkFpaSort32"/>
    /// <seealso cref="MkFpaSort64"/>
    [Z3Function("Z3_mk_fpa_sort_128")]
    internal IntPtr MkFpaSort128(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_128");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSort128Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNanDelegate(IntPtr c, IntPtr s);

    /// <summary>
    /// Create a floating-point NaN of sort s.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="s">target sort</param>
    /// <seealso cref="MkFpaInf"/>
    /// <seealso cref="MkFpaIsNan"/>
    /// <seealso cref="MkFpaZero"/>
    [Z3Function("Z3_mk_fpa_nan")]
    internal IntPtr MkFpaNan(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_nan");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNanDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaInfDelegate(IntPtr c, IntPtr s, bool negative);

    /// <summary>
    /// Create a floating-point infinity of sort s.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="s">target sort</param>
    /// <param name="negative">
    /// indicates whether the result should be negative When negative is true, -oo will be generated instead of +oo.
    /// </param>
    /// <seealso cref="MkFpaIsInfinite"/>
    /// <seealso cref="MkFpaNan"/>
    /// <seealso cref="MkFpaZero"/>
    [Z3Function("Z3_mk_fpa_inf")]
    internal IntPtr MkFpaInf(IntPtr c, IntPtr s, bool negative)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_inf");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaInfDelegate>(funcPtr);
        return func(c, s, negative);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaZeroDelegate(IntPtr c, IntPtr s, bool negative);

    /// <summary>
    /// Create a floating-point zero of sort s.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="s">target sort</param>
    /// <param name="negative">
    /// indicates whether the result should be negative When negative is true, -zero will be generated instead of
    /// +zero.
    /// </param>
    /// <seealso cref="MkFpaInf"/>
    /// <seealso cref="MkFpaIsZero"/>
    /// <seealso cref="MkFpaNan"/>
    [Z3Function("Z3_mk_fpa_zero")]
    internal IntPtr MkFpaZero(IntPtr c, IntPtr s, bool negative)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_zero");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaZeroDelegate>(funcPtr);
        return func(c, s, negative);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaFpDelegate(IntPtr c, IntPtr sgn, IntPtr exp, IntPtr sig);

    /// <summary>
    /// Create an expression of FloatingPoint sort from three bit-vector expressions. This is the operator named `fp'
    /// in the SMT FP theory definition. Note that sgn is required to be a bit-vector of size 1. Significand and
    /// exponent are required to be longer than 1 and 2 respectively. The FloatingPoint sort of the resulting
    /// expression is automatically determined from the bit-vector sizes of the arguments. The exponent is assumed to
    /// be in IEEE-754 biased representation.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="sgn">sign</param>
    /// <param name="exp">exponent</param>
    /// <param name="sig">significand</param>
    /// <seealso cref="MkFpaNumeralDouble"/>
    /// <seealso cref="MkFpaNumeralFloat"/>
    /// <seealso cref="MkFpaNumeralInt"/>
    /// <seealso cref="MkFpaNumeralIntUint"/>
    /// <seealso cref="MkFpaNumeralInt64Uint64"/>
    /// <seealso cref="MkNumeral"/>
    [Z3Function("Z3_mk_fpa_fp")]
    internal IntPtr MkFpaFp(IntPtr c, IntPtr sgn, IntPtr exp, IntPtr sig)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_fp");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaFpDelegate>(funcPtr);
        return func(c, sgn, exp, sig);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNumeralFloatDelegate(IntPtr c, float v, IntPtr ty);

    /// <summary>
    /// Create a numeral of FloatingPoint sort from a float. This function is used to create numerals that fit in a
    /// float value. It is slightly faster than Z3_mk_numeral since it is not necessary to parse a string.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="v">value</param>
    /// <param name="ty">sort ty must be a FloatingPoint sort</param>
    /// <seealso cref="MkFpaFp"/>
    /// <seealso cref="MkFpaNumeralDouble"/>
    /// <seealso cref="MkFpaNumeralInt"/>
    /// <seealso cref="MkFpaNumeralIntUint"/>
    /// <seealso cref="MkFpaNumeralInt64Uint64"/>
    /// <seealso cref="MkNumeral"/>
    [Z3Function("Z3_mk_fpa_numeral_float")]
    internal IntPtr MkFpaNumeralFloat(IntPtr c, float v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_float");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNumeralFloatDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNumeralDoubleDelegate(IntPtr c, double v, IntPtr ty);

    /// <summary>
    /// Create a numeral of FloatingPoint sort from a double. This function is used to create numerals that fit in a
    /// double value. It is slightly faster than Z3_mk_numeral since it is not necessary to parse a string.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="v">value</param>
    /// <param name="ty">sort ty must be a FloatingPoint sort</param>
    /// <seealso cref="MkFpaFp"/>
    /// <seealso cref="MkFpaNumeralFloat"/>
    /// <seealso cref="MkFpaNumeralInt"/>
    /// <seealso cref="MkFpaNumeralIntUint"/>
    /// <seealso cref="MkFpaNumeralInt64Uint64"/>
    /// <seealso cref="MkNumeral"/>
    [Z3Function("Z3_mk_fpa_numeral_double")]
    internal IntPtr MkFpaNumeralDouble(IntPtr c, double v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_double");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNumeralDoubleDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNumeralIntDelegate(IntPtr c, int v, IntPtr ty);

    /// <summary>
    /// Create a numeral of FloatingPoint sort from a signed integer.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="v">value</param>
    /// <param name="ty">result sort ty must be a FloatingPoint sort</param>
    /// <seealso cref="MkFpaFp"/>
    /// <seealso cref="MkFpaNumeralDouble"/>
    /// <seealso cref="MkFpaNumeralFloat"/>
    /// <seealso cref="MkFpaNumeralIntUint"/>
    /// <seealso cref="MkFpaNumeralInt64Uint64"/>
    /// <seealso cref="MkNumeral"/>
    [Z3Function("Z3_mk_fpa_numeral_int")]
    internal IntPtr MkFpaNumeralInt(IntPtr c, int v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_int");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNumeralIntDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNumeralIntUintDelegate(IntPtr c, bool sgn, int exp, uint sig, IntPtr ty);

    /// <summary>
    /// Create a numeral of FloatingPoint sort from a sign bit and two integers.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="sgn">sign bit (true == negative)</param>
    /// <param name="exp">exponent</param>
    /// <param name="sig">significand</param>
    /// <param name="ty">result sort ty must be a FloatingPoint sort</param>
    /// <seealso cref="MkFpaFp"/>
    /// <seealso cref="MkFpaNumeralDouble"/>
    /// <seealso cref="MkFpaNumeralFloat"/>
    /// <seealso cref="MkFpaNumeralInt"/>
    /// <seealso cref="MkFpaNumeralInt64Uint64"/>
    /// <seealso cref="MkNumeral"/>
    [Z3Function("Z3_mk_fpa_numeral_int_uint")]
    internal IntPtr MkFpaNumeralIntUint(IntPtr c, bool sgn, int exp, uint sig, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_int_uint");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNumeralIntUintDelegate>(funcPtr);
        return func(c, sgn, exp, sig, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNumeralInt64Uint64Delegate(IntPtr c, bool sgn, long exp, ulong sig, IntPtr ty);

    /// <summary>
    /// Create a numeral of FloatingPoint sort from a sign bit and two 64-bit integers.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="sgn">sign bit (true == negative)</param>
    /// <param name="exp">exponent</param>
    /// <param name="sig">significand</param>
    /// <param name="ty">result sort ty must be a FloatingPoint sort</param>
    /// <seealso cref="MkFpaFp"/>
    /// <seealso cref="MkFpaNumeralDouble"/>
    /// <seealso cref="MkFpaNumeralFloat"/>
    /// <seealso cref="MkFpaNumeralInt"/>
    /// <seealso cref="MkFpaNumeralIntUint"/>
    /// <seealso cref="MkNumeral"/>
    [Z3Function("Z3_mk_fpa_numeral_int64_uint64")]
    internal IntPtr MkFpaNumeralInt64Uint64(IntPtr c, bool sgn, long exp, ulong sig, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_int64_uint64");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNumeralInt64Uint64Delegate>(funcPtr);
        return func(c, sgn, exp, sig, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaAbsDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Floating-point absolute value
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort</param>
    /// <seealso cref="MkFpaIsNegative"/>
    /// <seealso cref="MkFpaIsPositive"/>
    /// <seealso cref="MkFpaNeg"/>
    [Z3Function("Z3_mk_fpa_abs")]
    internal IntPtr MkFpaAbs(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_abs");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaAbsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaNegDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Floating-point negation
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort</param>
    /// <seealso cref="MkFpaAbs"/>
    /// <seealso cref="MkFpaIsNegative"/>
    /// <seealso cref="MkFpaIsPositive"/>
    [Z3Function("Z3_mk_fpa_neg")]
    internal IntPtr MkFpaNeg(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_neg");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaNegDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaAddDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point addition
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">
    /// term of FloatingPoint sort rm must be of RoundingMode sort, t1 and t2 must have the same FloatingPoint sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_add")]
    internal IntPtr MkFpaAdd(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_add");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaAddDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSubDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point subtraction
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">
    /// term of FloatingPoint sort rm must be of RoundingMode sort, t1 and t2 must have the same FloatingPoint sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_sub")]
    internal IntPtr MkFpaSub(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sub");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSubDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaMulDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point multiplication
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">
    /// term of FloatingPoint sort rm must be of RoundingMode sort, t1 and t2 must have the same FloatingPoint sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_mul")]
    internal IntPtr MkFpaMul(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_mul");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaMulDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaDivDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point division
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t1">term of FloatingPoint sort.</param>
    /// <param name="t2">
    /// term of FloatingPoint sort The nodes rm must be of RoundingMode sort, t1 and t2 must have the same
    /// FloatingPoint sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_div")]
    internal IntPtr MkFpaDiv(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_div");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaDivDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaFmaDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2, IntPtr t3);

    /// <summary>
    /// Floating-point fused multiply-add.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort</param>
    /// <param name="t3">
    /// term of FloatingPoint sort The result is round((t1 * t2) + t3). rm must be of RoundingMode sort, t1, t2, and
    /// t3 must have the same FloatingPoint sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_fma")]
    internal IntPtr MkFpaFma(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2, IntPtr t3)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_fma");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaFmaDelegate>(funcPtr);
        return func(c, rm, t1, t2, t3);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaSqrtDelegate(IntPtr c, IntPtr rm, IntPtr t);

    /// <summary>
    /// Floating-point square root
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">
    /// term of FloatingPoint sort rm must be of RoundingMode sort, t must have FloatingPoint sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_sqrt")]
    internal IntPtr MkFpaSqrt(IntPtr c, IntPtr rm, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sqrt");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaSqrtDelegate>(funcPtr);
        return func(c, rm, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRemDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point remainder
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1 and t2 must have the same FloatingPoint sort.</param>
    [Z3Function("Z3_mk_fpa_rem")]
    internal IntPtr MkFpaRem(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rem");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRemDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaRoundToIntegralDelegate(IntPtr c, IntPtr rm, IntPtr t);

    /// <summary>
    /// Floating-point roundToIntegral. Rounds a floating-point number to the closest integer, again represented as a
    /// floating-point number.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of FloatingPoint sort t must be of FloatingPoint sort.</param>
    [Z3Function("Z3_mk_fpa_round_to_integral")]
    internal IntPtr MkFpaRoundToIntegral(IntPtr c, IntPtr rm, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_to_integral");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaRoundToIntegralDelegate>(funcPtr);
        return func(c, rm, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaMinDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Minimum of floating-point numbers.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1, t2 must have the same FloatingPoint sort.</param>
    /// <seealso cref="MkFpaMax"/>
    [Z3Function("Z3_mk_fpa_min")]
    internal IntPtr MkFpaMin(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_min");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaMinDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaMaxDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Maximum of floating-point numbers.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1, t2 must have the same FloatingPoint sort.</param>
    /// <seealso cref="MkFpaMin"/>
    [Z3Function("Z3_mk_fpa_max")]
    internal IntPtr MkFpaMax(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_max");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaMaxDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaLeqDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point less than or equal.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1 and t2 must have the same FloatingPoint sort.</param>
    /// <seealso cref="MkFpaEq"/>
    /// <seealso cref="MkFpaGeq"/>
    /// <seealso cref="MkFpaGt"/>
    /// <seealso cref="MkFpaLt"/>
    [Z3Function("Z3_mk_fpa_leq")]
    internal IntPtr MkFpaLeq(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_leq");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaLeqDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaLtDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point less than.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1 and t2 must have the same FloatingPoint sort.</param>
    /// <seealso cref="MkFpaEq"/>
    /// <seealso cref="MkFpaGeq"/>
    /// <seealso cref="MkFpaGt"/>
    /// <seealso cref="MkFpaLeq"/>
    [Z3Function("Z3_mk_fpa_lt")]
    internal IntPtr MkFpaLt(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_lt");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaLtDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaGeqDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point greater than or equal.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1 and t2 must have the same FloatingPoint sort.</param>
    /// <seealso cref="MkFpaEq"/>
    /// <seealso cref="MkFpaGt"/>
    /// <seealso cref="MkFpaLeq"/>
    /// <seealso cref="MkFpaLt"/>
    [Z3Function("Z3_mk_fpa_geq")]
    internal IntPtr MkFpaGeq(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_geq");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaGeqDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaGtDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point greater than.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">term of FloatingPoint sort t1 and t2 must have the same FloatingPoint sort.</param>
    /// <seealso cref="MkFpaEq"/>
    /// <seealso cref="MkFpaGeq"/>
    /// <seealso cref="MkFpaLeq"/>
    /// <seealso cref="MkFpaLt"/>
    [Z3Function("Z3_mk_fpa_gt")]
    internal IntPtr MkFpaGt(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_gt");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaGtDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaEqDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    /// <summary>
    /// Floating-point equality.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t1">term of FloatingPoint sort</param>
    /// <param name="t2">
    /// term of FloatingPoint sort Note that this is IEEE 754 equality (as opposed to SMT-LIB =). t1 and t2 must have
    /// the same FloatingPoint sort.
    /// </param>
    /// <seealso cref="MkFpaGeq"/>
    /// <seealso cref="MkFpaGt"/>
    /// <seealso cref="MkFpaLeq"/>
    /// <seealso cref="MkFpaLt"/>
    [Z3Function("Z3_mk_fpa_eq")]
    internal IntPtr MkFpaEq(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_eq");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaEqDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsNormalDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a normal floating-point number.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaIsInfinite"/>
    /// <seealso cref="MkFpaIsNan"/>
    /// <seealso cref="MkFpaIsSubnormal"/>
    /// <seealso cref="MkFpaIsZero"/>
    [Z3Function("Z3_mk_fpa_is_normal")]
    internal IntPtr MkFpaIsNormal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_normal");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsNormalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsSubnormalDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a subnormal floating-point number.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaIsInfinite"/>
    /// <seealso cref="MkFpaIsNan"/>
    /// <seealso cref="MkFpaIsNormal"/>
    /// <seealso cref="MkFpaIsZero"/>
    [Z3Function("Z3_mk_fpa_is_subnormal")]
    internal IntPtr MkFpaIsSubnormal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_subnormal");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsSubnormalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsZeroDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a floating-point number with zero value, i.e., +zero or -zero.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaIsInfinite"/>
    /// <seealso cref="MkFpaIsNan"/>
    /// <seealso cref="MkFpaIsNormal"/>
    /// <seealso cref="MkFpaIsSubnormal"/>
    /// <seealso cref="MkFpaZero"/>
    [Z3Function("Z3_mk_fpa_is_zero")]
    internal IntPtr MkFpaIsZero(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_zero");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsZeroDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsInfiniteDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a floating-point number representing +oo or -oo.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaInf"/>
    /// <seealso cref="MkFpaIsNan"/>
    /// <seealso cref="MkFpaIsNormal"/>
    /// <seealso cref="MkFpaIsSubnormal"/>
    /// <seealso cref="MkFpaIsZero"/>
    [Z3Function("Z3_mk_fpa_is_infinite")]
    internal IntPtr MkFpaIsInfinite(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_infinite");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsInfiniteDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsNanDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a NaN.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaIsInfinite"/>
    /// <seealso cref="MkFpaIsNormal"/>
    /// <seealso cref="MkFpaIsSubnormal"/>
    /// <seealso cref="MkFpaIsZero"/>
    /// <seealso cref="MkFpaNan"/>
    [Z3Function("Z3_mk_fpa_is_nan")]
    internal IntPtr MkFpaIsNan(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_nan");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsNanDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsNegativeDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a negative floating-point number.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaAbs"/>
    /// <seealso cref="MkFpaIsPositive"/>
    /// <seealso cref="MkFpaNeg"/>
    [Z3Function("Z3_mk_fpa_is_negative")]
    internal IntPtr MkFpaIsNegative(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_negative");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsNegativeDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaIsPositiveDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Predicate indicating whether t is a positive floating-point number.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort t must have FloatingPoint sort.</param>
    /// <seealso cref="MkFpaAbs"/>
    /// <seealso cref="MkFpaIsNegative"/>
    /// <seealso cref="MkFpaNeg"/>
    [Z3Function("Z3_mk_fpa_is_positive")]
    internal IntPtr MkFpaIsPositive(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_positive");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaIsPositiveDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToFpBvDelegate(IntPtr c, IntPtr bv, IntPtr s);

    /// <summary>
    /// Conversion of a single IEEE 754-2008 bit-vector into a floating-point number. Produces a term that represents
    /// the conversion of a bit-vector term bv to a floating-point term of sort s.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="bv">a bit-vector term</param>
    /// <param name="s">
    /// floating-point sort s must be a FloatingPoint sort, t must be of bit-vector sort, and the bit-vector size of
    /// bv must be equal to ebits+sbits of s. The format of the bit-vector is as defined by the IEEE 754-2008
    /// interchange format.
    /// </param>
    [Z3Function("Z3_mk_fpa_to_fp_bv")]
    internal IntPtr MkFpaToFpBv(IntPtr c, IntPtr bv, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_bv");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToFpBvDelegate>(funcPtr);
        return func(c, bv, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToFpFloatDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    /// <summary>
    /// Conversion of a FloatingPoint term into another term of different FloatingPoint sort. Produces a term that
    /// represents the conversion of a floating-point term t to a floating-point term of sort s. If necessary, the
    /// result will be rounded according to rounding mode rm.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of FloatingPoint sort</param>
    /// <param name="s">
    /// floating-point sort s must be a FloatingPoint sort, rm must be of RoundingMode sort, t must be of
    /// floating-point sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_to_fp_float")]
    internal IntPtr MkFpaToFpFloat(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_float");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToFpFloatDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToFpRealDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    /// <summary>
    /// Conversion of a term of real sort into a term of FloatingPoint sort. Produces a term that represents the
    /// conversion of term t of real sort into a floating-point term of sort s. If necessary, the result will be
    /// rounded according to rounding mode rm.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of Real sort</param>
    /// <param name="s">
    /// floating-point sort s must be a FloatingPoint sort, rm must be of RoundingMode sort, t must be of real sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_to_fp_real")]
    internal IntPtr MkFpaToFpReal(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_real");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToFpRealDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToFpSignedDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    /// <summary>
    /// Conversion of a 2's complement signed bit-vector term into a term of FloatingPoint sort. Produces a term that
    /// represents the conversion of the bit-vector term t into a floating-point term of sort s. The bit-vector t is
    /// taken to be in signed 2's complement format. If necessary, the result will be rounded according to rounding
    /// mode rm.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of bit-vector sort</param>
    /// <param name="s">
    /// floating-point sort s must be a FloatingPoint sort, rm must be of RoundingMode sort, t must be of bit-vector
    /// sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_to_fp_signed")]
    internal IntPtr MkFpaToFpSigned(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_signed");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToFpSignedDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToFpUnsignedDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    /// <summary>
    /// Conversion of a 2's complement unsigned bit-vector term into a term of FloatingPoint sort. Produces a term
    /// that represents the conversion of the bit-vector term t into a floating-point term of sort s. The bit-vector t
    /// is taken to be in unsigned 2's complement format. If necessary, the result will be rounded according to
    /// rounding mode rm.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of bit-vector sort</param>
    /// <param name="s">
    /// floating-point sort s must be a FloatingPoint sort, rm must be of RoundingMode sort, t must be of bit-vector
    /// sort.
    /// </param>
    [Z3Function("Z3_mk_fpa_to_fp_unsigned")]
    internal IntPtr MkFpaToFpUnsigned(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_unsigned");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToFpUnsignedDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToUbvDelegate(IntPtr c, IntPtr rm, IntPtr t, uint sz);

    /// <summary>
    /// Conversion of a floating-point term into an unsigned bit-vector. Produces a term that represents the
    /// conversion of the floating-point term t into a bit-vector term of size sz in unsigned 2's complement format.
    /// If necessary, the result will be rounded according to rounding mode rm.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of FloatingPoint sort</param>
    /// <param name="sz">size of the resulting bit-vector</param>
    [Z3Function("Z3_mk_fpa_to_ubv")]
    internal IntPtr MkFpaToUbv(IntPtr c, IntPtr rm, IntPtr t, uint sz)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_ubv");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToUbvDelegate>(funcPtr);
        return func(c, rm, t, sz);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToSbvDelegate(IntPtr c, IntPtr rm, IntPtr t, uint sz);

    /// <summary>
    /// Conversion of a floating-point term into a signed bit-vector. Produces a term that represents the conversion
    /// of the floating-point term t into a bit-vector term of size sz in signed 2's complement format. If necessary,
    /// the result will be rounded according to rounding mode rm.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="rm">term of RoundingMode sort</param>
    /// <param name="t">term of FloatingPoint sort</param>
    /// <param name="sz">size of the resulting bit-vector</param>
    [Z3Function("Z3_mk_fpa_to_sbv")]
    internal IntPtr MkFpaToSbv(IntPtr c, IntPtr rm, IntPtr t, uint sz)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_sbv");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToSbvDelegate>(funcPtr);
        return func(c, rm, t, sz);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFpaToRealDelegate(IntPtr c, IntPtr t);

    /// <summary>
    /// Conversion of a floating-point term into a real-numbered term. Produces a term that represents the conversion
    /// of the floating-point term t into a real number. Note that this type of conversion will often result in
    /// non-linear constraints over real terms.
    /// </summary>
    /// <param name="c">logical context</param>
    /// <param name="t">term of FloatingPoint sort</param>
    [Z3Function("Z3_mk_fpa_to_real")]
    internal IntPtr MkFpaToReal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_real");
        var func = Marshal.GetDelegateForFunctionPointer<MkFpaToRealDelegate>(funcPtr);
        return func(c, t);
    }

}
