// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Symbols
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkIntSymbolDelegate(IntPtr c, int i);

    /// <summary>
    /// Create a Z3 symbol using an integer.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="i" ctype="int">int parameter</param>
    /// <seealso cref="GetSymbolInt"/>
    /// <seealso cref="MkStringSymbol"/>
    [Z3Function("Z3_mk_int_symbol")]
    internal IntPtr MkIntSymbol(IntPtr c, int i)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int_symbol");
        var func = Marshal.GetDelegateForFunctionPointer<MkIntSymbolDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkStringSymbolDelegate(IntPtr c, IntPtr s);

    /// <summary>
    /// Create a Z3 symbol using a C string.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_string">string parameter</param>
    /// <seealso cref="GetSymbolString"/>
    /// <seealso cref="MkIntSymbol"/>
    [Z3Function("Z3_mk_string_symbol")]
    internal IntPtr MkStringSymbol(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_string_symbol");
        var func = Marshal.GetDelegateForFunctionPointer<MkStringSymbolDelegate>(funcPtr);
        return func(c, s);
    }

}
