// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Parameters
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop;

internal sealed partial class NativeZ3Library
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkParamsDelegate(IntPtr c);

    /// <summary>
    ///  Create a Z3 (empty) parameter set. Starting at Z3 4.0, parameter sets are used to configure many components such as: simplifiers, tactics, solvers, etc. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_params">params value</returns>
    /// <remarks>
    /// Reference counting must be used to manage parameter sets, even when the <c>Z3_context</c> was created using <see cref="MkContext"/> instead of <see cref="MkContextRc"/> . 
    /// </remarks>
    [Z3Function("Z3_mk_params")]
    internal IntPtr MkParams(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_params");
        var func = Marshal.GetDelegateForFunctionPointer<MkParamsDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsIncRefDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Increment the reference counter of the given parameter set. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    [Z3Function("Z3_params_inc_ref")]
    internal void ParamsIncRef(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_params_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsIncRefDelegate>(funcPtr);
        func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsDecRefDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Decrement the reference counter of the given parameter set. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    [Z3Function("Z3_params_dec_ref")]
    internal void ParamsDecRef(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_params_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsDecRefDelegate>(funcPtr);
        func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsSetBoolDelegate(IntPtr c, IntPtr p, IntPtr k, bool v);

    /// <summary>
    ///  Add a Boolean parameter <c>k</c> with value <c>v</c> to the parameter set <c>p</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <param name="k" ctype="Z3_symbol">symbol parameter</param>
    /// <param name="v" ctype="bool">bool parameter</param>
    [Z3Function("Z3_params_set_bool")]
    internal void ParamsSetBool(IntPtr c, IntPtr p, IntPtr k, bool v)
    {
        var funcPtr = GetFunctionPointer("Z3_params_set_bool");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsSetBoolDelegate>(funcPtr);
        func(c, p, k, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsSetUintDelegate(IntPtr c, IntPtr p, IntPtr k, uint v);

    /// <summary>
    ///  Add a unsigned parameter <c>k</c> with value <c>v</c> to the parameter set <c>p</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <param name="k" ctype="Z3_symbol">symbol parameter</param>
    /// <param name="v" ctype="unsigned">unsigned parameter</param>
    [Z3Function("Z3_params_set_uint")]
    internal void ParamsSetUint(IntPtr c, IntPtr p, IntPtr k, uint v)
    {
        var funcPtr = GetFunctionPointer("Z3_params_set_uint");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsSetUintDelegate>(funcPtr);
        func(c, p, k, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsSetDoubleDelegate(IntPtr c, IntPtr p, IntPtr k, double v);

    /// <summary>
    ///  Add a double parameter <c>k</c> with value <c>v</c> to the parameter set <c>p</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <param name="k" ctype="Z3_symbol">symbol parameter</param>
    /// <param name="v" ctype="double">double parameter</param>
    [Z3Function("Z3_params_set_double")]
    internal void ParamsSetDouble(IntPtr c, IntPtr p, IntPtr k, double v)
    {
        var funcPtr = GetFunctionPointer("Z3_params_set_double");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsSetDoubleDelegate>(funcPtr);
        func(c, p, k, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsSetSymbolDelegate(IntPtr c, IntPtr p, IntPtr k, IntPtr v);

    /// <summary>
    ///  Add a symbol parameter <c>k</c> with value <c>v</c> to the parameter set <c>p</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <param name="k" ctype="Z3_symbol">symbol parameter</param>
    /// <param name="v" ctype="Z3_symbol">symbol parameter</param>
    [Z3Function("Z3_params_set_symbol")]
    internal void ParamsSetSymbol(IntPtr c, IntPtr p, IntPtr k, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_params_set_symbol");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsSetSymbolDelegate>(funcPtr);
        func(c, p, k, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ParamsToStringDelegate(IntPtr c, IntPtr p);

    /// <summary>
    ///  Convert a parameter set into a string. This function is mainly used for printing the contents of a parameter set. 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    [Z3Function("Z3_params_to_string")]
    internal IntPtr ParamsToString(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_params_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsToStringDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ParamsValidateDelegate(IntPtr c, IntPtr p, IntPtr d);

    /// <summary>
    ///  Validate the parameter set <c>p</c> against the parameter description set <c>d</c> . 
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_params">params parameter</param>
    /// <param name="d" ctype="Z3_param_descrs">param_descrs parameter</param>
    /// <remarks>
    /// The procedure invokes the error handler if <c>p</c> is invalid.
    /// </remarks>
    [Z3Function("Z3_params_validate")]
    internal void ParamsValidate(IntPtr c, IntPtr p, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_params_validate");
        var func = Marshal.GetDelegateForFunctionPointer<ParamsValidateDelegate>(funcPtr);
        func(c, p, d);
    }

}
