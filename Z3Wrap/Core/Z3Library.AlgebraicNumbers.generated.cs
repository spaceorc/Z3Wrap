// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.AlgebraicNumbers.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

#nullable enable

using System.Runtime.InteropServices;
using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core;

public sealed partial class Z3Library
{
    /// <summary>
    ///  Return <c>true</c> if <c>a</c> can be used as value in the Z3 real algebraic number package.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    public bool AlgebraicIsValue(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicIsValue(c, a);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if <c>a</c> is positive, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public bool AlgebraicIsPos(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicIsPos(c, a);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if <c>a</c> is negative, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public bool AlgebraicIsNeg(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicIsNeg(c, a);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if <c>a</c> is zero, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public bool AlgebraicIsZero(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicIsZero(c, a);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return 1 if <c>a</c> is positive, 0 if <c>a</c> is zero, and -1 if <c>a</c> is negative.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="int">int value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public int AlgebraicSign(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicSign(c, a);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the value a + b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public IntPtr AlgebraicAdd(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicAdd(c, a, b);
        CheckError(c);
        return CheckHandle(result, nameof(AlgebraicAdd));
    }

    /// <summary>
    ///  Return the value a - b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public IntPtr AlgebraicSub(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicSub(c, a, b);
        CheckError(c);
        return CheckHandle(result, nameof(AlgebraicSub));
    }

    /// <summary>
    ///  Return the value a * b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public IntPtr AlgebraicMul(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicMul(c, a, b);
        CheckError(c);
        return CheckHandle(result, nameof(AlgebraicMul));
    }

    /// <summary>
    ///  Return the value a / b.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// Precondition: !Z3_algebraic_is_zero(c, b)
    /// </remarks>
    public IntPtr AlgebraicDiv(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicDiv(c, a, b);
        CheckError(c);
        return CheckHandle(result, nameof(AlgebraicDiv));
    }

    /// <summary>
    ///  Return the a^(1/k)
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="k" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: k is even =&gt; !Z3_algebraic_is_neg(c, a)
    /// </remarks>
    public IntPtr AlgebraicRoot(IntPtr c, IntPtr a, uint k)
    {
        var result = nativeLibrary.AlgebraicRoot(c, a, k);
        CheckError(c);
        return CheckHandle(result, nameof(AlgebraicRoot));
    }

    /// <summary>
    ///  Return the a^k.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="k" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public IntPtr AlgebraicPower(IntPtr c, IntPtr a, uint k)
    {
        var result = nativeLibrary.AlgebraicPower(c, a, k);
        CheckError(c);
        return CheckHandle(result, nameof(AlgebraicPower));
    }

    /// <summary>
    ///  Return <c>true</c> if a &lt; b, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public bool AlgebraicLt(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicLt(c, a, b);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if a &gt; b, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public bool AlgebraicGt(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicGt(c, a, b);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if a &lt;= b, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public bool AlgebraicLe(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicLe(c, a, b);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if a &gt;= b, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public bool AlgebraicGe(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicGe(c, a, b);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if a == b, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public bool AlgebraicEq(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicEq(c, a, b);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if a != b, and <c>false</c> otherwise.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <param name="b" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// Precondition: Z3_algebraic_is_value(c, b)
    /// </remarks>
    public bool AlgebraicNeq(IntPtr c, IntPtr a, IntPtr b)
    {
        var result = nativeLibrary.AlgebraicNeq(c, a, b);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Given a multivariate polynomial p(x_0, ..., x_{n-1}, x_n), returns the roots of the univariate polynomial p(a[0], ..., a[n-1], x_n).
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_ast">ast parameter</param>
    /// <param name="n" ctype="unsigned">unsigned parameter</param>
    /// <param name="a" ctype="Z3_ast[]">ast parameter</param>
    /// <returns ctype="Z3_ast_vector">ast_vector value</returns>
    /// <remarks>
    /// Precondition: p is a Z3 expression that contains only arithmetic terms and free variables.
    /// Precondition: forall i in [0, n) Z3_algebraic_is_value(c, a[i])
    /// </remarks>
    public IntPtr[] AlgebraicRoots(IntPtr c, IntPtr p, uint n, IntPtr[] a)
    {
        var result = nativeLibrary.AlgebraicRoots(c, p, n, a);
        CheckError(c);
        result = CheckHandle(result, nameof(AlgebraicRoots));
        return AstVectorToArray(c, result);
    }

    /// <summary>
    ///  Given a multivariate polynomial p(x_0, ..., x_{n-1}), return the sign of p(a[0], ..., a[n-1]).
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="p" ctype="Z3_ast">ast parameter</param>
    /// <param name="n" ctype="unsigned">unsigned parameter</param>
    /// <param name="a" ctype="Z3_ast[]">ast parameter</param>
    /// <returns ctype="int">int value</returns>
    /// <remarks>
    /// Precondition: p is a Z3 expression that contains only arithmetic terms and free variables.
    /// Precondition: forall i in [0, n) Z3_algebraic_is_value(c, a[i])
    /// </remarks>
    public int AlgebraicEval(IntPtr c, IntPtr p, uint n, IntPtr[] a)
    {
        var result = nativeLibrary.AlgebraicEval(c, p, n, a);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the coefficients of the defining polynomial.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast_vector">ast_vector value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public IntPtr[] AlgebraicGetPoly(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicGetPoly(c, a);
        CheckError(c);
        result = CheckHandle(result, nameof(AlgebraicGetPoly));
        return AstVectorToArray(c, result);
    }

    /// <summary>
    ///  Return which root of the polynomial the algebraic number represents.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: Z3_algebraic_is_value(c, a)
    /// </remarks>
    public uint AlgebraicGetI(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.AlgebraicGetI(c, a);
        CheckError(c);
        return result;
    }

}
