// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_fpa.h / Floating-Point Arithmetic
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsFloatingPointArithmetic(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rounding_mode_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_round_nearest_ties_to_even");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rne");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_round_nearest_ties_to_away");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rna");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_round_toward_positive");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rtp");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_round_toward_negative");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rtn");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_round_toward_zero");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rtz");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_half");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_16");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_single");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_32");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_double");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_quadruple");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sort_128");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_nan");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_inf");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_zero");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_fp");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_numeral_float");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_numeral_double");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_numeral_int");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_numeral_int_uint");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_numeral_int64_uint64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_abs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_neg");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_add");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sub");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_mul");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_div");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_fma");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_sqrt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_rem");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_round_to_integral");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_min");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_max");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_leq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_lt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_geq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_gt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_eq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_normal");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_subnormal");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_zero");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_infinite");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_nan");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_negative");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_is_positive");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_fp_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_fp_float");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_fp_real");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_fp_signed");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_fp_unsigned");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_ubv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_sbv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_real");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_rounding_mode_sortDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_rounding_mode_sort(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rounding_mode_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_rounding_mode_sortDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_round_nearest_ties_to_evenDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_round_nearest_ties_to_even(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_nearest_ties_to_even");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_round_nearest_ties_to_evenDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_rneDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_rne(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rne");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_rneDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_round_nearest_ties_to_awayDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_round_nearest_ties_to_away(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_nearest_ties_to_away");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_round_nearest_ties_to_awayDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_rnaDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_rna(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rna");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_rnaDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_round_toward_positiveDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_round_toward_positive(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_toward_positive");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_round_toward_positiveDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_rtpDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_rtp(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rtp");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_rtpDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_round_toward_negativeDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_round_toward_negative(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_toward_negative");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_round_toward_negativeDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_rtnDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_rtn(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rtn");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_rtnDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_round_toward_zeroDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_round_toward_zero(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_toward_zero");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_round_toward_zeroDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_rtzDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_rtz(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rtz");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_rtzDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sortDelegate(IntPtr c, uint ebits, uint sbits);

    internal IntPtr Z3_mk_fpa_sort(IntPtr c, uint ebits, uint sbits)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sortDelegate>(funcPtr);
        return func(c, ebits, sbits);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_halfDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_half(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_half");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_halfDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_16Delegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_16(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_16");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_16Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_singleDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_single(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_single");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_singleDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_32Delegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_32(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_32");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_32Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_doubleDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_double(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_double");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_doubleDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_64Delegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_64(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_64");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_64Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_quadrupleDelegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_quadruple(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_quadruple");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_quadrupleDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sort_128Delegate(IntPtr c);

    internal IntPtr Z3_mk_fpa_sort_128(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sort_128");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sort_128Delegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_nanDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_fpa_nan(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_nan");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_nanDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_infDelegate(IntPtr c, IntPtr s, bool negative);

    internal IntPtr Z3_mk_fpa_inf(IntPtr c, IntPtr s, bool negative)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_inf");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_infDelegate>(funcPtr);
        return func(c, s, negative);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_zeroDelegate(IntPtr c, IntPtr s, bool negative);

    internal IntPtr Z3_mk_fpa_zero(IntPtr c, IntPtr s, bool negative)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_zero");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_zeroDelegate>(funcPtr);
        return func(c, s, negative);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_fpDelegate(IntPtr c, IntPtr sgn, IntPtr exp, IntPtr sig);

    internal IntPtr Z3_mk_fpa_fp(IntPtr c, IntPtr sgn, IntPtr exp, IntPtr sig)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_fp");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_fpDelegate>(funcPtr);
        return func(c, sgn, exp, sig);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_numeral_floatDelegate(IntPtr c, float v, IntPtr ty);

    internal IntPtr Z3_mk_fpa_numeral_float(IntPtr c, float v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_float");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_numeral_floatDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_numeral_doubleDelegate(IntPtr c, double v, IntPtr ty);

    internal IntPtr Z3_mk_fpa_numeral_double(IntPtr c, double v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_double");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_numeral_doubleDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_numeral_intDelegate(IntPtr c, int v, IntPtr ty);

    internal IntPtr Z3_mk_fpa_numeral_int(IntPtr c, int v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_numeral_intDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_numeral_int_uintDelegate(IntPtr c, bool sgn, int exp, uint sig, IntPtr ty);

    internal IntPtr Z3_mk_fpa_numeral_int_uint(IntPtr c, bool sgn, int exp, uint sig, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_int_uint");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_numeral_int_uintDelegate>(funcPtr);
        return func(c, sgn, exp, sig, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_numeral_int64_uint64Delegate(IntPtr c, bool sgn, long exp, ulong sig, IntPtr ty);

    internal IntPtr Z3_mk_fpa_numeral_int64_uint64(IntPtr c, bool sgn, long exp, ulong sig, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_numeral_int64_uint64");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_numeral_int64_uint64Delegate>(funcPtr);
        return func(c, sgn, exp, sig, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_absDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_abs(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_abs");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_absDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_negDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_neg(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_neg");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_negDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_addDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_add(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_add");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_addDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_subDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_sub(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sub");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_subDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_mulDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_mul(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_mul");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_mulDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_divDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_div(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_div");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_divDelegate>(funcPtr);
        return func(c, rm, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_fmaDelegate(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2, IntPtr t3);

    internal IntPtr Z3_mk_fpa_fma(IntPtr c, IntPtr rm, IntPtr t1, IntPtr t2, IntPtr t3)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_fma");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_fmaDelegate>(funcPtr);
        return func(c, rm, t1, t2, t3);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_sqrtDelegate(IntPtr c, IntPtr rm, IntPtr t);

    internal IntPtr Z3_mk_fpa_sqrt(IntPtr c, IntPtr rm, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_sqrt");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_sqrtDelegate>(funcPtr);
        return func(c, rm, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_remDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_rem(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_rem");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_remDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_round_to_integralDelegate(IntPtr c, IntPtr rm, IntPtr t);

    internal IntPtr Z3_mk_fpa_round_to_integral(IntPtr c, IntPtr rm, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_round_to_integral");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_round_to_integralDelegate>(funcPtr);
        return func(c, rm, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_minDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_min(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_min");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_minDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_maxDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_max(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_max");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_maxDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_leqDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_leq(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_leq");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_leqDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_ltDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_lt(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_lt");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_ltDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_geqDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_geq(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_geq");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_geqDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_gtDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_gt(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_gt");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_gtDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_eqDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_fpa_eq(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_eq");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_eqDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_normalDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_normal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_normal");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_normalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_subnormalDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_subnormal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_subnormal");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_subnormalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_zeroDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_zero(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_zero");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_zeroDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_infiniteDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_infinite(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_infinite");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_infiniteDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_nanDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_nan(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_nan");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_nanDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_negativeDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_negative(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_negative");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_negativeDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_is_positiveDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_is_positive(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_is_positive");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_is_positiveDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_fp_bvDelegate(IntPtr c, IntPtr bv, IntPtr s);

    internal IntPtr Z3_mk_fpa_to_fp_bv(IntPtr c, IntPtr bv, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_bv");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_fp_bvDelegate>(funcPtr);
        return func(c, bv, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_fp_floatDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    internal IntPtr Z3_mk_fpa_to_fp_float(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_float");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_fp_floatDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_fp_realDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    internal IntPtr Z3_mk_fpa_to_fp_real(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_real");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_fp_realDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_fp_signedDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    internal IntPtr Z3_mk_fpa_to_fp_signed(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_signed");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_fp_signedDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_fp_unsignedDelegate(IntPtr c, IntPtr rm, IntPtr t, IntPtr s);

    internal IntPtr Z3_mk_fpa_to_fp_unsigned(IntPtr c, IntPtr rm, IntPtr t, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_unsigned");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_fp_unsignedDelegate>(funcPtr);
        return func(c, rm, t, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_ubvDelegate(IntPtr c, IntPtr rm, IntPtr t, uint sz);

    internal IntPtr Z3_mk_fpa_to_ubv(IntPtr c, IntPtr rm, IntPtr t, uint sz)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_ubv");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_ubvDelegate>(funcPtr);
        return func(c, rm, t, sz);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_sbvDelegate(IntPtr c, IntPtr rm, IntPtr t, uint sz);

    internal IntPtr Z3_mk_fpa_to_sbv(IntPtr c, IntPtr rm, IntPtr t, uint sz)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_sbv");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_sbvDelegate>(funcPtr);
        return func(c, rm, t, sz);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_realDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_to_real(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_real");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_realDelegate>(funcPtr);
        return func(c, t);
    }

}
