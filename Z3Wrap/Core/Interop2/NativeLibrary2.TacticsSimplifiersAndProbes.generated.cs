// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Tactics, Simplifiers and Probes
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsTacticsSimplifiersAndProbes(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_tactic");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_probe");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_and_then");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_or_else");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_par_or");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_par_and_then");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_try_for");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_when");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_cond");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_repeat");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_skip");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_fail");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_fail_if");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_fail_if_not_decided");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_using_params");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_simplifier");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_add_simplifier");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_and_then");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_using_params");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_num_simplifiers");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_simplifier_name");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_get_help");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_get_param_descrs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_simplifier_get_descr");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_const");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_lt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_gt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_le");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_ge");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_eq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_and");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_or");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_not");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_num_tactics");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_tactic_name");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_num_probes");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_probe_name");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_get_help");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_get_param_descrs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_get_descr");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_get_descr");
        LoadFunctionOrNull(handle, functionPointers, "Z3_probe_apply");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_apply");
        LoadFunctionOrNull(handle, functionPointers, "Z3_tactic_apply_ex");
        LoadFunctionOrNull(handle, functionPointers, "Z3_apply_result_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_apply_result_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_apply_result_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_apply_result_get_num_subgoals");
        LoadFunctionOrNull(handle, functionPointers, "Z3_apply_result_get_subgoal");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_tacticDelegate(IntPtr c, IntPtr name);

    internal IntPtr Z3_mk_tactic(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_tactic");
        var func = Marshal.GetDelegateForFunctionPointer<mk_tacticDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void tactic_inc_refDelegate(IntPtr c, IntPtr t);

    internal void Z3_tactic_inc_ref(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_inc_refDelegate>(funcPtr);
        func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void tactic_dec_refDelegate(IntPtr c, IntPtr g);

    internal void Z3_tactic_dec_ref(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_dec_refDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_probeDelegate(IntPtr c, IntPtr name);

    internal IntPtr Z3_mk_probe(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_probe");
        var func = Marshal.GetDelegateForFunctionPointer<mk_probeDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void probe_inc_refDelegate(IntPtr c, IntPtr p);

    internal void Z3_probe_inc_ref(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<probe_inc_refDelegate>(funcPtr);
        func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void probe_dec_refDelegate(IntPtr c, IntPtr p);

    internal void Z3_probe_dec_ref(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<probe_dec_refDelegate>(funcPtr);
        func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_and_thenDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_tactic_and_then(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_and_then");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_and_thenDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_or_elseDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_tactic_or_else(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_or_else");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_or_elseDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_par_orDelegate(IntPtr c, uint num, IntPtr ts);

    internal IntPtr Z3_tactic_par_or(IntPtr c, uint num, IntPtr ts)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_par_or");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_par_orDelegate>(funcPtr);
        return func(c, num, ts);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_par_and_thenDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_tactic_par_and_then(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_par_and_then");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_par_and_thenDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_try_forDelegate(IntPtr c, IntPtr t, uint ms);

    internal IntPtr Z3_tactic_try_for(IntPtr c, IntPtr t, uint ms)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_try_for");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_try_forDelegate>(funcPtr);
        return func(c, t, ms);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_whenDelegate(IntPtr c, IntPtr p, IntPtr t);

    internal IntPtr Z3_tactic_when(IntPtr c, IntPtr p, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_when");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_whenDelegate>(funcPtr);
        return func(c, p, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_condDelegate(IntPtr c, IntPtr p, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_tactic_cond(IntPtr c, IntPtr p, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_cond");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_condDelegate>(funcPtr);
        return func(c, p, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_repeatDelegate(IntPtr c, IntPtr t, uint max);

    internal IntPtr Z3_tactic_repeat(IntPtr c, IntPtr t, uint max)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_repeat");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_repeatDelegate>(funcPtr);
        return func(c, t, max);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_skipDelegate(IntPtr c);

    internal IntPtr Z3_tactic_skip(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_skip");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_skipDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_failDelegate(IntPtr c);

    internal IntPtr Z3_tactic_fail(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_fail");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_failDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_fail_ifDelegate(IntPtr c, IntPtr p);

    internal IntPtr Z3_tactic_fail_if(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_fail_if");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_fail_ifDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_fail_if_not_decidedDelegate(IntPtr c);

    internal IntPtr Z3_tactic_fail_if_not_decided(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_fail_if_not_decided");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_fail_if_not_decidedDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_using_paramsDelegate(IntPtr c, IntPtr t, IntPtr p);

    internal IntPtr Z3_tactic_using_params(IntPtr c, IntPtr t, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_using_params");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_using_paramsDelegate>(funcPtr);
        return func(c, t, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_simplifierDelegate(IntPtr c, IntPtr name);

    internal IntPtr Z3_mk_simplifier(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_simplifier");
        var func = Marshal.GetDelegateForFunctionPointer<mk_simplifierDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void simplifier_inc_refDelegate(IntPtr c, IntPtr t);

    internal void Z3_simplifier_inc_ref(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_inc_refDelegate>(funcPtr);
        func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void simplifier_dec_refDelegate(IntPtr c, IntPtr g);

    internal void Z3_simplifier_dec_ref(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_dec_refDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_add_simplifierDelegate(IntPtr c, IntPtr solver, IntPtr simplifier);

    internal IntPtr Z3_solver_add_simplifier(IntPtr c, IntPtr solver, IntPtr simplifier)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_add_simplifier");
        var func = Marshal.GetDelegateForFunctionPointer<solver_add_simplifierDelegate>(funcPtr);
        return func(c, solver, simplifier);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr simplifier_and_thenDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_simplifier_and_then(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_and_then");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_and_thenDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr simplifier_using_paramsDelegate(IntPtr c, IntPtr t, IntPtr p);

    internal IntPtr Z3_simplifier_using_params(IntPtr c, IntPtr t, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_using_params");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_using_paramsDelegate>(funcPtr);
        return func(c, t, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint get_num_simplifiersDelegate(IntPtr c);

    internal uint Z3_get_num_simplifiers(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_num_simplifiers");
        var func = Marshal.GetDelegateForFunctionPointer<get_num_simplifiersDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_simplifier_nameDelegate(IntPtr c, uint i);

    internal IntPtr Z3_get_simplifier_name(IntPtr c, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_simplifier_name");
        var func = Marshal.GetDelegateForFunctionPointer<get_simplifier_nameDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr simplifier_get_helpDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_simplifier_get_help(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_get_helpDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr simplifier_get_param_descrsDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_simplifier_get_param_descrs(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_get_param_descrsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr simplifier_get_descrDelegate(IntPtr c, IntPtr name);

    internal IntPtr Z3_simplifier_get_descr(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_simplifier_get_descr");
        var func = Marshal.GetDelegateForFunctionPointer<simplifier_get_descrDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_constDelegate(IntPtr x, double val);

    internal IntPtr Z3_probe_const(IntPtr x, double val)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_const");
        var func = Marshal.GetDelegateForFunctionPointer<probe_constDelegate>(funcPtr);
        return func(x, val);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_ltDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_lt(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_lt");
        var func = Marshal.GetDelegateForFunctionPointer<probe_ltDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_gtDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_gt(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_gt");
        var func = Marshal.GetDelegateForFunctionPointer<probe_gtDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_leDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_le(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_le");
        var func = Marshal.GetDelegateForFunctionPointer<probe_leDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_geDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_ge(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_ge");
        var func = Marshal.GetDelegateForFunctionPointer<probe_geDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_eqDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_eq(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_eq");
        var func = Marshal.GetDelegateForFunctionPointer<probe_eqDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_andDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_and(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_and");
        var func = Marshal.GetDelegateForFunctionPointer<probe_andDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_orDelegate(IntPtr x, IntPtr p1, IntPtr p2);

    internal IntPtr Z3_probe_or(IntPtr x, IntPtr p1, IntPtr p2)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_or");
        var func = Marshal.GetDelegateForFunctionPointer<probe_orDelegate>(funcPtr);
        return func(x, p1, p2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_notDelegate(IntPtr x, IntPtr p);

    internal IntPtr Z3_probe_not(IntPtr x, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_not");
        var func = Marshal.GetDelegateForFunctionPointer<probe_notDelegate>(funcPtr);
        return func(x, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint get_num_tacticsDelegate(IntPtr c);

    internal uint Z3_get_num_tactics(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_num_tactics");
        var func = Marshal.GetDelegateForFunctionPointer<get_num_tacticsDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_tactic_nameDelegate(IntPtr c, uint i);

    internal IntPtr Z3_get_tactic_name(IntPtr c, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_tactic_name");
        var func = Marshal.GetDelegateForFunctionPointer<get_tactic_nameDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint get_num_probesDelegate(IntPtr c);

    internal uint Z3_get_num_probes(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_num_probes");
        var func = Marshal.GetDelegateForFunctionPointer<get_num_probesDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_probe_nameDelegate(IntPtr c, uint i);

    internal IntPtr Z3_get_probe_name(IntPtr c, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_get_probe_name");
        var func = Marshal.GetDelegateForFunctionPointer<get_probe_nameDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_get_helpDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_tactic_get_help(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_get_helpDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_get_param_descrsDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_tactic_get_param_descrs(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_get_param_descrsDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_get_descrDelegate(IntPtr c, IntPtr name);

    internal IntPtr Z3_tactic_get_descr(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_get_descr");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_get_descrDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr probe_get_descrDelegate(IntPtr c, IntPtr name);

    internal IntPtr Z3_probe_get_descr(IntPtr c, IntPtr name)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_get_descr");
        var func = Marshal.GetDelegateForFunctionPointer<probe_get_descrDelegate>(funcPtr);
        return func(c, name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate double probe_applyDelegate(IntPtr c, IntPtr p, IntPtr g);

    internal double Z3_probe_apply(IntPtr c, IntPtr p, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_probe_apply");
        var func = Marshal.GetDelegateForFunctionPointer<probe_applyDelegate>(funcPtr);
        return func(c, p, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_applyDelegate(IntPtr c, IntPtr t, IntPtr g);

    internal IntPtr Z3_tactic_apply(IntPtr c, IntPtr t, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_apply");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_applyDelegate>(funcPtr);
        return func(c, t, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr tactic_apply_exDelegate(IntPtr c, IntPtr t, IntPtr g, IntPtr p);

    internal IntPtr Z3_tactic_apply_ex(IntPtr c, IntPtr t, IntPtr g, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_tactic_apply_ex");
        var func = Marshal.GetDelegateForFunctionPointer<tactic_apply_exDelegate>(funcPtr);
        return func(c, t, g, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void apply_result_inc_refDelegate(IntPtr c, IntPtr r);

    internal void Z3_apply_result_inc_ref(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<apply_result_inc_refDelegate>(funcPtr);
        func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void apply_result_dec_refDelegate(IntPtr c, IntPtr r);

    internal void Z3_apply_result_dec_ref(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<apply_result_dec_refDelegate>(funcPtr);
        func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr apply_result_to_stringDelegate(IntPtr c, IntPtr r);

    internal IntPtr Z3_apply_result_to_string(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<apply_result_to_stringDelegate>(funcPtr);
        return func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint apply_result_get_num_subgoalsDelegate(IntPtr c, IntPtr r);

    internal uint Z3_apply_result_get_num_subgoals(IntPtr c, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_get_num_subgoals");
        var func = Marshal.GetDelegateForFunctionPointer<apply_result_get_num_subgoalsDelegate>(funcPtr);
        return func(c, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr apply_result_get_subgoalDelegate(IntPtr c, IntPtr r, uint i);

    internal IntPtr Z3_apply_result_get_subgoal(IntPtr c, IntPtr r, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_apply_result_get_subgoal");
        var func = Marshal.GetDelegateForFunctionPointer<apply_result_get_subgoalDelegate>(funcPtr);
        return func(c, r, i);
    }

}
