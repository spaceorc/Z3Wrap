// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Create configuration
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkConfigDelegate();

    /// <summary>
    /// Create a configuration object for the Z3 context object. Configurations are created in order to assign parameters prior to creating contexts for Z3 interaction. For example, if the users wishes to use proof generation, then call: Z3_set_param_value(cfg\, "proof"\, "true")
    /// </summary>
    /// <remarks>
    /// In previous versions of Z3, the Z3_config was used to store global and module configurations. Now, we should use Z3_global_param_set. The following parameters can be set: - proof (Boolean) Enable proof generation - debug_ref_count (Boolean) Enable debug support for Z3_ast reference counting - trace (Boolean) Tracing support for VCC - trace_file_name (String) Trace out file for VCC traces - timeout (unsigned) default timeout (in milliseconds) used for solvers - well_sorted_check type checker - auto_config use heuristics to automatically select solver and configure it - model model generation for solvers, this parameter can be overwritten when creating a solver - model_validate validate models produced by solvers - unsat_core unsat-core generation for solvers, this parameter can be overwritten when creating a solver - encoding the string encoding used internally (must be either "unicode" - 18 bit, "bmp" - 16 bit or "ascii" - 8 bit)
    /// </remarks>
    /// <seealso cref="SetParamValue"/>
    /// <seealso cref="DelConfig"/>
    [Z3Function("Z3_mk_config")]
    internal IntPtr MkConfig()
    {
        var funcPtr = GetFunctionPointer("Z3_mk_config");
        var func = Marshal.GetDelegateForFunctionPointer<MkConfigDelegate>(funcPtr);
        return func();
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void DelConfigDelegate(IntPtr c);

    /// <summary>
    /// Delete the given configuration object.
    /// </summary>
    /// <seealso cref="MkConfig"/>
    [Z3Function("Z3_del_config")]
    internal void DelConfig(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_del_config");
        var func = Marshal.GetDelegateForFunctionPointer<DelConfigDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetParamValueDelegate(IntPtr c, IntPtr param_id, IntPtr param_value);

    /// <summary>
    /// Set a configuration parameter. The following parameters can be set for
    /// </summary>
    /// <seealso cref="MkConfig"/>
    [Z3Function("Z3_set_param_value")]
    internal void SetParamValue(IntPtr c, IntPtr param_id, IntPtr param_value)
    {
        var funcPtr = GetFunctionPointer("Z3_set_param_value");
        var func = Marshal.GetDelegateForFunctionPointer<SetParamValueDelegate>(funcPtr);
        func(c, param_id, param_value);
    }

}
