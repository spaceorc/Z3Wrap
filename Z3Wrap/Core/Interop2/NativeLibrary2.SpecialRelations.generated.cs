// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Special relations
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsSpecialRelations(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_linear_order");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_partial_order");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_piecewise_linear_order");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_tree_order");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_transitive_closure");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_linear_orderDelegate(IntPtr c, IntPtr a, uint id);

    internal IntPtr Z3_mk_linear_order(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_linear_order");
        var func = Marshal.GetDelegateForFunctionPointer<mk_linear_orderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_partial_orderDelegate(IntPtr c, IntPtr a, uint id);

    internal IntPtr Z3_mk_partial_order(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_partial_order");
        var func = Marshal.GetDelegateForFunctionPointer<mk_partial_orderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_piecewise_linear_orderDelegate(IntPtr c, IntPtr a, uint id);

    internal IntPtr Z3_mk_piecewise_linear_order(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_piecewise_linear_order");
        var func = Marshal.GetDelegateForFunctionPointer<mk_piecewise_linear_orderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_tree_orderDelegate(IntPtr c, IntPtr a, uint id);

    internal IntPtr Z3_mk_tree_order(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_tree_order");
        var func = Marshal.GetDelegateForFunctionPointer<mk_tree_orderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_transitive_closureDelegate(IntPtr c, IntPtr f);

    internal IntPtr Z3_mk_transitive_closure(IntPtr c, IntPtr f)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_transitive_closure");
        var func = Marshal.GetDelegateForFunctionPointer<mk_transitive_closureDelegate>(funcPtr);
        return func(c, f);
    }

}
