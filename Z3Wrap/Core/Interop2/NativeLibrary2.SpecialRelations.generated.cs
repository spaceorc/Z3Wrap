// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Special relations
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkLinearOrderDelegate(IntPtr c, IntPtr a, uint id);

    /// <summary>
    /// create a linear ordering relation over signature a. The relation is identified by the index id.
    /// </summary>
    [Z3Function("Z3_mk_linear_order")]
    internal IntPtr MkLinearOrder(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_linear_order");
        var func = Marshal.GetDelegateForFunctionPointer<MkLinearOrderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkPartialOrderDelegate(IntPtr c, IntPtr a, uint id);

    /// <summary>
    /// create a partial ordering relation over signature a and index id.
    /// </summary>
    [Z3Function("Z3_mk_partial_order")]
    internal IntPtr MkPartialOrder(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_partial_order");
        var func = Marshal.GetDelegateForFunctionPointer<MkPartialOrderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkPiecewiseLinearOrderDelegate(IntPtr c, IntPtr a, uint id);

    /// <summary>
    /// create a piecewise linear ordering relation over signature a and index id.
    /// </summary>
    [Z3Function("Z3_mk_piecewise_linear_order")]
    internal IntPtr MkPiecewiseLinearOrder(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_piecewise_linear_order");
        var func = Marshal.GetDelegateForFunctionPointer<MkPiecewiseLinearOrderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkTreeOrderDelegate(IntPtr c, IntPtr a, uint id);

    /// <summary>
    /// create a tree ordering relation over signature a identified using index id.
    /// </summary>
    [Z3Function("Z3_mk_tree_order")]
    internal IntPtr MkTreeOrder(IntPtr c, IntPtr a, uint id)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_tree_order");
        var func = Marshal.GetDelegateForFunctionPointer<MkTreeOrderDelegate>(funcPtr);
        return func(c, a, id);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkTransitiveClosureDelegate(IntPtr c, IntPtr f);

    /// <summary>
    /// create transitive closure of binary relation.
    /// </summary>
    /// <remarks>
    /// Precondition: f is a binary relation, such that the two arguments have the same sorts. The resulting relation f+ represents the transitive closure of f.
    /// </remarks>
    [Z3Function("Z3_mk_transitive_closure")]
    internal IntPtr MkTransitiveClosure(IntPtr c, IntPtr f)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_transitive_closure");
        var func = Marshal.GetDelegateForFunctionPointer<MkTransitiveClosureDelegate>(funcPtr);
        return func(c, f);
    }

}
