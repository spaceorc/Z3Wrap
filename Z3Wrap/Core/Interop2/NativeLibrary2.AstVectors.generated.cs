// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_ast_containers.h / AST vectors
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsAstVectors(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_ast_vector");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_size");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_get");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_set");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_resize");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_push");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_translate");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_vector_to_string");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_ast_vectorDelegate(IntPtr c);

    internal IntPtr Z3_mk_ast_vector(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ast_vector");
        var func = Marshal.GetDelegateForFunctionPointer<mk_ast_vectorDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_vector_inc_refDelegate(IntPtr c, IntPtr v);

    internal void Z3_ast_vector_inc_ref(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_inc_refDelegate>(funcPtr);
        func(c, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_vector_dec_refDelegate(IntPtr c, IntPtr v);

    internal void Z3_ast_vector_dec_ref(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_dec_refDelegate>(funcPtr);
        func(c, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint ast_vector_sizeDelegate(IntPtr c, IntPtr v);

    internal uint Z3_ast_vector_size(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_size");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_sizeDelegate>(funcPtr);
        return func(c, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_vector_getDelegate(IntPtr c, IntPtr v, uint i);

    internal IntPtr Z3_ast_vector_get(IntPtr c, IntPtr v, uint i)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_get");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_getDelegate>(funcPtr);
        return func(c, v, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_vector_setDelegate(IntPtr c, IntPtr v, uint i, IntPtr a);

    internal void Z3_ast_vector_set(IntPtr c, IntPtr v, uint i, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_set");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_setDelegate>(funcPtr);
        func(c, v, i, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_vector_resizeDelegate(IntPtr c, IntPtr v, uint n);

    internal void Z3_ast_vector_resize(IntPtr c, IntPtr v, uint n)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_resize");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_resizeDelegate>(funcPtr);
        func(c, v, n);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_vector_pushDelegate(IntPtr c, IntPtr v, IntPtr a);

    internal void Z3_ast_vector_push(IntPtr c, IntPtr v, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_push");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_pushDelegate>(funcPtr);
        func(c, v, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_vector_translateDelegate(IntPtr s, IntPtr v, IntPtr t);

    internal IntPtr Z3_ast_vector_translate(IntPtr s, IntPtr v, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_translate");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_translateDelegate>(funcPtr);
        return func(s, v, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_vector_to_stringDelegate(IntPtr c, IntPtr v);

    internal IntPtr Z3_ast_vector_to_string(IntPtr c, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_vector_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<ast_vector_to_stringDelegate>(funcPtr);
        return func(c, v);
    }

}
