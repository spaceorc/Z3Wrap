// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_fpa.h / Z3-specific floating-point extensions
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsZ3SpecificFloatingPointExtensions(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_ebits");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_sbits");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_nan");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_inf");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_zero");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_normal");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_subnormal");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_positive");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_is_numeral_negative");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_sign_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_significand_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_sign");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_significand_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_significand_uint64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_exponent_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_exponent_int64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_fpa_get_numeral_exponent_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_ieee_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fpa_to_fp_int_real");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint fpa_get_ebitsDelegate(IntPtr c, IntPtr s);

    internal uint Z3_fpa_get_ebits(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_ebits");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_ebitsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint fpa_get_sbitsDelegate(IntPtr c, IntPtr s);

    internal uint Z3_fpa_get_sbits(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_sbits");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_sbitsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_nanDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_nan(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_nan");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_nanDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_infDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_inf(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_inf");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_infDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_zeroDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_zero(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_zero");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_zeroDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_normalDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_normal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_normal");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_normalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_subnormalDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_subnormal(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_subnormal");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_subnormalDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_positiveDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_positive(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_positive");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_positiveDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_is_numeral_negativeDelegate(IntPtr c, IntPtr t);

    internal bool Z3_fpa_is_numeral_negative(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_is_numeral_negative");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_is_numeral_negativeDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr fpa_get_numeral_sign_bvDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_fpa_get_numeral_sign_bv(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_sign_bv");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_sign_bvDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr fpa_get_numeral_significand_bvDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_fpa_get_numeral_significand_bv(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_significand_bv");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_significand_bvDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_get_numeral_signDelegate(IntPtr c, IntPtr t, IntPtr sgn);

    internal bool Z3_fpa_get_numeral_sign(IntPtr c, IntPtr t, IntPtr sgn)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_sign");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_signDelegate>(funcPtr);
        return func(c, t, sgn);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr fpa_get_numeral_significand_stringDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_fpa_get_numeral_significand_string(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_significand_string");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_significand_stringDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_get_numeral_significand_uint64Delegate(IntPtr c, IntPtr t, IntPtr n);

    internal bool Z3_fpa_get_numeral_significand_uint64(IntPtr c, IntPtr t, IntPtr n)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_significand_uint64");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_significand_uint64Delegate>(funcPtr);
        return func(c, t, n);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr fpa_get_numeral_exponent_stringDelegate(IntPtr c, IntPtr t, bool biased);

    internal IntPtr Z3_fpa_get_numeral_exponent_string(IntPtr c, IntPtr t, bool biased)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_exponent_string");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_exponent_stringDelegate>(funcPtr);
        return func(c, t, biased);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool fpa_get_numeral_exponent_int64Delegate(IntPtr c, IntPtr t, IntPtr n, bool biased);

    internal bool Z3_fpa_get_numeral_exponent_int64(IntPtr c, IntPtr t, IntPtr n, bool biased)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_exponent_int64");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_exponent_int64Delegate>(funcPtr);
        return func(c, t, n, biased);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr fpa_get_numeral_exponent_bvDelegate(IntPtr c, IntPtr t, bool biased);

    internal IntPtr Z3_fpa_get_numeral_exponent_bv(IntPtr c, IntPtr t, bool biased)
    {
        var funcPtr = GetFunctionPointer("Z3_fpa_get_numeral_exponent_bv");
        var func = Marshal.GetDelegateForFunctionPointer<fpa_get_numeral_exponent_bvDelegate>(funcPtr);
        return func(c, t, biased);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_ieee_bvDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_fpa_to_ieee_bv(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_ieee_bv");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_ieee_bvDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fpa_to_fp_int_realDelegate(IntPtr c, IntPtr rm, IntPtr exp, IntPtr sig, IntPtr s);

    internal IntPtr Z3_mk_fpa_to_fp_int_real(IntPtr c, IntPtr rm, IntPtr exp, IntPtr sig, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fpa_to_fp_int_real");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fpa_to_fp_int_realDelegate>(funcPtr);
        return func(c, rm, exp, sig, s);
    }

}
