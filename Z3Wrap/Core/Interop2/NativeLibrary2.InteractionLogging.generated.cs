// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Interaction logging
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsInteractionLogging(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_open_log");
        LoadFunctionOrNull(handle, functionPointers, "Z3_append_log");
        LoadFunctionOrNull(handle, functionPointers, "Z3_close_log");
        LoadFunctionOrNull(handle, functionPointers, "Z3_toggle_warning_messages");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool open_logDelegate(IntPtr filename);

    internal bool Z3_open_log(IntPtr filename)
    {
        var funcPtr = GetFunctionPointer("Z3_open_log");
        var func = Marshal.GetDelegateForFunctionPointer<open_logDelegate>(funcPtr);
        return func(filename);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void append_logDelegate(IntPtr @string);

    internal void Z3_append_log(IntPtr @string)
    {
        var funcPtr = GetFunctionPointer("Z3_append_log");
        var func = Marshal.GetDelegateForFunctionPointer<append_logDelegate>(funcPtr);
        func(@string);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void close_logDelegate();

    internal void Z3_close_log()
    {
        var funcPtr = GetFunctionPointer("Z3_close_log");
        var func = Marshal.GetDelegateForFunctionPointer<close_logDelegate>(funcPtr);
        func();
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void toggle_warning_messagesDelegate(bool enabled);

    internal void Z3_toggle_warning_messages(bool enabled)
    {
        var funcPtr = GetFunctionPointer("Z3_toggle_warning_messages");
        var func = Marshal.GetDelegateForFunctionPointer<toggle_warning_messagesDelegate>(funcPtr);
        func(enabled);
    }

}
