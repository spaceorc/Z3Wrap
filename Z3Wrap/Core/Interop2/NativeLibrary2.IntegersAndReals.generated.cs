// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Integers and Reals
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsIntegersAndReals(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_add");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_mul");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_sub");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_unary_minus");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_div");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_mod");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_rem");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_power");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_abs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_lt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_le");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_gt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_ge");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_divides");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_int2real");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_real2int");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_is_int");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_addDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_add(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_add");
        var func = Marshal.GetDelegateForFunctionPointer<mk_addDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_mulDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_mul(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_mul");
        var func = Marshal.GetDelegateForFunctionPointer<mk_mulDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_subDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_sub(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_sub");
        var func = Marshal.GetDelegateForFunctionPointer<mk_subDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_unary_minusDelegate(IntPtr c, IntPtr arg);

    internal IntPtr Z3_mk_unary_minus(IntPtr c, IntPtr arg)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_unary_minus");
        var func = Marshal.GetDelegateForFunctionPointer<mk_unary_minusDelegate>(funcPtr);
        return func(c, arg);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_divDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_div(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_div");
        var func = Marshal.GetDelegateForFunctionPointer<mk_divDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_modDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_mod(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_mod");
        var func = Marshal.GetDelegateForFunctionPointer<mk_modDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_remDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_rem(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_rem");
        var func = Marshal.GetDelegateForFunctionPointer<mk_remDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_powerDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_power(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_power");
        var func = Marshal.GetDelegateForFunctionPointer<mk_powerDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_absDelegate(IntPtr c, IntPtr arg);

    internal IntPtr Z3_mk_abs(IntPtr c, IntPtr arg)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_abs");
        var func = Marshal.GetDelegateForFunctionPointer<mk_absDelegate>(funcPtr);
        return func(c, arg);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_ltDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_lt(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_lt");
        var func = Marshal.GetDelegateForFunctionPointer<mk_ltDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_leDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_le(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_le");
        var func = Marshal.GetDelegateForFunctionPointer<mk_leDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_gtDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_gt(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_gt");
        var func = Marshal.GetDelegateForFunctionPointer<mk_gtDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_geDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_ge(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ge");
        var func = Marshal.GetDelegateForFunctionPointer<mk_geDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_dividesDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_divides(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_divides");
        var func = Marshal.GetDelegateForFunctionPointer<mk_dividesDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_int2realDelegate(IntPtr c, IntPtr t1);

    internal IntPtr Z3_mk_int2real(IntPtr c, IntPtr t1)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int2real");
        var func = Marshal.GetDelegateForFunctionPointer<mk_int2realDelegate>(funcPtr);
        return func(c, t1);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_real2intDelegate(IntPtr c, IntPtr t1);

    internal IntPtr Z3_mk_real2int(IntPtr c, IntPtr t1)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_real2int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_real2intDelegate>(funcPtr);
        return func(c, t1);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_is_intDelegate(IntPtr c, IntPtr t1);

    internal IntPtr Z3_mk_is_int(IntPtr c, IntPtr t1)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_is_int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_is_intDelegate>(funcPtr);
        return func(c, t1);
    }

}
