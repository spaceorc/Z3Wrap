// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Solvers
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsSolvers(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_solver");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_simple_solver");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_solver_for_logic");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_solver_from_tactic");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_translate");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_import_model_converter");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_help");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_param_descrs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_set_params");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_interrupt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_push");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_pop");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_reset");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_num_scopes");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_assert");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_assert_and_track");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_from_file");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_from_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_assertions");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_units");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_trail");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_non_units");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_levels");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_congruence_root");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_congruence_next");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_congruence_explain");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_solve_for");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_register_on_clause");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_init");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_fixed");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_final");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_eq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_diseq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_created");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_decide");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_on_binding");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_next_split");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_declare");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_register");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_register_cb");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_propagate_consequence");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_set_initial_value");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_check");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_check_assumptions");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_implied_equalities");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_consequences");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_cube");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_model");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_proof");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_unsat_core");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_reason_unknown");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_get_statistics");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_solver_to_dimacs_string");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_solverDelegate(IntPtr c);

    internal IntPtr Z3_mk_solver(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_solver");
        var func = Marshal.GetDelegateForFunctionPointer<mk_solverDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_simple_solverDelegate(IntPtr c);

    internal IntPtr Z3_mk_simple_solver(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_simple_solver");
        var func = Marshal.GetDelegateForFunctionPointer<mk_simple_solverDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_solver_for_logicDelegate(IntPtr c, IntPtr logic);

    internal IntPtr Z3_mk_solver_for_logic(IntPtr c, IntPtr logic)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_solver_for_logic");
        var func = Marshal.GetDelegateForFunctionPointer<mk_solver_for_logicDelegate>(funcPtr);
        return func(c, logic);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_solver_from_tacticDelegate(IntPtr c, IntPtr t);

    internal IntPtr Z3_mk_solver_from_tactic(IntPtr c, IntPtr t)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_solver_from_tactic");
        var func = Marshal.GetDelegateForFunctionPointer<mk_solver_from_tacticDelegate>(funcPtr);
        return func(c, t);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_translateDelegate(IntPtr source, IntPtr s, IntPtr target);

    internal IntPtr Z3_solver_translate(IntPtr source, IntPtr s, IntPtr target)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_translate");
        var func = Marshal.GetDelegateForFunctionPointer<solver_translateDelegate>(funcPtr);
        return func(source, s, target);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_import_model_converterDelegate(IntPtr ctx, IntPtr src, IntPtr dst);

    internal void Z3_solver_import_model_converter(IntPtr ctx, IntPtr src, IntPtr dst)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_import_model_converter");
        var func = Marshal.GetDelegateForFunctionPointer<solver_import_model_converterDelegate>(funcPtr);
        func(ctx, src, dst);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_helpDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_help(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_help");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_helpDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_param_descrsDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_param_descrs(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_param_descrsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_set_paramsDelegate(IntPtr c, IntPtr s, IntPtr p);

    internal void Z3_solver_set_params(IntPtr c, IntPtr s, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_set_params");
        var func = Marshal.GetDelegateForFunctionPointer<solver_set_paramsDelegate>(funcPtr);
        func(c, s, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_inc_refDelegate(IntPtr c, IntPtr s);

    internal void Z3_solver_inc_ref(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<solver_inc_refDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_dec_refDelegate(IntPtr c, IntPtr s);

    internal void Z3_solver_dec_ref(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<solver_dec_refDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_interruptDelegate(IntPtr c, IntPtr s);

    internal void Z3_solver_interrupt(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_interrupt");
        var func = Marshal.GetDelegateForFunctionPointer<solver_interruptDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_pushDelegate(IntPtr c, IntPtr s);

    internal void Z3_solver_push(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_push");
        var func = Marshal.GetDelegateForFunctionPointer<solver_pushDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_popDelegate(IntPtr c, IntPtr s, uint n);

    internal void Z3_solver_pop(IntPtr c, IntPtr s, uint n)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_pop");
        var func = Marshal.GetDelegateForFunctionPointer<solver_popDelegate>(funcPtr);
        func(c, s, n);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_resetDelegate(IntPtr c, IntPtr s);

    internal void Z3_solver_reset(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_reset");
        var func = Marshal.GetDelegateForFunctionPointer<solver_resetDelegate>(funcPtr);
        func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint solver_get_num_scopesDelegate(IntPtr c, IntPtr s);

    internal uint Z3_solver_get_num_scopes(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_num_scopes");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_num_scopesDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_assertDelegate(IntPtr c, IntPtr s, IntPtr a);

    internal void Z3_solver_assert(IntPtr c, IntPtr s, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_assert");
        var func = Marshal.GetDelegateForFunctionPointer<solver_assertDelegate>(funcPtr);
        func(c, s, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_assert_and_trackDelegate(IntPtr c, IntPtr s, IntPtr a, IntPtr p);

    internal void Z3_solver_assert_and_track(IntPtr c, IntPtr s, IntPtr a, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_assert_and_track");
        var func = Marshal.GetDelegateForFunctionPointer<solver_assert_and_trackDelegate>(funcPtr);
        func(c, s, a, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_from_fileDelegate(IntPtr c, IntPtr s, IntPtr file_name);

    internal void Z3_solver_from_file(IntPtr c, IntPtr s, IntPtr file_name)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_from_file");
        var func = Marshal.GetDelegateForFunctionPointer<solver_from_fileDelegate>(funcPtr);
        func(c, s, file_name);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_from_stringDelegate(IntPtr c, IntPtr s, IntPtr str);

    internal void Z3_solver_from_string(IntPtr c, IntPtr s, IntPtr str)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_from_string");
        var func = Marshal.GetDelegateForFunctionPointer<solver_from_stringDelegate>(funcPtr);
        func(c, s, str);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_assertionsDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_assertions(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_assertions");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_assertionsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_unitsDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_units(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_units");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_unitsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_trailDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_trail(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_trail");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_trailDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_non_unitsDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_non_units(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_non_units");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_non_unitsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_get_levelsDelegate(IntPtr c, IntPtr s, IntPtr literals, uint sz, uint levels);

    internal void Z3_solver_get_levels(IntPtr c, IntPtr s, IntPtr literals, uint sz, uint levels)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_levels");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_levelsDelegate>(funcPtr);
        func(c, s, literals, sz, levels);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_congruence_rootDelegate(IntPtr c, IntPtr s, IntPtr a);

    internal IntPtr Z3_solver_congruence_root(IntPtr c, IntPtr s, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_congruence_root");
        var func = Marshal.GetDelegateForFunctionPointer<solver_congruence_rootDelegate>(funcPtr);
        return func(c, s, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_congruence_nextDelegate(IntPtr c, IntPtr s, IntPtr a);

    internal IntPtr Z3_solver_congruence_next(IntPtr c, IntPtr s, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_congruence_next");
        var func = Marshal.GetDelegateForFunctionPointer<solver_congruence_nextDelegate>(funcPtr);
        return func(c, s, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_congruence_explainDelegate(IntPtr c, IntPtr s, IntPtr a, IntPtr b);

    internal IntPtr Z3_solver_congruence_explain(IntPtr c, IntPtr s, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_congruence_explain");
        var func = Marshal.GetDelegateForFunctionPointer<solver_congruence_explainDelegate>(funcPtr);
        return func(c, s, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_solve_forDelegate(IntPtr c, IntPtr s, IntPtr variables, IntPtr terms, IntPtr guards);

    internal void Z3_solver_solve_for(IntPtr c, IntPtr s, IntPtr variables, IntPtr terms, IntPtr guards)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_solve_for");
        var func = Marshal.GetDelegateForFunctionPointer<solver_solve_forDelegate>(funcPtr);
        func(c, s, variables, terms, guards);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_register_on_clauseDelegate(IntPtr c, IntPtr s, IntPtr user_context, IntPtr on_clause_eh);

    internal void Z3_solver_register_on_clause(IntPtr c, IntPtr s, IntPtr user_context, IntPtr on_clause_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_register_on_clause");
        var func = Marshal.GetDelegateForFunctionPointer<solver_register_on_clauseDelegate>(funcPtr);
        func(c, s, user_context, on_clause_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_initDelegate(IntPtr c, IntPtr s, IntPtr user_context, IntPtr push_eh, IntPtr pop_eh, IntPtr fresh_eh);

    internal void Z3_solver_propagate_init(IntPtr c, IntPtr s, IntPtr user_context, IntPtr push_eh, IntPtr pop_eh, IntPtr fresh_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_init");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_initDelegate>(funcPtr);
        func(c, s, user_context, push_eh, pop_eh, fresh_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_fixedDelegate(IntPtr c, IntPtr s, IntPtr fixed_eh);

    internal void Z3_solver_propagate_fixed(IntPtr c, IntPtr s, IntPtr fixed_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_fixed");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_fixedDelegate>(funcPtr);
        func(c, s, fixed_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_finalDelegate(IntPtr c, IntPtr s, IntPtr final_eh);

    internal void Z3_solver_propagate_final(IntPtr c, IntPtr s, IntPtr final_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_final");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_finalDelegate>(funcPtr);
        func(c, s, final_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_eqDelegate(IntPtr c, IntPtr s, IntPtr eq_eh);

    internal void Z3_solver_propagate_eq(IntPtr c, IntPtr s, IntPtr eq_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_eq");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_eqDelegate>(funcPtr);
        func(c, s, eq_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_diseqDelegate(IntPtr c, IntPtr s, IntPtr eq_eh);

    internal void Z3_solver_propagate_diseq(IntPtr c, IntPtr s, IntPtr eq_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_diseq");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_diseqDelegate>(funcPtr);
        func(c, s, eq_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_createdDelegate(IntPtr c, IntPtr s, IntPtr created_eh);

    internal void Z3_solver_propagate_created(IntPtr c, IntPtr s, IntPtr created_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_created");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_createdDelegate>(funcPtr);
        func(c, s, created_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_decideDelegate(IntPtr c, IntPtr s, IntPtr decide_eh);

    internal void Z3_solver_propagate_decide(IntPtr c, IntPtr s, IntPtr decide_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_decide");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_decideDelegate>(funcPtr);
        func(c, s, decide_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_on_bindingDelegate(IntPtr c, IntPtr s, IntPtr on_binding_eh);

    internal void Z3_solver_propagate_on_binding(IntPtr c, IntPtr s, IntPtr on_binding_eh)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_on_binding");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_on_bindingDelegate>(funcPtr);
        func(c, s, on_binding_eh);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool solver_next_splitDelegate(IntPtr c, IntPtr cb, IntPtr t, uint idx, int phase);

    internal bool Z3_solver_next_split(IntPtr c, IntPtr cb, IntPtr t, uint idx, int phase)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_next_split");
        var func = Marshal.GetDelegateForFunctionPointer<solver_next_splitDelegate>(funcPtr);
        return func(c, cb, t, idx, phase);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_propagate_declareDelegate(IntPtr c, IntPtr name, uint n, IntPtr domain, IntPtr range);

    internal IntPtr Z3_solver_propagate_declare(IntPtr c, IntPtr name, uint n, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_declare");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_declareDelegate>(funcPtr);
        return func(c, name, n, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_registerDelegate(IntPtr c, IntPtr s, IntPtr e);

    internal void Z3_solver_propagate_register(IntPtr c, IntPtr s, IntPtr e)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_register");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_registerDelegate>(funcPtr);
        func(c, s, e);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_propagate_register_cbDelegate(IntPtr c, IntPtr cb, IntPtr e);

    internal void Z3_solver_propagate_register_cb(IntPtr c, IntPtr cb, IntPtr e)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_register_cb");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_register_cbDelegate>(funcPtr);
        func(c, cb, e);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool solver_propagate_consequenceDelegate(IntPtr c, IntPtr cb, uint num_fixed, IntPtr @fixed, uint num_eqs, IntPtr eq_lhs, IntPtr eq_rhs, IntPtr conseq);

    internal bool Z3_solver_propagate_consequence(IntPtr c, IntPtr cb, uint num_fixed, IntPtr @fixed, uint num_eqs, IntPtr eq_lhs, IntPtr eq_rhs, IntPtr conseq)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_propagate_consequence");
        var func = Marshal.GetDelegateForFunctionPointer<solver_propagate_consequenceDelegate>(funcPtr);
        return func(c, cb, num_fixed, @fixed, num_eqs, eq_lhs, eq_rhs, conseq);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void solver_set_initial_valueDelegate(IntPtr c, IntPtr s, IntPtr v, IntPtr val);

    internal void Z3_solver_set_initial_value(IntPtr c, IntPtr s, IntPtr v, IntPtr val)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_set_initial_value");
        var func = Marshal.GetDelegateForFunctionPointer<solver_set_initial_valueDelegate>(funcPtr);
        func(c, s, v, val);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int solver_checkDelegate(IntPtr c, IntPtr s);

    internal int Z3_solver_check(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_check");
        var func = Marshal.GetDelegateForFunctionPointer<solver_checkDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int solver_check_assumptionsDelegate(IntPtr c, IntPtr s, uint num_assumptions, IntPtr assumptions);

    internal int Z3_solver_check_assumptions(IntPtr c, IntPtr s, uint num_assumptions, IntPtr assumptions)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_check_assumptions");
        var func = Marshal.GetDelegateForFunctionPointer<solver_check_assumptionsDelegate>(funcPtr);
        return func(c, s, num_assumptions, assumptions);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int get_implied_equalitiesDelegate(IntPtr c, IntPtr s, uint num_terms, IntPtr terms, uint class_ids);

    internal int Z3_get_implied_equalities(IntPtr c, IntPtr s, uint num_terms, IntPtr terms, uint class_ids)
    {
        var funcPtr = GetFunctionPointer("Z3_get_implied_equalities");
        var func = Marshal.GetDelegateForFunctionPointer<get_implied_equalitiesDelegate>(funcPtr);
        return func(c, s, num_terms, terms, class_ids);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int solver_get_consequencesDelegate(IntPtr c, IntPtr s, IntPtr assumptions, IntPtr variables, IntPtr consequences);

    internal int Z3_solver_get_consequences(IntPtr c, IntPtr s, IntPtr assumptions, IntPtr variables, IntPtr consequences)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_consequences");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_consequencesDelegate>(funcPtr);
        return func(c, s, assumptions, variables, consequences);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_cubeDelegate(IntPtr c, IntPtr s, IntPtr vars, uint backtrack_level);

    internal IntPtr Z3_solver_cube(IntPtr c, IntPtr s, IntPtr vars, uint backtrack_level)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_cube");
        var func = Marshal.GetDelegateForFunctionPointer<solver_cubeDelegate>(funcPtr);
        return func(c, s, vars, backtrack_level);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_modelDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_model(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_model");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_modelDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_proofDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_proof(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_proof");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_proofDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_unsat_coreDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_unsat_core(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_unsat_core");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_unsat_coreDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_reason_unknownDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_reason_unknown(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_reason_unknown");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_reason_unknownDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_get_statisticsDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_get_statistics(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_get_statistics");
        var func = Marshal.GetDelegateForFunctionPointer<solver_get_statisticsDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_to_stringDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_solver_to_string(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<solver_to_stringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr solver_to_dimacs_stringDelegate(IntPtr c, IntPtr s, bool include_names);

    internal IntPtr Z3_solver_to_dimacs_string(IntPtr c, IntPtr s, bool include_names)
    {
        var funcPtr = GetFunctionPointer("Z3_solver_to_dimacs_string");
        var func = Marshal.GetDelegateForFunctionPointer<solver_to_dimacs_stringDelegate>(funcPtr);
        return func(c, s, include_names);
    }

}
