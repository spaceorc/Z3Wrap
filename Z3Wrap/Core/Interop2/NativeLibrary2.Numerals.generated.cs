// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Numerals
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkNumeralDelegate(IntPtr c, IntPtr numeral, IntPtr ty);

    /// <summary>
    /// Create a numeral of a given sort.
    /// </summary>
    [Z3Function("Z3_mk_numeral")]
    internal IntPtr MkNumeral(IntPtr c, IntPtr numeral, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_numeral");
        var func = Marshal.GetDelegateForFunctionPointer<MkNumeralDelegate>(funcPtr);
        return func(c, numeral, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkRealDelegate(IntPtr c, int num, int den);

    /// <summary>
    /// Create a real from a fraction.
    /// </summary>
    [Z3Function("Z3_mk_real")]
    internal IntPtr MkReal(IntPtr c, int num, int den)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_real");
        var func = Marshal.GetDelegateForFunctionPointer<MkRealDelegate>(funcPtr);
        return func(c, num, den);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkRealInt64Delegate(IntPtr c, long num, long den);

    /// <summary>
    /// Create a real from a fraction of int64.
    /// </summary>
    [Z3Function("Z3_mk_real_int64")]
    internal IntPtr MkRealInt64(IntPtr c, long num, long den)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_real_int64");
        var func = Marshal.GetDelegateForFunctionPointer<MkRealInt64Delegate>(funcPtr);
        return func(c, num, den);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkIntDelegate(IntPtr c, int v, IntPtr ty);

    /// <summary>
    /// Create a numeral of an int, bit-vector, or finite-domain sort.
    /// </summary>
    [Z3Function("Z3_mk_int")]
    internal IntPtr MkInt(IntPtr c, int v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int");
        var func = Marshal.GetDelegateForFunctionPointer<MkIntDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkUnsignedIntDelegate(IntPtr c, uint v, IntPtr ty);

    /// <summary>
    /// Create a numeral of a int, bit-vector, or finite-domain sort.
    /// </summary>
    [Z3Function("Z3_mk_unsigned_int")]
    internal IntPtr MkUnsignedInt(IntPtr c, uint v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_unsigned_int");
        var func = Marshal.GetDelegateForFunctionPointer<MkUnsignedIntDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkInt64Delegate(IntPtr c, long v, IntPtr ty);

    /// <summary>
    /// Create a numeral of a int, bit-vector, or finite-domain sort.
    /// </summary>
    [Z3Function("Z3_mk_int64")]
    internal IntPtr MkInt64(IntPtr c, long v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int64");
        var func = Marshal.GetDelegateForFunctionPointer<MkInt64Delegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkUnsignedInt64Delegate(IntPtr c, ulong v, IntPtr ty);

    /// <summary>
    /// Create a numeral of a int, bit-vector, or finite-domain sort.
    /// </summary>
    [Z3Function("Z3_mk_unsigned_int64")]
    internal IntPtr MkUnsignedInt64(IntPtr c, ulong v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_unsigned_int64");
        var func = Marshal.GetDelegateForFunctionPointer<MkUnsignedInt64Delegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkBvNumeralDelegate(IntPtr c, uint sz, IntPtr bits);

    /// <summary>
    /// create a bit-vector numeral from a vector of Booleans.
    /// </summary>
    [Z3Function("Z3_mk_bv_numeral")]
    internal IntPtr MkBvNumeral(IntPtr c, uint sz, IntPtr bits)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_bv_numeral");
        var func = Marshal.GetDelegateForFunctionPointer<MkBvNumeralDelegate>(funcPtr);
        return func(c, sz, bits);
    }

}
