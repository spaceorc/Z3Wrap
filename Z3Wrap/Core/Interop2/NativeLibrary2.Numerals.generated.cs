// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Numerals
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsNumerals(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_numeral");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_real");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_real_int64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_int");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_unsigned_int");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_int64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_unsigned_int64");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_bv_numeral");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_numeralDelegate(IntPtr c, IntPtr numeral, IntPtr ty);

    internal IntPtr Z3_mk_numeral(IntPtr c, IntPtr numeral, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_numeral");
        var func = Marshal.GetDelegateForFunctionPointer<mk_numeralDelegate>(funcPtr);
        return func(c, numeral, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_realDelegate(IntPtr c, int num, int den);

    internal IntPtr Z3_mk_real(IntPtr c, int num, int den)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_real");
        var func = Marshal.GetDelegateForFunctionPointer<mk_realDelegate>(funcPtr);
        return func(c, num, den);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_real_int64Delegate(IntPtr c, long num, long den);

    internal IntPtr Z3_mk_real_int64(IntPtr c, long num, long den)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_real_int64");
        var func = Marshal.GetDelegateForFunctionPointer<mk_real_int64Delegate>(funcPtr);
        return func(c, num, den);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_intDelegate(IntPtr c, int v, IntPtr ty);

    internal IntPtr Z3_mk_int(IntPtr c, int v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_intDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_unsigned_intDelegate(IntPtr c, uint v, IntPtr ty);

    internal IntPtr Z3_mk_unsigned_int(IntPtr c, uint v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_unsigned_int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_unsigned_intDelegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_int64Delegate(IntPtr c, long v, IntPtr ty);

    internal IntPtr Z3_mk_int64(IntPtr c, long v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int64");
        var func = Marshal.GetDelegateForFunctionPointer<mk_int64Delegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_unsigned_int64Delegate(IntPtr c, ulong v, IntPtr ty);

    internal IntPtr Z3_mk_unsigned_int64(IntPtr c, ulong v, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_unsigned_int64");
        var func = Marshal.GetDelegateForFunctionPointer<mk_unsigned_int64Delegate>(funcPtr);
        return func(c, v, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_bv_numeralDelegate(IntPtr c, uint sz, IntPtr bits);

    internal IntPtr Z3_mk_bv_numeral(IntPtr c, uint sz, IntPtr bits)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_bv_numeral");
        var func = Marshal.GetDelegateForFunctionPointer<mk_bv_numeralDelegate>(funcPtr);
        return func(c, sz, bits);
    }

}
