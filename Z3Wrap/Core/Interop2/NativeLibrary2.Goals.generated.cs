// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Goals
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsGoals(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_goal");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_precision");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_assert");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_inconsistent");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_depth");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_reset");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_size");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_formula");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_num_exprs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_is_decided_sat");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_is_decided_unsat");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_translate");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_convert_model");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_goal_to_dimacs_string");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_goalDelegate(IntPtr c, bool models, bool unsat_cores, bool proofs);

    internal IntPtr Z3_mk_goal(IntPtr c, bool models, bool unsat_cores, bool proofs)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_goal");
        var func = Marshal.GetDelegateForFunctionPointer<mk_goalDelegate>(funcPtr);
        return func(c, models, unsat_cores, proofs);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void goal_inc_refDelegate(IntPtr c, IntPtr g);

    internal void Z3_goal_inc_ref(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<goal_inc_refDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void goal_dec_refDelegate(IntPtr c, IntPtr g);

    internal void Z3_goal_dec_ref(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<goal_dec_refDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int goal_precisionDelegate(IntPtr c, IntPtr g);

    internal int Z3_goal_precision(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_precision");
        var func = Marshal.GetDelegateForFunctionPointer<goal_precisionDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void goal_assertDelegate(IntPtr c, IntPtr g, IntPtr a);

    internal void Z3_goal_assert(IntPtr c, IntPtr g, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_assert");
        var func = Marshal.GetDelegateForFunctionPointer<goal_assertDelegate>(funcPtr);
        func(c, g, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool goal_inconsistentDelegate(IntPtr c, IntPtr g);

    internal bool Z3_goal_inconsistent(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_inconsistent");
        var func = Marshal.GetDelegateForFunctionPointer<goal_inconsistentDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint goal_depthDelegate(IntPtr c, IntPtr g);

    internal uint Z3_goal_depth(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_depth");
        var func = Marshal.GetDelegateForFunctionPointer<goal_depthDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void goal_resetDelegate(IntPtr c, IntPtr g);

    internal void Z3_goal_reset(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_reset");
        var func = Marshal.GetDelegateForFunctionPointer<goal_resetDelegate>(funcPtr);
        func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint goal_sizeDelegate(IntPtr c, IntPtr g);

    internal uint Z3_goal_size(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_size");
        var func = Marshal.GetDelegateForFunctionPointer<goal_sizeDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr goal_formulaDelegate(IntPtr c, IntPtr g, uint idx);

    internal IntPtr Z3_goal_formula(IntPtr c, IntPtr g, uint idx)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_formula");
        var func = Marshal.GetDelegateForFunctionPointer<goal_formulaDelegate>(funcPtr);
        return func(c, g, idx);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint goal_num_exprsDelegate(IntPtr c, IntPtr g);

    internal uint Z3_goal_num_exprs(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_num_exprs");
        var func = Marshal.GetDelegateForFunctionPointer<goal_num_exprsDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool goal_is_decided_satDelegate(IntPtr c, IntPtr g);

    internal bool Z3_goal_is_decided_sat(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_is_decided_sat");
        var func = Marshal.GetDelegateForFunctionPointer<goal_is_decided_satDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool goal_is_decided_unsatDelegate(IntPtr c, IntPtr g);

    internal bool Z3_goal_is_decided_unsat(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_is_decided_unsat");
        var func = Marshal.GetDelegateForFunctionPointer<goal_is_decided_unsatDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr goal_translateDelegate(IntPtr source, IntPtr g, IntPtr target);

    internal IntPtr Z3_goal_translate(IntPtr source, IntPtr g, IntPtr target)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_translate");
        var func = Marshal.GetDelegateForFunctionPointer<goal_translateDelegate>(funcPtr);
        return func(source, g, target);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr goal_convert_modelDelegate(IntPtr c, IntPtr g, IntPtr m);

    internal IntPtr Z3_goal_convert_model(IntPtr c, IntPtr g, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_convert_model");
        var func = Marshal.GetDelegateForFunctionPointer<goal_convert_modelDelegate>(funcPtr);
        return func(c, g, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr goal_to_stringDelegate(IntPtr c, IntPtr g);

    internal IntPtr Z3_goal_to_string(IntPtr c, IntPtr g)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<goal_to_stringDelegate>(funcPtr);
        return func(c, g);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr goal_to_dimacs_stringDelegate(IntPtr c, IntPtr g, bool include_names);

    internal IntPtr Z3_goal_to_dimacs_string(IntPtr c, IntPtr g, bool include_names)
    {
        var funcPtr = GetFunctionPointer("Z3_goal_to_dimacs_string");
        var func = Marshal.GetDelegateForFunctionPointer<goal_to_dimacs_stringDelegate>(funcPtr);
        return func(c, g, include_names);
    }

}
