// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Context and AST Reference Counting
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkContextDelegate(IntPtr c);

    /// <summary>
    /// Create a context using the given configuration.
    /// </summary>
    [Z3Function("Z3_mk_context")]
    internal IntPtr MkContext(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_context");
        var func = Marshal.GetDelegateForFunctionPointer<MkContextDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkContextRcDelegate(IntPtr c);

    /// <summary>
    /// Create a context using the given configuration. This function is similar to #Z3_mk_context. However, in the context returned by this function, the user is responsible for managing
    /// </summary>
    [Z3Function("Z3_mk_context_rc")]
    internal IntPtr MkContextRc(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_context_rc");
        var func = Marshal.GetDelegateForFunctionPointer<MkContextRcDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void DelContextDelegate(IntPtr c);

    /// <summary>
    /// Delete the given logical context.
    /// </summary>
    [Z3Function("Z3_del_context")]
    internal void DelContext(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_del_context");
        var func = Marshal.GetDelegateForFunctionPointer<DelContextDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void IncRefDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Increment the reference counter of the given AST. The context
    /// </summary>
    [Z3Function("Z3_inc_ref")]
    internal void IncRef(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<IncRefDelegate>(funcPtr);
        func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void DecRefDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Decrement the reference counter of the given AST. The context
    /// </summary>
    [Z3Function("Z3_dec_ref")]
    internal void DecRef(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<DecRefDelegate>(funcPtr);
        func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void UpdateParamValueDelegate(IntPtr c, IntPtr param_id, IntPtr param_value);

    /// <summary>
    /// Set a value of a context parameter.
    /// </summary>
    [Z3Function("Z3_update_param_value")]
    internal void UpdateParamValue(IntPtr c, IntPtr param_id, IntPtr param_value)
    {
        var funcPtr = GetFunctionPointer("Z3_update_param_value");
        var func = Marshal.GetDelegateForFunctionPointer<UpdateParamValueDelegate>(funcPtr);
        func(c, param_id, param_value);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr GetGlobalParamDescrsDelegate(IntPtr c);

    /// <summary>
    /// Retrieve description of global parameters.
    /// </summary>
    [Z3Function("Z3_get_global_param_descrs")]
    internal IntPtr GetGlobalParamDescrs(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_global_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<GetGlobalParamDescrsDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void InterruptDelegate(IntPtr c);

    /// <summary>
    /// Interrupt the execution of a Z3 procedure. This procedure can be used to interrupt: solvers, simplifiers and tactics.
    /// </summary>
    [Z3Function("Z3_interrupt")]
    internal void Interrupt(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_interrupt");
        var func = Marshal.GetDelegateForFunctionPointer<InterruptDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void EnableConcurrentDecRefDelegate(IntPtr c);

    /// <summary>
    /// use concurrency control for dec-ref. Reference counting decrements are allowed in separate threads from the context. If this setting is not invoked, reference counting decrements are not going to be thread safe.
    /// </summary>
    [Z3Function("Z3_enable_concurrent_dec_ref")]
    internal void EnableConcurrentDecRef(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_enable_concurrent_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<EnableConcurrentDecRefDelegate>(funcPtr);
        func(c);
    }

}
