// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Context and AST Reference Counting
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsContextAndAstReferenceCounting(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_context");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_context_rc");
        LoadFunctionOrNull(handle, functionPointers, "Z3_del_context");
        LoadFunctionOrNull(handle, functionPointers, "Z3_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_update_param_value");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_global_param_descrs");
        LoadFunctionOrNull(handle, functionPointers, "Z3_interrupt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_enable_concurrent_dec_ref");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_contextDelegate(IntPtr c);

    internal IntPtr Z3_mk_context(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_context");
        var func = Marshal.GetDelegateForFunctionPointer<mk_contextDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_context_rcDelegate(IntPtr c);

    internal IntPtr Z3_mk_context_rc(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_context_rc");
        var func = Marshal.GetDelegateForFunctionPointer<mk_context_rcDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void del_contextDelegate(IntPtr c);

    internal void Z3_del_context(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_del_context");
        var func = Marshal.GetDelegateForFunctionPointer<del_contextDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void inc_refDelegate(IntPtr c, IntPtr a);

    internal void Z3_inc_ref(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<inc_refDelegate>(funcPtr);
        func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void dec_refDelegate(IntPtr c, IntPtr a);

    internal void Z3_dec_ref(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<dec_refDelegate>(funcPtr);
        func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void update_param_valueDelegate(IntPtr c, IntPtr param_id, IntPtr param_value);

    internal void Z3_update_param_value(IntPtr c, IntPtr param_id, IntPtr param_value)
    {
        var funcPtr = GetFunctionPointer("Z3_update_param_value");
        var func = Marshal.GetDelegateForFunctionPointer<update_param_valueDelegate>(funcPtr);
        func(c, param_id, param_value);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_global_param_descrsDelegate(IntPtr c);

    internal IntPtr Z3_get_global_param_descrs(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_get_global_param_descrs");
        var func = Marshal.GetDelegateForFunctionPointer<get_global_param_descrsDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void interruptDelegate(IntPtr c);

    internal void Z3_interrupt(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_interrupt");
        var func = Marshal.GetDelegateForFunctionPointer<interruptDelegate>(funcPtr);
        func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void enable_concurrent_dec_refDelegate(IntPtr c);

    internal void Z3_enable_concurrent_dec_ref(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_enable_concurrent_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<enable_concurrent_dec_refDelegate>(funcPtr);
        func(c);
    }

}
