// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Constants and Applications
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFuncDeclDelegate(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range);

    /// <summary>
    /// Declare a constant or function.
    /// </summary>
    [Z3Function("Z3_mk_func_decl")]
    internal IntPtr MkFuncDecl(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<MkFuncDeclDelegate>(funcPtr);
        return func(c, s, domain_size, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkAppDelegate(IntPtr c, IntPtr d, uint num_args, IntPtr args);

    /// <summary>
    /// Create a constant or function application.
    /// </summary>
    [Z3Function("Z3_mk_app")]
    internal IntPtr MkApp(IntPtr c, IntPtr d, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_app");
        var func = Marshal.GetDelegateForFunctionPointer<MkAppDelegate>(funcPtr);
        return func(c, d, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkConstDelegate(IntPtr c, IntPtr s, IntPtr ty);

    /// <summary>
    /// Declare and create a constant.
    /// </summary>
    [Z3Function("Z3_mk_const")]
    internal IntPtr MkConst(IntPtr c, IntPtr s, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_const");
        var func = Marshal.GetDelegateForFunctionPointer<MkConstDelegate>(funcPtr);
        return func(c, s, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFreshFuncDeclDelegate(IntPtr c, IntPtr prefix, uint domain_size, IntPtr domain, IntPtr range);

    /// <summary>
    /// Declare a fresh constant or function.
    /// </summary>
    [Z3Function("Z3_mk_fresh_func_decl")]
    internal IntPtr MkFreshFuncDecl(IntPtr c, IntPtr prefix, uint domain_size, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fresh_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<MkFreshFuncDeclDelegate>(funcPtr);
        return func(c, prefix, domain_size, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkFreshConstDelegate(IntPtr c, IntPtr prefix, IntPtr ty);

    /// <summary>
    /// Declare and create a fresh constant.
    /// </summary>
    [Z3Function("Z3_mk_fresh_const")]
    internal IntPtr MkFreshConst(IntPtr c, IntPtr prefix, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fresh_const");
        var func = Marshal.GetDelegateForFunctionPointer<MkFreshConstDelegate>(funcPtr);
        return func(c, prefix, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkRecFuncDeclDelegate(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range);

    /// <summary>
    /// Declare a recursive function
    /// </summary>
    [Z3Function("Z3_mk_rec_func_decl")]
    internal IntPtr MkRecFuncDecl(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_rec_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<MkRecFuncDeclDelegate>(funcPtr);
        return func(c, s, domain_size, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AddRecDefDelegate(IntPtr c, IntPtr f, uint n, IntPtr args, IntPtr body);

    /// <summary>
    /// Define the body of a recursive function.
    /// </summary>
    [Z3Function("Z3_add_rec_def")]
    internal void AddRecDef(IntPtr c, IntPtr f, uint n, IntPtr args, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_add_rec_def");
        var func = Marshal.GetDelegateForFunctionPointer<AddRecDefDelegate>(funcPtr);
        func(c, f, n, args, body);
    }

}
