// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Constants and Applications
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsConstantsAndApplications(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_func_decl");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_app");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_const");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fresh_func_decl");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_fresh_const");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_rec_func_decl");
        LoadFunctionOrNull(handle, functionPointers, "Z3_add_rec_def");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_func_declDelegate(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range);

    internal IntPtr Z3_mk_func_decl(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<mk_func_declDelegate>(funcPtr);
        return func(c, s, domain_size, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_appDelegate(IntPtr c, IntPtr d, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_app(IntPtr c, IntPtr d, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_app");
        var func = Marshal.GetDelegateForFunctionPointer<mk_appDelegate>(funcPtr);
        return func(c, d, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_constDelegate(IntPtr c, IntPtr s, IntPtr ty);

    internal IntPtr Z3_mk_const(IntPtr c, IntPtr s, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_const");
        var func = Marshal.GetDelegateForFunctionPointer<mk_constDelegate>(funcPtr);
        return func(c, s, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fresh_func_declDelegate(IntPtr c, IntPtr prefix, uint domain_size, IntPtr domain, IntPtr range);

    internal IntPtr Z3_mk_fresh_func_decl(IntPtr c, IntPtr prefix, uint domain_size, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fresh_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fresh_func_declDelegate>(funcPtr);
        return func(c, prefix, domain_size, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_fresh_constDelegate(IntPtr c, IntPtr prefix, IntPtr ty);

    internal IntPtr Z3_mk_fresh_const(IntPtr c, IntPtr prefix, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_fresh_const");
        var func = Marshal.GetDelegateForFunctionPointer<mk_fresh_constDelegate>(funcPtr);
        return func(c, prefix, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_rec_func_declDelegate(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range);

    internal IntPtr Z3_mk_rec_func_decl(IntPtr c, IntPtr s, uint domain_size, IntPtr domain, IntPtr range)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_rec_func_decl");
        var func = Marshal.GetDelegateForFunctionPointer<mk_rec_func_declDelegate>(funcPtr);
        return func(c, s, domain_size, domain, range);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void add_rec_defDelegate(IntPtr c, IntPtr f, uint n, IntPtr args, IntPtr body);

    internal void Z3_add_rec_def(IntPtr c, IntPtr f, uint n, IntPtr args, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_add_rec_def");
        var func = Marshal.GetDelegateForFunctionPointer<add_rec_defDelegate>(funcPtr);
        func(c, f, n, args, body);
    }

}
