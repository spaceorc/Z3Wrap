// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Quantifiers
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsQuantifiers(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_pattern");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_bound");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_forall");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_exists");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_quantifier");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_quantifier_ex");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_forall_const");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_exists_const");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_quantifier_const");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_quantifier_const_ex");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_lambda");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_lambda_const");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_patternDelegate(IntPtr c, uint num_patterns, IntPtr terms);

    internal IntPtr Z3_mk_pattern(IntPtr c, uint num_patterns, IntPtr terms)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_pattern");
        var func = Marshal.GetDelegateForFunctionPointer<mk_patternDelegate>(funcPtr);
        return func(c, num_patterns, terms);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_boundDelegate(IntPtr c, uint index, IntPtr ty);

    internal IntPtr Z3_mk_bound(IntPtr c, uint index, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_bound");
        var func = Marshal.GetDelegateForFunctionPointer<mk_boundDelegate>(funcPtr);
        return func(c, index, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_forallDelegate(IntPtr c, uint weight, uint num_patterns, IntPtr patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body);

    internal IntPtr Z3_mk_forall(IntPtr c, uint weight, uint num_patterns, IntPtr patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_forall");
        var func = Marshal.GetDelegateForFunctionPointer<mk_forallDelegate>(funcPtr);
        return func(c, weight, num_patterns, patterns, num_decls, sorts, decl_names, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_existsDelegate(IntPtr c, uint weight, uint num_patterns, IntPtr patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body);

    internal IntPtr Z3_mk_exists(IntPtr c, uint weight, uint num_patterns, IntPtr patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_exists");
        var func = Marshal.GetDelegateForFunctionPointer<mk_existsDelegate>(funcPtr);
        return func(c, weight, num_patterns, patterns, num_decls, sorts, decl_names, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_quantifierDelegate(IntPtr c, bool is_forall, uint weight, uint num_patterns, IntPtr patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body);

    internal IntPtr Z3_mk_quantifier(IntPtr c, bool is_forall, uint weight, uint num_patterns, IntPtr patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_quantifier");
        var func = Marshal.GetDelegateForFunctionPointer<mk_quantifierDelegate>(funcPtr);
        return func(c, is_forall, weight, num_patterns, patterns, num_decls, sorts, decl_names, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_quantifier_exDelegate(IntPtr c, bool is_forall, uint weight, IntPtr quantifier_id, IntPtr skolem_id, uint num_patterns, IntPtr patterns, uint num_no_patterns, IntPtr no_patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body);

    internal IntPtr Z3_mk_quantifier_ex(IntPtr c, bool is_forall, uint weight, IntPtr quantifier_id, IntPtr skolem_id, uint num_patterns, IntPtr patterns, uint num_no_patterns, IntPtr no_patterns, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_quantifier_ex");
        var func = Marshal.GetDelegateForFunctionPointer<mk_quantifier_exDelegate>(funcPtr);
        return func(c, is_forall, weight, quantifier_id, skolem_id, num_patterns, patterns, num_no_patterns, no_patterns, num_decls, sorts, decl_names, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_forall_constDelegate(IntPtr c, uint weight, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, IntPtr body);

    internal IntPtr Z3_mk_forall_const(IntPtr c, uint weight, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_forall_const");
        var func = Marshal.GetDelegateForFunctionPointer<mk_forall_constDelegate>(funcPtr);
        return func(c, weight, num_bound, bound, num_patterns, patterns, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_exists_constDelegate(IntPtr c, uint weight, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, IntPtr body);

    internal IntPtr Z3_mk_exists_const(IntPtr c, uint weight, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_exists_const");
        var func = Marshal.GetDelegateForFunctionPointer<mk_exists_constDelegate>(funcPtr);
        return func(c, weight, num_bound, bound, num_patterns, patterns, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_quantifier_constDelegate(IntPtr c, bool is_forall, uint weight, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, IntPtr body);

    internal IntPtr Z3_mk_quantifier_const(IntPtr c, bool is_forall, uint weight, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_quantifier_const");
        var func = Marshal.GetDelegateForFunctionPointer<mk_quantifier_constDelegate>(funcPtr);
        return func(c, is_forall, weight, num_bound, bound, num_patterns, patterns, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_quantifier_const_exDelegate(IntPtr c, bool is_forall, uint weight, IntPtr quantifier_id, IntPtr skolem_id, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, uint num_no_patterns, IntPtr no_patterns, IntPtr body);

    internal IntPtr Z3_mk_quantifier_const_ex(IntPtr c, bool is_forall, uint weight, IntPtr quantifier_id, IntPtr skolem_id, uint num_bound, IntPtr bound, uint num_patterns, IntPtr patterns, uint num_no_patterns, IntPtr no_patterns, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_quantifier_const_ex");
        var func = Marshal.GetDelegateForFunctionPointer<mk_quantifier_const_exDelegate>(funcPtr);
        return func(c, is_forall, weight, quantifier_id, skolem_id, num_bound, bound, num_patterns, patterns, num_no_patterns, no_patterns, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_lambdaDelegate(IntPtr c, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body);

    internal IntPtr Z3_mk_lambda(IntPtr c, uint num_decls, IntPtr sorts, IntPtr decl_names, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_lambda");
        var func = Marshal.GetDelegateForFunctionPointer<mk_lambdaDelegate>(funcPtr);
        return func(c, num_decls, sorts, decl_names, body);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_lambda_constDelegate(IntPtr c, uint num_bound, IntPtr bound, IntPtr body);

    internal IntPtr Z3_mk_lambda_const(IntPtr c, uint num_bound, IntPtr bound, IntPtr body)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_lambda_const");
        var func = Marshal.GetDelegateForFunctionPointer<mk_lambda_constDelegate>(funcPtr);
        return func(c, num_bound, bound, body);
    }

}
