// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Modifiers
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr UpdateTermDelegate(IntPtr c, IntPtr a, uint num_args, IntPtr args);

    /// <summary>
    /// Update the arguments of term
    /// </summary>
    [Z3Function("Z3_update_term")]
    internal IntPtr UpdateTerm(IntPtr c, IntPtr a, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_update_term");
        var func = Marshal.GetDelegateForFunctionPointer<UpdateTermDelegate>(funcPtr);
        return func(c, a, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SubstituteDelegate(IntPtr c, IntPtr a, uint num_exprs, IntPtr from, IntPtr to);

    /// <summary>
    /// Substitute every occurrence of
    /// </summary>
    [Z3Function("Z3_substitute")]
    internal IntPtr Substitute(IntPtr c, IntPtr a, uint num_exprs, IntPtr from, IntPtr to)
    {
        var funcPtr = GetFunctionPointer("Z3_substitute");
        var func = Marshal.GetDelegateForFunctionPointer<SubstituteDelegate>(funcPtr);
        return func(c, a, num_exprs, from, to);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SubstituteVarsDelegate(IntPtr c, IntPtr a, uint num_exprs, IntPtr to);

    /// <summary>
    /// Substitute the variables in
    /// </summary>
    [Z3Function("Z3_substitute_vars")]
    internal IntPtr SubstituteVars(IntPtr c, IntPtr a, uint num_exprs, IntPtr to)
    {
        var funcPtr = GetFunctionPointer("Z3_substitute_vars");
        var func = Marshal.GetDelegateForFunctionPointer<SubstituteVarsDelegate>(funcPtr);
        return func(c, a, num_exprs, to);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SubstituteFunsDelegate(IntPtr c, IntPtr a, uint num_funs, IntPtr from, IntPtr to);

    /// <summary>
    /// Substitute functions in
    /// </summary>
    [Z3Function("Z3_substitute_funs")]
    internal IntPtr SubstituteFuns(IntPtr c, IntPtr a, uint num_funs, IntPtr from, IntPtr to)
    {
        var funcPtr = GetFunctionPointer("Z3_substitute_funs");
        var func = Marshal.GetDelegateForFunctionPointer<SubstituteFunsDelegate>(funcPtr);
        return func(c, a, num_funs, from, to);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr TranslateDelegate(IntPtr source, IntPtr a, IntPtr target);

    /// <summary>
    /// Translate/Copy the AST
    /// </summary>
    [Z3Function("Z3_translate")]
    internal IntPtr Translate(IntPtr source, IntPtr a, IntPtr target)
    {
        var funcPtr = GetFunctionPointer("Z3_translate");
        var func = Marshal.GetDelegateForFunctionPointer<TranslateDelegate>(funcPtr);
        return func(source, a, target);
    }

}
