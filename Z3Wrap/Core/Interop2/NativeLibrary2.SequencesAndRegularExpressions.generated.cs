// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Sequences and regular expressions
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsSequencesAndRegularExpressions(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_is_seq_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_seq_sort_basis");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_is_re_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_re_sort_basis");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_string_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_is_string_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_is_char_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_lstring");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_u32string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_is_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_lstring");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_string_length");
        LoadFunctionOrNull(handle, functionPointers, "Z3_get_string_contents");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_empty");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_unit");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_concat");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_prefix");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_suffix");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_contains");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_str_lt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_str_le");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_extract");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_replace");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_at");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_nth");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_length");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_index");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_last_index");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_map");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_mapi");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_foldl");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_foldli");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_str_to_int");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_int_to_str");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_string_to_code");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_string_from_code");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_ubv_to_str");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_sbv_to_str");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_to_re");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_seq_in_re");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_plus");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_star");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_option");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_union");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_concat");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_range");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_allchar");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_loop");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_power");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_intersect");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_complement");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_diff");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_empty");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_re_full");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char_le");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char_to_int");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char_to_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char_from_bv");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_char_is_digit");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_sortDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_seq_sort(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_sortDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool is_seq_sortDelegate(IntPtr c, IntPtr s);

    internal bool Z3_is_seq_sort(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_is_seq_sort");
        var func = Marshal.GetDelegateForFunctionPointer<is_seq_sortDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_seq_sort_basisDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_get_seq_sort_basis(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_seq_sort_basis");
        var func = Marshal.GetDelegateForFunctionPointer<get_seq_sort_basisDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_sortDelegate(IntPtr c, IntPtr seq);

    internal IntPtr Z3_mk_re_sort(IntPtr c, IntPtr seq)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_sortDelegate>(funcPtr);
        return func(c, seq);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool is_re_sortDelegate(IntPtr c, IntPtr s);

    internal bool Z3_is_re_sort(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_is_re_sort");
        var func = Marshal.GetDelegateForFunctionPointer<is_re_sortDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_re_sort_basisDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_get_re_sort_basis(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_re_sort_basis");
        var func = Marshal.GetDelegateForFunctionPointer<get_re_sort_basisDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_string_sortDelegate(IntPtr c);

    internal IntPtr Z3_mk_string_sort(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_string_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_string_sortDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_char_sortDelegate(IntPtr c);

    internal IntPtr Z3_mk_char_sort(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_char_sortDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool is_string_sortDelegate(IntPtr c, IntPtr s);

    internal bool Z3_is_string_sort(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_is_string_sort");
        var func = Marshal.GetDelegateForFunctionPointer<is_string_sortDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool is_char_sortDelegate(IntPtr c, IntPtr s);

    internal bool Z3_is_char_sort(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_is_char_sort");
        var func = Marshal.GetDelegateForFunctionPointer<is_char_sortDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_stringDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_string(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_string");
        var func = Marshal.GetDelegateForFunctionPointer<mk_stringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_lstringDelegate(IntPtr c, uint len, IntPtr s);

    internal IntPtr Z3_mk_lstring(IntPtr c, uint len, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_lstring");
        var func = Marshal.GetDelegateForFunctionPointer<mk_lstringDelegate>(funcPtr);
        return func(c, len, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_u32stringDelegate(IntPtr c, uint len, uint chars);

    internal IntPtr Z3_mk_u32string(IntPtr c, uint len, uint chars)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_u32string");
        var func = Marshal.GetDelegateForFunctionPointer<mk_u32stringDelegate>(funcPtr);
        return func(c, len, chars);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool is_stringDelegate(IntPtr c, IntPtr s);

    internal bool Z3_is_string(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_is_string");
        var func = Marshal.GetDelegateForFunctionPointer<is_stringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_stringDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_get_string(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_string");
        var func = Marshal.GetDelegateForFunctionPointer<get_stringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr get_lstringDelegate(IntPtr c, IntPtr s, IntPtr length);

    internal IntPtr Z3_get_lstring(IntPtr c, IntPtr s, IntPtr length)
    {
        var funcPtr = GetFunctionPointer("Z3_get_lstring");
        var func = Marshal.GetDelegateForFunctionPointer<get_lstringDelegate>(funcPtr);
        return func(c, s, length);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint get_string_lengthDelegate(IntPtr c, IntPtr s);

    internal uint Z3_get_string_length(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_get_string_length");
        var func = Marshal.GetDelegateForFunctionPointer<get_string_lengthDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void get_string_contentsDelegate(IntPtr c, IntPtr s, uint length, uint contents);

    internal void Z3_get_string_contents(IntPtr c, IntPtr s, uint length, uint contents)
    {
        var funcPtr = GetFunctionPointer("Z3_get_string_contents");
        var func = Marshal.GetDelegateForFunctionPointer<get_string_contentsDelegate>(funcPtr);
        func(c, s, length, contents);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_emptyDelegate(IntPtr c, IntPtr seq);

    internal IntPtr Z3_mk_seq_empty(IntPtr c, IntPtr seq)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_empty");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_emptyDelegate>(funcPtr);
        return func(c, seq);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_unitDelegate(IntPtr c, IntPtr a);

    internal IntPtr Z3_mk_seq_unit(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_unit");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_unitDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_concatDelegate(IntPtr c, uint n, IntPtr args);

    internal IntPtr Z3_mk_seq_concat(IntPtr c, uint n, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_concat");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_concatDelegate>(funcPtr);
        return func(c, n, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_prefixDelegate(IntPtr c, IntPtr prefix, IntPtr s);

    internal IntPtr Z3_mk_seq_prefix(IntPtr c, IntPtr prefix, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_prefix");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_prefixDelegate>(funcPtr);
        return func(c, prefix, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_suffixDelegate(IntPtr c, IntPtr suffix, IntPtr s);

    internal IntPtr Z3_mk_seq_suffix(IntPtr c, IntPtr suffix, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_suffix");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_suffixDelegate>(funcPtr);
        return func(c, suffix, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_containsDelegate(IntPtr c, IntPtr container, IntPtr containee);

    internal IntPtr Z3_mk_seq_contains(IntPtr c, IntPtr container, IntPtr containee)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_contains");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_containsDelegate>(funcPtr);
        return func(c, container, containee);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_str_ltDelegate(IntPtr c, IntPtr prefix, IntPtr s);

    internal IntPtr Z3_mk_str_lt(IntPtr c, IntPtr prefix, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_str_lt");
        var func = Marshal.GetDelegateForFunctionPointer<mk_str_ltDelegate>(funcPtr);
        return func(c, prefix, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_str_leDelegate(IntPtr c, IntPtr prefix, IntPtr s);

    internal IntPtr Z3_mk_str_le(IntPtr c, IntPtr prefix, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_str_le");
        var func = Marshal.GetDelegateForFunctionPointer<mk_str_leDelegate>(funcPtr);
        return func(c, prefix, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_extractDelegate(IntPtr c, IntPtr s, IntPtr offset, IntPtr length);

    internal IntPtr Z3_mk_seq_extract(IntPtr c, IntPtr s, IntPtr offset, IntPtr length)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_extract");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_extractDelegate>(funcPtr);
        return func(c, s, offset, length);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_replaceDelegate(IntPtr c, IntPtr s, IntPtr src, IntPtr dst);

    internal IntPtr Z3_mk_seq_replace(IntPtr c, IntPtr s, IntPtr src, IntPtr dst)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_replace");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_replaceDelegate>(funcPtr);
        return func(c, s, src, dst);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_atDelegate(IntPtr c, IntPtr s, IntPtr index);

    internal IntPtr Z3_mk_seq_at(IntPtr c, IntPtr s, IntPtr index)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_at");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_atDelegate>(funcPtr);
        return func(c, s, index);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_nthDelegate(IntPtr c, IntPtr s, IntPtr index);

    internal IntPtr Z3_mk_seq_nth(IntPtr c, IntPtr s, IntPtr index)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_nth");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_nthDelegate>(funcPtr);
        return func(c, s, index);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_lengthDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_seq_length(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_length");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_lengthDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_indexDelegate(IntPtr c, IntPtr s, IntPtr substr, IntPtr offset);

    internal IntPtr Z3_mk_seq_index(IntPtr c, IntPtr s, IntPtr substr, IntPtr offset)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_index");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_indexDelegate>(funcPtr);
        return func(c, s, substr, offset);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_last_indexDelegate(IntPtr c, IntPtr s, IntPtr substr);

    internal IntPtr Z3_mk_seq_last_index(IntPtr c, IntPtr s, IntPtr substr)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_last_index");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_last_indexDelegate>(funcPtr);
        return func(c, s, substr);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_mapDelegate(IntPtr c, IntPtr f, IntPtr s);

    internal IntPtr Z3_mk_seq_map(IntPtr c, IntPtr f, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_map");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_mapDelegate>(funcPtr);
        return func(c, f, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_mapiDelegate(IntPtr c, IntPtr f, IntPtr i, IntPtr s);

    internal IntPtr Z3_mk_seq_mapi(IntPtr c, IntPtr f, IntPtr i, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_mapi");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_mapiDelegate>(funcPtr);
        return func(c, f, i, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_foldlDelegate(IntPtr c, IntPtr f, IntPtr a, IntPtr s);

    internal IntPtr Z3_mk_seq_foldl(IntPtr c, IntPtr f, IntPtr a, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_foldl");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_foldlDelegate>(funcPtr);
        return func(c, f, a, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_foldliDelegate(IntPtr c, IntPtr f, IntPtr i, IntPtr a, IntPtr s);

    internal IntPtr Z3_mk_seq_foldli(IntPtr c, IntPtr f, IntPtr i, IntPtr a, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_foldli");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_foldliDelegate>(funcPtr);
        return func(c, f, i, a, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_str_to_intDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_str_to_int(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_str_to_int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_str_to_intDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_int_to_strDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_int_to_str(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int_to_str");
        var func = Marshal.GetDelegateForFunctionPointer<mk_int_to_strDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_string_to_codeDelegate(IntPtr c, IntPtr a);

    internal IntPtr Z3_mk_string_to_code(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_string_to_code");
        var func = Marshal.GetDelegateForFunctionPointer<mk_string_to_codeDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_string_from_codeDelegate(IntPtr c, IntPtr a);

    internal IntPtr Z3_mk_string_from_code(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_string_from_code");
        var func = Marshal.GetDelegateForFunctionPointer<mk_string_from_codeDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_ubv_to_strDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_ubv_to_str(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ubv_to_str");
        var func = Marshal.GetDelegateForFunctionPointer<mk_ubv_to_strDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_sbv_to_strDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_sbv_to_str(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_sbv_to_str");
        var func = Marshal.GetDelegateForFunctionPointer<mk_sbv_to_strDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_to_reDelegate(IntPtr c, IntPtr seq);

    internal IntPtr Z3_mk_seq_to_re(IntPtr c, IntPtr seq)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_to_re");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_to_reDelegate>(funcPtr);
        return func(c, seq);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_seq_in_reDelegate(IntPtr c, IntPtr seq, IntPtr re);

    internal IntPtr Z3_mk_seq_in_re(IntPtr c, IntPtr seq, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_seq_in_re");
        var func = Marshal.GetDelegateForFunctionPointer<mk_seq_in_reDelegate>(funcPtr);
        return func(c, seq, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_plusDelegate(IntPtr c, IntPtr re);

    internal IntPtr Z3_mk_re_plus(IntPtr c, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_plus");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_plusDelegate>(funcPtr);
        return func(c, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_starDelegate(IntPtr c, IntPtr re);

    internal IntPtr Z3_mk_re_star(IntPtr c, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_star");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_starDelegate>(funcPtr);
        return func(c, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_optionDelegate(IntPtr c, IntPtr re);

    internal IntPtr Z3_mk_re_option(IntPtr c, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_option");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_optionDelegate>(funcPtr);
        return func(c, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_unionDelegate(IntPtr c, uint n, IntPtr args);

    internal IntPtr Z3_mk_re_union(IntPtr c, uint n, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_union");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_unionDelegate>(funcPtr);
        return func(c, n, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_concatDelegate(IntPtr c, uint n, IntPtr args);

    internal IntPtr Z3_mk_re_concat(IntPtr c, uint n, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_concat");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_concatDelegate>(funcPtr);
        return func(c, n, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_rangeDelegate(IntPtr c, IntPtr lo, IntPtr hi);

    internal IntPtr Z3_mk_re_range(IntPtr c, IntPtr lo, IntPtr hi)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_range");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_rangeDelegate>(funcPtr);
        return func(c, lo, hi);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_allcharDelegate(IntPtr c, IntPtr regex_sort);

    internal IntPtr Z3_mk_re_allchar(IntPtr c, IntPtr regex_sort)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_allchar");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_allcharDelegate>(funcPtr);
        return func(c, regex_sort);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_loopDelegate(IntPtr c, IntPtr r, uint lo, uint hi);

    internal IntPtr Z3_mk_re_loop(IntPtr c, IntPtr r, uint lo, uint hi)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_loop");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_loopDelegate>(funcPtr);
        return func(c, r, lo, hi);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_powerDelegate(IntPtr c, IntPtr re, uint n);

    internal IntPtr Z3_mk_re_power(IntPtr c, IntPtr re, uint n)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_power");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_powerDelegate>(funcPtr);
        return func(c, re, n);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_intersectDelegate(IntPtr c, uint n, IntPtr args);

    internal IntPtr Z3_mk_re_intersect(IntPtr c, uint n, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_intersect");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_intersectDelegate>(funcPtr);
        return func(c, n, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_complementDelegate(IntPtr c, IntPtr re);

    internal IntPtr Z3_mk_re_complement(IntPtr c, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_complement");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_complementDelegate>(funcPtr);
        return func(c, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_diffDelegate(IntPtr c, IntPtr re1, IntPtr re2);

    internal IntPtr Z3_mk_re_diff(IntPtr c, IntPtr re1, IntPtr re2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_diff");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_diffDelegate>(funcPtr);
        return func(c, re1, re2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_emptyDelegate(IntPtr c, IntPtr re);

    internal IntPtr Z3_mk_re_empty(IntPtr c, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_empty");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_emptyDelegate>(funcPtr);
        return func(c, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_re_fullDelegate(IntPtr c, IntPtr re);

    internal IntPtr Z3_mk_re_full(IntPtr c, IntPtr re)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_re_full");
        var func = Marshal.GetDelegateForFunctionPointer<mk_re_fullDelegate>(funcPtr);
        return func(c, re);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_charDelegate(IntPtr c, uint ch);

    internal IntPtr Z3_mk_char(IntPtr c, uint ch)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char");
        var func = Marshal.GetDelegateForFunctionPointer<mk_charDelegate>(funcPtr);
        return func(c, ch);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_char_leDelegate(IntPtr c, IntPtr ch1, IntPtr ch2);

    internal IntPtr Z3_mk_char_le(IntPtr c, IntPtr ch1, IntPtr ch2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char_le");
        var func = Marshal.GetDelegateForFunctionPointer<mk_char_leDelegate>(funcPtr);
        return func(c, ch1, ch2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_char_to_intDelegate(IntPtr c, IntPtr ch);

    internal IntPtr Z3_mk_char_to_int(IntPtr c, IntPtr ch)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char_to_int");
        var func = Marshal.GetDelegateForFunctionPointer<mk_char_to_intDelegate>(funcPtr);
        return func(c, ch);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_char_to_bvDelegate(IntPtr c, IntPtr ch);

    internal IntPtr Z3_mk_char_to_bv(IntPtr c, IntPtr ch)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char_to_bv");
        var func = Marshal.GetDelegateForFunctionPointer<mk_char_to_bvDelegate>(funcPtr);
        return func(c, ch);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_char_from_bvDelegate(IntPtr c, IntPtr bv);

    internal IntPtr Z3_mk_char_from_bv(IntPtr c, IntPtr bv)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char_from_bv");
        var func = Marshal.GetDelegateForFunctionPointer<mk_char_from_bvDelegate>(funcPtr);
        return func(c, bv);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_char_is_digitDelegate(IntPtr c, IntPtr ch);

    internal IntPtr Z3_mk_char_is_digit(IntPtr c, IntPtr ch)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_char_is_digit");
        var func = Marshal.GetDelegateForFunctionPointer<mk_char_is_digitDelegate>(funcPtr);
        return func(c, ch);
    }

}
