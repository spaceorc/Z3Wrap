// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Propositional Logic and Equality
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsPropositionalLogicAndEquality(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_true");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_false");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_eq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_distinct");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_not");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_ite");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_iff");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_implies");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_xor");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_and");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_or");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_trueDelegate(IntPtr c);

    internal IntPtr Z3_mk_true(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_true");
        var func = Marshal.GetDelegateForFunctionPointer<mk_trueDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_falseDelegate(IntPtr c);

    internal IntPtr Z3_mk_false(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_false");
        var func = Marshal.GetDelegateForFunctionPointer<mk_falseDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_eqDelegate(IntPtr c, IntPtr l, IntPtr r);

    internal IntPtr Z3_mk_eq(IntPtr c, IntPtr l, IntPtr r)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_eq");
        var func = Marshal.GetDelegateForFunctionPointer<mk_eqDelegate>(funcPtr);
        return func(c, l, r);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_distinctDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_distinct(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_distinct");
        var func = Marshal.GetDelegateForFunctionPointer<mk_distinctDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_notDelegate(IntPtr c, IntPtr a);

    internal IntPtr Z3_mk_not(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_not");
        var func = Marshal.GetDelegateForFunctionPointer<mk_notDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_iteDelegate(IntPtr c, IntPtr t1, IntPtr t2, IntPtr t3);

    internal IntPtr Z3_mk_ite(IntPtr c, IntPtr t1, IntPtr t2, IntPtr t3)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ite");
        var func = Marshal.GetDelegateForFunctionPointer<mk_iteDelegate>(funcPtr);
        return func(c, t1, t2, t3);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_iffDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_iff(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_iff");
        var func = Marshal.GetDelegateForFunctionPointer<mk_iffDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_impliesDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_implies(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_implies");
        var func = Marshal.GetDelegateForFunctionPointer<mk_impliesDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_xorDelegate(IntPtr c, IntPtr t1, IntPtr t2);

    internal IntPtr Z3_mk_xor(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_xor");
        var func = Marshal.GetDelegateForFunctionPointer<mk_xorDelegate>(funcPtr);
        return func(c, t1, t2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_andDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_and(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_and");
        var func = Marshal.GetDelegateForFunctionPointer<mk_andDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_orDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_or(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_or");
        var func = Marshal.GetDelegateForFunctionPointer<mk_orDelegate>(funcPtr);
        return func(c, num_args, args);
    }

}
