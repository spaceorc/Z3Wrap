// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Symbols
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsSymbols(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_int_symbol");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_string_symbol");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_int_symbolDelegate(IntPtr c, int i);

    internal IntPtr Z3_mk_int_symbol(IntPtr c, int i)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_int_symbol");
        var func = Marshal.GetDelegateForFunctionPointer<mk_int_symbolDelegate>(funcPtr);
        return func(c, i);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_string_symbolDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_mk_string_symbol(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_string_symbol");
        var func = Marshal.GetDelegateForFunctionPointer<mk_string_symbolDelegate>(funcPtr);
        return func(c, s);
    }

}
