// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_algebraic.h / Algebraic Numbers
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsAlgebraicNumbers(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_is_value");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_is_pos");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_is_neg");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_is_zero");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_sign");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_add");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_sub");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_mul");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_div");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_root");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_power");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_lt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_gt");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_le");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_ge");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_eq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_neq");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_roots");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_eval");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_get_poly");
        LoadFunctionOrNull(handle, functionPointers, "Z3_algebraic_get_i");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_is_valueDelegate(IntPtr c, IntPtr a);

    internal bool Z3_algebraic_is_value(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_value");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_is_valueDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_is_posDelegate(IntPtr c, IntPtr a);

    internal bool Z3_algebraic_is_pos(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_pos");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_is_posDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_is_negDelegate(IntPtr c, IntPtr a);

    internal bool Z3_algebraic_is_neg(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_neg");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_is_negDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_is_zeroDelegate(IntPtr c, IntPtr a);

    internal bool Z3_algebraic_is_zero(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_is_zero");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_is_zeroDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int algebraic_signDelegate(IntPtr c, IntPtr a);

    internal int Z3_algebraic_sign(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_sign");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_signDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_addDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal IntPtr Z3_algebraic_add(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_add");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_addDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_subDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal IntPtr Z3_algebraic_sub(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_sub");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_subDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_mulDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal IntPtr Z3_algebraic_mul(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_mul");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_mulDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_divDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal IntPtr Z3_algebraic_div(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_div");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_divDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_rootDelegate(IntPtr c, IntPtr a, uint k);

    internal IntPtr Z3_algebraic_root(IntPtr c, IntPtr a, uint k)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_root");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_rootDelegate>(funcPtr);
        return func(c, a, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_powerDelegate(IntPtr c, IntPtr a, uint k);

    internal IntPtr Z3_algebraic_power(IntPtr c, IntPtr a, uint k)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_power");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_powerDelegate>(funcPtr);
        return func(c, a, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_ltDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal bool Z3_algebraic_lt(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_lt");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_ltDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_gtDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal bool Z3_algebraic_gt(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_gt");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_gtDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_leDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal bool Z3_algebraic_le(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_le");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_leDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_geDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal bool Z3_algebraic_ge(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_ge");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_geDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_eqDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal bool Z3_algebraic_eq(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_eq");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_eqDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool algebraic_neqDelegate(IntPtr c, IntPtr a, IntPtr b);

    internal bool Z3_algebraic_neq(IntPtr c, IntPtr a, IntPtr b)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_neq");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_neqDelegate>(funcPtr);
        return func(c, a, b);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_rootsDelegate(IntPtr c, IntPtr p, uint n, IntPtr a);

    internal IntPtr Z3_algebraic_roots(IntPtr c, IntPtr p, uint n, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_roots");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_rootsDelegate>(funcPtr);
        return func(c, p, n, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int algebraic_evalDelegate(IntPtr c, IntPtr p, uint n, IntPtr a);

    internal int Z3_algebraic_eval(IntPtr c, IntPtr p, uint n, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_eval");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_evalDelegate>(funcPtr);
        return func(c, p, n, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr algebraic_get_polyDelegate(IntPtr c, IntPtr a);

    internal IntPtr Z3_algebraic_get_poly(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_get_poly");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_get_polyDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint algebraic_get_iDelegate(IntPtr c, IntPtr a);

    internal uint Z3_algebraic_get_i(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_algebraic_get_i");
        var func = Marshal.GetDelegateForFunctionPointer<algebraic_get_iDelegate>(funcPtr);
        return func(c, a);
    }

}
