// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / String conversion
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void SetAstPrintModeDelegate(IntPtr c, int mode);

    /// <summary>
    /// Select mode for the format used for pretty-printing AST nodes.
    /// </summary>
    [Z3Function("Z3_set_ast_print_mode")]
    internal void SetAstPrintMode(IntPtr c, int mode)
    {
        var funcPtr = GetFunctionPointer("Z3_set_ast_print_mode");
        var func = Marshal.GetDelegateForFunctionPointer<SetAstPrintModeDelegate>(funcPtr);
        func(c, mode);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstToStringDelegate(IntPtr c, IntPtr a);

    /// <summary>
    /// Convert the given AST node into a string.
    /// </summary>
    [Z3Function("Z3_ast_to_string")]
    internal IntPtr AstToString(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<AstToStringDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr PatternToStringDelegate(IntPtr c, IntPtr p);

    [Z3Function("Z3_pattern_to_string")]
    internal IntPtr PatternToString(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_pattern_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<PatternToStringDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr SortToStringDelegate(IntPtr c, IntPtr s);

    [Z3Function("Z3_sort_to_string")]
    internal IntPtr SortToString(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_sort_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<SortToStringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr FuncDeclToStringDelegate(IntPtr c, IntPtr d);

    [Z3Function("Z3_func_decl_to_string")]
    internal IntPtr FuncDeclToString(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_func_decl_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<FuncDeclToStringDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ModelToStringDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Convert the given model into a string.
    /// </summary>
    [Z3Function("Z3_model_to_string")]
    internal IntPtr ModelToString(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_model_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<ModelToStringDelegate>(funcPtr);
        return func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr BenchmarkToSmtlibStringDelegate(IntPtr c, IntPtr name, IntPtr logic, IntPtr status, IntPtr attributes, uint num_assumptions, IntPtr assumptions, IntPtr formula);

    /// <summary>
    /// Convert the given benchmark into SMT-LIB formatted string.
    /// </summary>
    [Z3Function("Z3_benchmark_to_smtlib_string")]
    internal IntPtr BenchmarkToSmtlibString(IntPtr c, IntPtr name, IntPtr logic, IntPtr status, IntPtr attributes, uint num_assumptions, IntPtr assumptions, IntPtr formula)
    {
        var funcPtr = GetFunctionPointer("Z3_benchmark_to_smtlib_string");
        var func = Marshal.GetDelegateForFunctionPointer<BenchmarkToSmtlibStringDelegate>(funcPtr);
        return func(c, name, logic, status, attributes, num_assumptions, assumptions, formula);
    }

}
