// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / String conversion
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsStringConversion(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_set_ast_print_mode");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_pattern_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_sort_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_func_decl_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_model_to_string");
        LoadFunctionOrNull(handle, functionPointers, "Z3_benchmark_to_smtlib_string");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void set_ast_print_modeDelegate(IntPtr c, int mode);

    internal void Z3_set_ast_print_mode(IntPtr c, int mode)
    {
        var funcPtr = GetFunctionPointer("Z3_set_ast_print_mode");
        var func = Marshal.GetDelegateForFunctionPointer<set_ast_print_modeDelegate>(funcPtr);
        func(c, mode);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_to_stringDelegate(IntPtr c, IntPtr a);

    internal IntPtr Z3_ast_to_string(IntPtr c, IntPtr a)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<ast_to_stringDelegate>(funcPtr);
        return func(c, a);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr pattern_to_stringDelegate(IntPtr c, IntPtr p);

    internal IntPtr Z3_pattern_to_string(IntPtr c, IntPtr p)
    {
        var funcPtr = GetFunctionPointer("Z3_pattern_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<pattern_to_stringDelegate>(funcPtr);
        return func(c, p);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr sort_to_stringDelegate(IntPtr c, IntPtr s);

    internal IntPtr Z3_sort_to_string(IntPtr c, IntPtr s)
    {
        var funcPtr = GetFunctionPointer("Z3_sort_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<sort_to_stringDelegate>(funcPtr);
        return func(c, s);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr func_decl_to_stringDelegate(IntPtr c, IntPtr d);

    internal IntPtr Z3_func_decl_to_string(IntPtr c, IntPtr d)
    {
        var funcPtr = GetFunctionPointer("Z3_func_decl_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<func_decl_to_stringDelegate>(funcPtr);
        return func(c, d);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr model_to_stringDelegate(IntPtr c, IntPtr m);

    internal IntPtr Z3_model_to_string(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_model_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<model_to_stringDelegate>(funcPtr);
        return func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr benchmark_to_smtlib_stringDelegate(IntPtr c, IntPtr name, IntPtr logic, IntPtr status, IntPtr attributes, uint num_assumptions, IntPtr assumptions, IntPtr formula);

    internal IntPtr Z3_benchmark_to_smtlib_string(IntPtr c, IntPtr name, IntPtr logic, IntPtr status, IntPtr attributes, uint num_assumptions, IntPtr assumptions, IntPtr formula)
    {
        var funcPtr = GetFunctionPointer("Z3_benchmark_to_smtlib_string");
        var func = Marshal.GetDelegateForFunctionPointer<benchmark_to_smtlib_stringDelegate>(funcPtr);
        return func(c, name, logic, status, attributes, num_assumptions, assumptions, formula);
    }

}
