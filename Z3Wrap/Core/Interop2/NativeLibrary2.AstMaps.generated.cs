// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_ast_containers.h / AST maps
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsAstMaps(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_ast_map");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_inc_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_dec_ref");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_contains");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_find");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_insert");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_erase");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_reset");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_size");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_keys");
        LoadFunctionOrNull(handle, functionPointers, "Z3_ast_map_to_string");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_ast_mapDelegate(IntPtr c);

    internal IntPtr Z3_mk_ast_map(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ast_map");
        var func = Marshal.GetDelegateForFunctionPointer<mk_ast_mapDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_map_inc_refDelegate(IntPtr c, IntPtr m);

    internal void Z3_ast_map_inc_ref(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_inc_refDelegate>(funcPtr);
        func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_map_dec_refDelegate(IntPtr c, IntPtr m);

    internal void Z3_ast_map_dec_ref(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_dec_refDelegate>(funcPtr);
        func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool ast_map_containsDelegate(IntPtr c, IntPtr m, IntPtr k);

    internal bool Z3_ast_map_contains(IntPtr c, IntPtr m, IntPtr k)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_contains");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_containsDelegate>(funcPtr);
        return func(c, m, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_map_findDelegate(IntPtr c, IntPtr m, IntPtr k);

    internal IntPtr Z3_ast_map_find(IntPtr c, IntPtr m, IntPtr k)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_find");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_findDelegate>(funcPtr);
        return func(c, m, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_map_insertDelegate(IntPtr c, IntPtr m, IntPtr k, IntPtr v);

    internal void Z3_ast_map_insert(IntPtr c, IntPtr m, IntPtr k, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_insert");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_insertDelegate>(funcPtr);
        func(c, m, k, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_map_eraseDelegate(IntPtr c, IntPtr m, IntPtr k);

    internal void Z3_ast_map_erase(IntPtr c, IntPtr m, IntPtr k)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_erase");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_eraseDelegate>(funcPtr);
        func(c, m, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void ast_map_resetDelegate(IntPtr c, IntPtr m);

    internal void Z3_ast_map_reset(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_reset");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_resetDelegate>(funcPtr);
        func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint ast_map_sizeDelegate(IntPtr c, IntPtr m);

    internal uint Z3_ast_map_size(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_size");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_sizeDelegate>(funcPtr);
        return func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_map_keysDelegate(IntPtr c, IntPtr m);

    internal IntPtr Z3_ast_map_keys(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_keys");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_keysDelegate>(funcPtr);
        return func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr ast_map_to_stringDelegate(IntPtr c, IntPtr m);

    internal IntPtr Z3_ast_map_to_string(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<ast_map_to_stringDelegate>(funcPtr);
        return func(c, m);
    }

}
