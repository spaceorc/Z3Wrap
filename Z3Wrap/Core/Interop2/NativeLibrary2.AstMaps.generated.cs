// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_ast_containers.h / AST maps
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr MkAstMapDelegate(IntPtr c);

    /// <summary>
    /// Return an empty mapping from AST to AST
    /// </summary>
    [Z3Function("Z3_mk_ast_map")]
    internal IntPtr MkAstMap(IntPtr c)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_ast_map");
        var func = Marshal.GetDelegateForFunctionPointer<MkAstMapDelegate>(funcPtr);
        return func(c);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstMapIncRefDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Increment the reference counter of the given AST map.
    /// </summary>
    [Z3Function("Z3_ast_map_inc_ref")]
    internal void AstMapIncRef(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_inc_ref");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapIncRefDelegate>(funcPtr);
        func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstMapDecRefDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Decrement the reference counter of the given AST map.
    /// </summary>
    [Z3Function("Z3_ast_map_dec_ref")]
    internal void AstMapDecRef(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_dec_ref");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapDecRefDelegate>(funcPtr);
        func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate bool AstMapContainsDelegate(IntPtr c, IntPtr m, IntPtr k);

    /// <summary>
    /// Return true if the map
    /// </summary>
    [Z3Function("Z3_ast_map_contains")]
    internal bool AstMapContains(IntPtr c, IntPtr m, IntPtr k)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_contains");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapContainsDelegate>(funcPtr);
        return func(c, m, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstMapFindDelegate(IntPtr c, IntPtr m, IntPtr k);

    /// <summary>
    /// Return the value associated with the key
    /// </summary>
    [Z3Function("Z3_ast_map_find")]
    internal IntPtr AstMapFind(IntPtr c, IntPtr m, IntPtr k)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_find");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapFindDelegate>(funcPtr);
        return func(c, m, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstMapInsertDelegate(IntPtr c, IntPtr m, IntPtr k, IntPtr v);

    /// <summary>
    /// Store/Replace a new key, value pair in the given map.
    /// </summary>
    [Z3Function("Z3_ast_map_insert")]
    internal void AstMapInsert(IntPtr c, IntPtr m, IntPtr k, IntPtr v)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_insert");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapInsertDelegate>(funcPtr);
        func(c, m, k, v);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstMapEraseDelegate(IntPtr c, IntPtr m, IntPtr k);

    /// <summary>
    /// Erase a key from the map.
    /// </summary>
    [Z3Function("Z3_ast_map_erase")]
    internal void AstMapErase(IntPtr c, IntPtr m, IntPtr k)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_erase");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapEraseDelegate>(funcPtr);
        func(c, m, k);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate void AstMapResetDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Remove all keys from the given map.
    /// </summary>
    [Z3Function("Z3_ast_map_reset")]
    internal void AstMapReset(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_reset");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapResetDelegate>(funcPtr);
        func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate uint AstMapSizeDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Return the size of the given map.
    /// </summary>
    [Z3Function("Z3_ast_map_size")]
    internal uint AstMapSize(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_size");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapSizeDelegate>(funcPtr);
        return func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstMapKeysDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Return the keys stored in the given map.
    /// </summary>
    [Z3Function("Z3_ast_map_keys")]
    internal IntPtr AstMapKeys(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_keys");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapKeysDelegate>(funcPtr);
        return func(c, m);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr AstMapToStringDelegate(IntPtr c, IntPtr m);

    /// <summary>
    /// Convert the given map into a string.
    /// </summary>
    [Z3Function("Z3_ast_map_to_string")]
    internal IntPtr AstMapToString(IntPtr c, IntPtr m)
    {
        var funcPtr = GetFunctionPointer("Z3_ast_map_to_string");
        var func = Marshal.GetDelegateForFunctionPointer<AstMapToStringDelegate>(funcPtr);
        return func(c, m);
    }

}
