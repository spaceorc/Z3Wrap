// <auto-generated>
// This file was generated by scripts/generate_native_library.py
// Source: z3_api.h / Sets
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Spaceorc.Z3Wrap.Core.Interop2;

internal sealed partial class NativeLibrary2
{
    private static void LoadFunctionsSets(IntPtr handle, Dictionary<string, IntPtr> functionPointers)
    {
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_sort");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_empty_set");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_full_set");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_add");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_del");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_union");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_intersect");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_difference");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_complement");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_member");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_set_subset");
        LoadFunctionOrNull(handle, functionPointers, "Z3_mk_array_ext");
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_sortDelegate(IntPtr c, IntPtr ty);

    internal IntPtr Z3_mk_set_sort(IntPtr c, IntPtr ty)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_sort");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_sortDelegate>(funcPtr);
        return func(c, ty);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_empty_setDelegate(IntPtr c, IntPtr domain);

    internal IntPtr Z3_mk_empty_set(IntPtr c, IntPtr domain)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_empty_set");
        var func = Marshal.GetDelegateForFunctionPointer<mk_empty_setDelegate>(funcPtr);
        return func(c, domain);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_full_setDelegate(IntPtr c, IntPtr domain);

    internal IntPtr Z3_mk_full_set(IntPtr c, IntPtr domain)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_full_set");
        var func = Marshal.GetDelegateForFunctionPointer<mk_full_setDelegate>(funcPtr);
        return func(c, domain);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_addDelegate(IntPtr c, IntPtr set, IntPtr elem);

    internal IntPtr Z3_mk_set_add(IntPtr c, IntPtr set, IntPtr elem)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_add");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_addDelegate>(funcPtr);
        return func(c, set, elem);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_delDelegate(IntPtr c, IntPtr set, IntPtr elem);

    internal IntPtr Z3_mk_set_del(IntPtr c, IntPtr set, IntPtr elem)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_del");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_delDelegate>(funcPtr);
        return func(c, set, elem);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_unionDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_set_union(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_union");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_unionDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_intersectDelegate(IntPtr c, uint num_args, IntPtr args);

    internal IntPtr Z3_mk_set_intersect(IntPtr c, uint num_args, IntPtr args)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_intersect");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_intersectDelegate>(funcPtr);
        return func(c, num_args, args);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_differenceDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_set_difference(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_difference");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_differenceDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_complementDelegate(IntPtr c, IntPtr arg);

    internal IntPtr Z3_mk_set_complement(IntPtr c, IntPtr arg)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_complement");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_complementDelegate>(funcPtr);
        return func(c, arg);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_memberDelegate(IntPtr c, IntPtr elem, IntPtr set);

    internal IntPtr Z3_mk_set_member(IntPtr c, IntPtr elem, IntPtr set)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_member");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_memberDelegate>(funcPtr);
        return func(c, elem, set);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_set_subsetDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_set_subset(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_set_subset");
        var func = Marshal.GetDelegateForFunctionPointer<mk_set_subsetDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate IntPtr mk_array_extDelegate(IntPtr c, IntPtr arg1, IntPtr arg2);

    internal IntPtr Z3_mk_array_ext(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var funcPtr = GetFunctionPointer("Z3_mk_array_ext");
        var func = Marshal.GetDelegateForFunctionPointer<mk_array_extDelegate>(funcPtr);
        return func(c, arg1, arg2);
    }

}
