// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.Statistics.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System.Runtime.InteropServices;
using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core;

public sealed partial class Z3Library
{
    /// <summary>
    ///  Convert a statistics into a string.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    public string StatsToString(IntPtr c, IntPtr s)
    {
        var result = nativeLibrary.StatsToString(c, s);
        CheckError(c);
        result = CheckHandle(result, nameof(StatsToString));
        return Marshal.PtrToStringAnsi(result) ?? throw new InvalidOperationException("Failed to marshal string from native code.");
    }

    /// <summary>
    ///  Increment the reference counter of the given statistics object.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    public void StatsIncRef(IntPtr c, IntPtr s)
    {
        nativeLibrary.StatsIncRef(c, s);
    }

    /// <summary>
    ///  Decrement the reference counter of the given statistics object.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    public void StatsDecRef(IntPtr c, IntPtr s)
    {
        nativeLibrary.StatsDecRef(c, s);
    }

    /// <summary>
    ///  Return the number of statistical data in <c>s</c> .
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    public uint StatsSize(IntPtr c, IntPtr s)
    {
        var result = nativeLibrary.StatsSize(c, s);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the key (a string) for a particular statistical data.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s)
    /// </remarks>
    public string StatsGetKey(IntPtr c, IntPtr s, uint idx)
    {
        var result = nativeLibrary.StatsGetKey(c, s, idx);
        CheckError(c);
        result = CheckHandle(result, nameof(StatsGetKey));
        return Marshal.PtrToStringAnsi(result) ?? throw new InvalidOperationException("Failed to marshal string from native code.");
    }

    /// <summary>
    ///  Return <c>true</c> if the given statistical data is a unsigned integer.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s)
    /// </remarks>
    public bool StatsIsUint(IntPtr c, IntPtr s, uint idx)
    {
        var result = nativeLibrary.StatsIsUint(c, s, idx);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return <c>true</c> if the given statistical data is a double.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="bool">bool value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s)
    /// </remarks>
    public bool StatsIsDouble(IntPtr c, IntPtr s, uint idx)
    {
        var result = nativeLibrary.StatsIsDouble(c, s, idx);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the unsigned value of the given statistical data.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) &amp;&amp; Z3_stats_is_uint(c, s)
    /// </remarks>
    public uint StatsGetUintValue(IntPtr c, IntPtr s, uint idx)
    {
        var result = nativeLibrary.StatsGetUintValue(c, s, idx);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the double value of the given statistical data.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_stats">stats parameter</param>
    /// <param name="idx" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="double">double value</returns>
    /// <remarks>
    /// Precondition: idx &lt; Z3_stats_size(c, s) &amp;&amp; Z3_stats_is_double(c, s)
    /// </remarks>
    public double StatsGetDoubleValue(IntPtr c, IntPtr s, uint idx)
    {
        var result = nativeLibrary.StatsGetDoubleValue(c, s, idx);
        CheckError(c);
        return result;
    }

}
