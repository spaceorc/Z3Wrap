// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.AstVectors.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System.Runtime.InteropServices;
using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core;

public sealed partial class Z3Library
{
    /// <summary>
    ///  Return an empty AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_ast_vector">ast_vector value</returns>
    /// <remarks>
    /// Reference counting must be used to manage AST vectors, even when the Z3_context was created using MkContext instead of <see cref="MkContextRc"/> .
    /// </remarks>
    public IntPtr MkAstVector(IntPtr c)
    {
        var result = nativeLibrary.MkAstVector(c);
        CheckError(c);
        return CheckHandle(result, nameof(MkAstVector));
    }

    /// <summary>
    ///  Increment the reference counter of the given AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    public void AstVectorIncRef(IntPtr c, IntPtr v)
    {
        nativeLibrary.AstVectorIncRef(c, v);
        CheckError(c);
    }

    /// <summary>
    ///  Decrement the reference counter of the given AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    public void AstVectorDecRef(IntPtr c, IntPtr v)
    {
        nativeLibrary.AstVectorDecRef(c, v);
        CheckError(c);
    }

    /// <summary>
    ///  Return the size of the given AST vector.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    public uint AstVectorSize(IntPtr c, IntPtr v)
    {
        var result = nativeLibrary.AstVectorSize(c, v);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the AST at position <c>i</c> in the AST vector <c>v</c> .
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// Precondition: i &lt; Z3_ast_vector_size(c, v)
    /// </remarks>
    public IntPtr AstVectorGet(IntPtr c, IntPtr v, uint i)
    {
        var result = nativeLibrary.AstVectorGet(c, v, i);
        CheckError(c);
        return CheckHandle(result, nameof(AstVectorGet));
    }

    /// <summary>
    ///  Update position <c>i</c> of the AST vector <c>v</c> with the AST <c>a</c> .
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="i" ctype="unsigned">unsigned parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// Precondition: i &lt; Z3_ast_vector_size(c, v)
    /// </remarks>
    public void AstVectorSet(IntPtr c, IntPtr v, uint i, IntPtr a)
    {
        nativeLibrary.AstVectorSet(c, v, i, a);
        CheckError(c);
    }

    /// <summary>
    ///  Resize the AST vector <c>v</c> .
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="n" ctype="unsigned">unsigned parameter</param>
    public void AstVectorResize(IntPtr c, IntPtr v, uint n)
    {
        nativeLibrary.AstVectorResize(c, v, n);
        CheckError(c);
    }

    /// <summary>
    ///  Add the AST <c>a</c> in the end of the AST vector <c>v</c> . The size of <c>v</c> is increased by one.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="a" ctype="Z3_ast">ast parameter</param>
    public void AstVectorPush(IntPtr c, IntPtr v, IntPtr a)
    {
        nativeLibrary.AstVectorPush(c, v, a);
        CheckError(c);
    }

    /// <summary>
    ///  Translate the AST vector <c>v</c> from context <c>s</c> into an AST vector in context <c>t</c> .
    /// </summary>
    /// <param name="s" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <param name="t" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_ast_vector">ast_vector value</returns>
    public IntPtr AstVectorTranslate(IntPtr s, IntPtr v, IntPtr t)
    {
        var result = nativeLibrary.AstVectorTranslate(s, v, t);
        CheckError(s);
        return CheckHandle(result, nameof(AstVectorTranslate));
    }

    /// <summary>
    ///  Convert AST vector into a string.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="v" ctype="Z3_ast_vector">ast_vector parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    public string AstVectorToString(IntPtr c, IntPtr v)
    {
        var result = nativeLibrary.AstVectorToString(c, v);
        CheckError(c);
        result = CheckHandle(result, nameof(AstVectorToString));
        return Marshal.PtrToStringAnsi(result) ?? throw new InvalidOperationException("Failed to marshal string from native code.");
    }

}
