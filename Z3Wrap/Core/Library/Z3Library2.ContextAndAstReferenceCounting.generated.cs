// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.ContextAndAstReferenceCounting.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    /// Increment the reference counter of the given AST.
    /// The context c should have been created using
    /// <see cref="MkContextRc"/>
    /// .
    /// This function is a NOOP if c was created using
    /// <see cref="MkContext"/>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public void IncRef(IntPtr c, IntPtr a)
    {
        nativeLibrary.IncRef(c, a);
        CheckError(c);
    }

    /// <summary>
    /// Decrement the reference counter of the given AST.
    /// The context c should have been created using
    /// <see cref="MkContextRc"/>
    /// .
    /// This function is a NOOP if c was created using
    /// <see cref="MkContext"/>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public void DecRef(IntPtr c, IntPtr a)
    {
        nativeLibrary.DecRef(c, a);
        CheckError(c);
    }

    /// <summary>
    /// Set a value of a context parameter.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="paramId" ctype="Z3_string">
    /// string parameter
    /// </param>
    /// <param name="paramValue" ctype="Z3_string">
    /// string parameter
    /// </param>
    /// <seealso cref="GlobalParamSet"/>
    public void UpdateParamValue(IntPtr c, string paramId, string paramValue)
    {
        using var paramIdAnsi = new AnsiStringPtr(paramId);
        using var paramValueAnsi = new AnsiStringPtr(paramValue);
        nativeLibrary.UpdateParamValue(c, paramIdAnsi, paramValueAnsi);
        CheckError(c);
    }

    /// <summary>
    /// Retrieve description of global parameters.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    public IntPtr GetGlobalParamDescrs(IntPtr c)
    {
        var result = nativeLibrary.GetGlobalParamDescrs(c);
        CheckError(c);
        return CheckHandle(result, nameof(GetGlobalParamDescrs));
    }

    /// <summary>
    /// Interrupt the execution of a Z3 procedure.
    /// This procedure can be used to interrupt: solvers, simplifiers and tactics.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    public void Interrupt(IntPtr c)
    {
        nativeLibrary.Interrupt(c);
        CheckError(c);
    }

    /// <summary>
    /// use concurrency control for dec-ref.
    /// Reference counting decrements are allowed in separate threads from the context.
    /// If this setting is not invoked, reference counting decrements are not going to be thread safe.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    public void EnableConcurrentDecRef(IntPtr c)
    {
        nativeLibrary.EnableConcurrentDecRef(c);
        CheckError(c);
    }

}
