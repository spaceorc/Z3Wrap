// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.Sets.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    ///  Create Set type.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="ty" ctype="Z3_sort">sort parameter</param>
    public IntPtr MkSetSort(IntPtr c, IntPtr ty)
    {
        var result = nativeLibrary.MkSetSort(c, ty);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetSort));
    }

    /// <summary>
    ///  Create the empty set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="domain" ctype="Z3_sort">sort parameter</param>
    public IntPtr MkEmptySet(IntPtr c, IntPtr domain)
    {
        var result = nativeLibrary.MkEmptySet(c, domain);
        CheckError(c);
        return CheckHandle(result, nameof(MkEmptySet));
    }

    /// <summary>
    ///  Create the full set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="domain" ctype="Z3_sort">sort parameter</param>
    public IntPtr MkFullSet(IntPtr c, IntPtr domain)
    {
        var result = nativeLibrary.MkFullSet(c, domain);
        CheckError(c);
        return CheckHandle(result, nameof(MkFullSet));
    }

    /// <summary>
    ///  Add an element to a set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="set" ctype="Z3_ast">ast parameter</param>
    /// <param name="elem" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// The first argument must be a set, the second an element.
    /// </remarks>
    public IntPtr MkSetAdd(IntPtr c, IntPtr set, IntPtr elem)
    {
        var result = nativeLibrary.MkSetAdd(c, set, elem);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetAdd));
    }

    /// <summary>
    ///  Remove an element to a set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="set" ctype="Z3_ast">ast parameter</param>
    /// <param name="elem" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// The first argument must be a set, the second an element.
    /// </remarks>
    public IntPtr MkSetDel(IntPtr c, IntPtr set, IntPtr elem)
    {
        var result = nativeLibrary.MkSetDel(c, set, elem);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetDel));
    }

    /// <summary>
    ///  Take the union of a list of sets.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    public IntPtr MkSetUnion(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var result = nativeLibrary.MkSetUnion(c, numArgs, args);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetUnion));
    }

    /// <summary>
    ///  Take the intersection of a list of sets.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="numArgs" ctype="unsigned">unsigned parameter</param>
    /// <param name="args" ctype="Z3_ast const[]">ast parameter</param>
    public IntPtr MkSetIntersect(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var result = nativeLibrary.MkSetIntersect(c, numArgs, args);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetIntersect));
    }

    /// <summary>
    ///  Take the set difference between two sets.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="arg1" ctype="Z3_ast">ast parameter</param>
    /// <param name="arg2" ctype="Z3_ast">ast parameter</param>
    public IntPtr MkSetDifference(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var result = nativeLibrary.MkSetDifference(c, arg1, arg2);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetDifference));
    }

    /// <summary>
    ///  Take the complement of a set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="arg" ctype="Z3_ast">ast parameter</param>
    public IntPtr MkSetComplement(IntPtr c, IntPtr arg)
    {
        var result = nativeLibrary.MkSetComplement(c, arg);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetComplement));
    }

    /// <summary>
    ///  Check for set membership.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="elem" ctype="Z3_ast">ast parameter</param>
    /// <param name="set" ctype="Z3_ast">ast parameter</param>
    /// <remarks>
    /// The first argument should be an element type of the set.
    /// </remarks>
    public IntPtr MkSetMember(IntPtr c, IntPtr elem, IntPtr set)
    {
        var result = nativeLibrary.MkSetMember(c, elem, set);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetMember));
    }

    /// <summary>
    ///  Check for subsetness of sets.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="arg1" ctype="Z3_ast">ast parameter</param>
    /// <param name="arg2" ctype="Z3_ast">ast parameter</param>
    public IntPtr MkSetSubset(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var result = nativeLibrary.MkSetSubset(c, arg1, arg2);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetSubset));
    }

    /// <summary>
    ///  Create array extensionality index given two arrays with the same sort. The meaning is given by the axiom: (=&gt; (= (select A (array-ext A B)) (select B (array-ext A B))) (= A B))
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="arg1" ctype="Z3_ast">ast parameter</param>
    /// <param name="arg2" ctype="Z3_ast">ast parameter</param>
    public IntPtr MkArrayExt(IntPtr c, IntPtr arg1, IntPtr arg2)
    {
        var result = nativeLibrary.MkArrayExt(c, arg1, arg2);
        CheckError(c);
        return CheckHandle(result, nameof(MkArrayExt));
    }

}
