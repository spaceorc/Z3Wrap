// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.Symbols.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    ///  Create a Z3 symbol using an integer.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="i" ctype="int">int parameter</param>
    /// <remarks>
    /// Symbols are used to name several term and type constructors. NB. Not all integers can be passed to this function. The legal range of unsigned integers is 0 to 2^30-1.
    /// </remarks>
    /// <seealso cref="GetSymbolInt"/>
    /// <seealso cref="MkStringSymbol"/>
    public IntPtr MkIntSymbol(IntPtr c, int i)
    {
        var result = nativeLibrary.MkIntSymbol(c, i);
        CheckError(c);
        return CheckHandle(result, nameof(MkIntSymbol));
    }

    /// <summary>
    ///  Create a Z3 symbol using a C string.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="s" ctype="Z3_string">string parameter</param>
    /// <remarks>
    /// Symbols are used to name several term and type constructors.
    /// </remarks>
    /// <seealso cref="GetSymbolString"/>
    /// <seealso cref="MkIntSymbol"/>
    public IntPtr MkStringSymbol(IntPtr c, string s)
    {
        using var sAnsi = new AnsiStringPtr(s);
        var result = nativeLibrary.MkStringSymbol(c, sAnsi);
        CheckError(c);
        return CheckHandle(result, nameof(MkStringSymbol));
    }

}
