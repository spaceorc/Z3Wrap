// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.Arrays.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    /// <para>
    /// Array read.
    /// The argument a is the array and i is the index of the array that gets read.
    /// </para>
    /// <para>
    /// The node a must have an array sort
    /// <code>
    /// [domain -&gt; range]
    /// </code>
    /// ,
    /// and i must have the sort domain.
    /// The sort of the result is range.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="i" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <seealso cref="MkArraySort"/>
    /// <seealso cref="MkStore"/>
    public IntPtr MkSelect(IntPtr c, IntPtr a, IntPtr i)
    {
        var result = nativeLibrary.MkSelect(c, a, i);
        CheckError(c);
        return CheckHandle(result, nameof(MkSelect));
    }

    /// <summary>
    /// n-ary Array read.
    /// The argument a is the array and idxs are the indices of the array that gets read.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="n" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <param name="idxs" ctype="Z3_ast const*">
    /// ast parameter
    /// </param>
    public IntPtr MkSelectN(IntPtr c, IntPtr a, uint n, IntPtr idxs)
    {
        var result = nativeLibrary.MkSelectN(c, a, n, idxs);
        CheckError(c);
        return CheckHandle(result, nameof(MkSelectN));
    }

    /// <summary>
    /// <para>
    /// Array update.
    /// </para>
    /// <para>
    /// The node a must have an array sort
    /// <code>
    /// [domain -&gt; range]
    /// </code>
    /// , i must have sort domain,
    /// v must have sort range. The sort of the result is
    /// <code>
    /// [domain -&gt; range]
    /// </code>
    /// .
    /// The semantics of this function is given by the theory of arrays described in the SMT-LIB
    /// standard. See http://smtlib.org for more details.
    /// The result of this function is an array that is equal to a (with respect to select)
    /// on all indices except for i, where it maps to v (and the select of a with
    /// respect to i may be a different value).
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="i" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="v" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <seealso cref="MkArraySort"/>
    /// <seealso cref="MkSelect"/>
    public IntPtr MkStore(IntPtr c, IntPtr a, IntPtr i, IntPtr v)
    {
        var result = nativeLibrary.MkStore(c, a, i, v);
        CheckError(c);
        return CheckHandle(result, nameof(MkStore));
    }

    /// <summary>
    /// n-ary Array update.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="n" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <param name="idxs" ctype="Z3_ast const*">
    /// ast parameter
    /// </param>
    /// <param name="v" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkStoreN(IntPtr c, IntPtr a, uint n, IntPtr idxs, IntPtr v)
    {
        var result = nativeLibrary.MkStoreN(c, a, n, idxs, v);
        CheckError(c);
        return CheckHandle(result, nameof(MkStoreN));
    }

    /// <summary>
    /// <para>
    /// Create the constant array.
    /// </para>
    /// <para>
    /// The resulting term is an array, such that a select on an arbitrary index
    /// produces the value v.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// logical context.
    /// </param>
    /// <param name="domain" ctype="Z3_sort">
    /// domain sort for the array.
    /// </param>
    /// <param name="v" ctype="Z3_ast">
    /// value that the array maps to.
    /// </param>
    public IntPtr MkConstArray(IntPtr c, IntPtr domain, IntPtr v)
    {
        var result = nativeLibrary.MkConstArray(c, domain, v);
        CheckError(c);
        return CheckHandle(result, nameof(MkConstArray));
    }

    /// <summary>
    /// <para>
    /// Map f on the argument arrays.
    /// </para>
    /// <para>
    /// The n nodes args must be of array sorts
    /// <code>
    /// [domain_i -&gt; range_i]
    /// </code>
    /// .
    /// The function declaration f must have type
    /// <code>
    /// range_1 .. range_n -&gt; range
    /// </code>
    /// .
    /// v must have sort range. The sort of the result is
    /// <code>
    /// [domain_i -&gt; range]
    /// </code>
    /// .
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="f" ctype="Z3_func_decl">
    /// func_decl parameter
    /// </param>
    /// <param name="n" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <param name="args" ctype="Z3_ast const*">
    /// ast parameter
    /// </param>
    /// <seealso cref="MkArraySort"/>
    /// <seealso cref="MkStore"/>
    /// <seealso cref="MkSelect"/>
    public IntPtr MkMap(IntPtr c, IntPtr f, uint n, IntPtr args)
    {
        var result = nativeLibrary.MkMap(c, f, n, args);
        CheckError(c);
        return CheckHandle(result, nameof(MkMap));
    }

    /// <summary>
    /// Access the array default value.
    /// Produces the default range value, for arrays that can be represented as
    /// finite maps with a default range value.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// logical context.
    /// </param>
    /// <param name="array" ctype="Z3_ast">
    /// array value whose default range value is accessed.
    /// </param>
    public IntPtr MkArrayDefault(IntPtr c, IntPtr array)
    {
        var result = nativeLibrary.MkArrayDefault(c, array);
        CheckError(c);
        return CheckHandle(result, nameof(MkArrayDefault));
    }

    /// <summary>
    /// Create array with the same interpretation as a function.
    /// The array satisfies the property (f x) = (select (_ as-array f) x)
    /// for every argument x.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="f" ctype="Z3_func_decl">
    /// func_decl parameter
    /// </param>
    public IntPtr MkAsArray(IntPtr c, IntPtr f)
    {
        var result = nativeLibrary.MkAsArray(c, f);
        CheckError(c);
        return CheckHandle(result, nameof(MkAsArray));
    }

    /// <summary>
    /// Create predicate that holds if Boolean array set has k elements set to true.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="set" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="k" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkSetHasSize(IntPtr c, IntPtr set, IntPtr k)
    {
        var result = nativeLibrary.MkSetHasSize(c, set, k);
        CheckError(c);
        return CheckHandle(result, nameof(MkSetHasSize));
    }

}
