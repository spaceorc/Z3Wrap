// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.ParameterDescriptions.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    /// Increment the reference counter of the given parameter description set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    public void ParamDescrsIncRef(IntPtr c, IntPtr p)
    {
        nativeLibrary.ParamDescrsIncRef(c, p);
        CheckError(c);
    }

    /// <summary>
    /// Decrement the reference counter of the given parameter description set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    public void ParamDescrsDecRef(IntPtr c, IntPtr p)
    {
        nativeLibrary.ParamDescrsDecRef(c, p);
        CheckError(c);
    }

    /// <summary>
    /// Return the kind associated with the given parameter name
    /// <c>
    /// n
    /// </c>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    /// <param name="n">
    /// symbol parameter
    /// </param>
    public ParamKind ParamDescrsGetKind(IntPtr c, IntPtr p, string n)
    {
        using var nAnsi = new AnsiStringPtr(n);
        var nSymbol = nativeLibrary.MkStringSymbol(c, nAnsi);
        CheckError(c);
        var result = nativeLibrary.ParamDescrsGetKind(c, p, nSymbol);
        CheckError(c);
        return (ParamKind)result;
    }

    /// <summary>
    /// Return the kind associated with the given parameter name
    /// <c>
    /// n
    /// </c>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    /// <param name="n" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    public ParamKind ParamDescrsGetKindOriginal(IntPtr c, IntPtr p, IntPtr n)
    {
        var result = nativeLibrary.ParamDescrsGetKind(c, p, n);
        CheckError(c);
        return (ParamKind)result;
    }

    /// <summary>
    /// Return the number of parameters in the given parameter description set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    public uint ParamDescrsSize(IntPtr c, IntPtr p)
    {
        var result = nativeLibrary.ParamDescrsSize(c, p);
        CheckError(c);
        return result;
    }

    /// <summary>
    /// Return the name of the parameter at given index
    /// <c>
    /// i
    /// </c>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    /// <param name="i" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <remarks>
    /// Precondition: i &lt; Z3_param_descrs_size(c, p)
    /// </remarks>
    public IntPtr ParamDescrsGetName(IntPtr c, IntPtr p, uint i)
    {
        var result = nativeLibrary.ParamDescrsGetName(c, p, i);
        CheckError(c);
        return CheckHandle(result, nameof(ParamDescrsGetName));
    }

    /// <summary>
    /// Retrieve documentation string corresponding to parameter name
    /// <c>
    /// s
    /// </c>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    /// <param name="s">
    /// symbol parameter
    /// </param>
    public IntPtr ParamDescrsGetDocumentation(IntPtr c, IntPtr p, string s)
    {
        using var sAnsi = new AnsiStringPtr(s);
        var sSymbol = nativeLibrary.MkStringSymbol(c, sAnsi);
        CheckError(c);
        var result = nativeLibrary.ParamDescrsGetDocumentation(c, p, sSymbol);
        CheckError(c);
        return CheckHandle(result, nameof(ParamDescrsGetDocumentation));
    }

    /// <summary>
    /// Retrieve documentation string corresponding to parameter name
    /// <c>
    /// s
    /// </c>
    /// .
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    /// <param name="s" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    public IntPtr ParamDescrsGetDocumentationOriginal(IntPtr c, IntPtr p, IntPtr s)
    {
        var result = nativeLibrary.ParamDescrsGetDocumentation(c, p, s);
        CheckError(c);
        return CheckHandle(result, nameof(ParamDescrsGetDocumentation));
    }

    /// <summary>
    /// Convert a parameter description set into a string. This function is mainly used for printing the contents of a parameter description set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    public IntPtr ParamDescrsToString(IntPtr c, IntPtr p)
    {
        var result = nativeLibrary.ParamDescrsToString(c, p);
        CheckError(c);
        return CheckHandle(result, nameof(ParamDescrsToString));
    }

}
