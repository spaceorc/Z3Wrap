// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.Parameters.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    /// Create a Z3 (empty) parameter set.
    /// Starting at Z3 4.0, parameter sets are used to configure many components such as:
    /// simplifiers, tactics, solvers, etc.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <remarks>
    /// Reference counting must be used to manage parameter sets, even when the Z3_context was
    /// created using
    /// <see cref="MkContext"/>
    /// instead of
    /// <see cref="MkContextRc"/>
    /// .
    /// </remarks>
    public IntPtr MkParams(IntPtr c)
    {
        var result = nativeLibrary.MkParams(c);
        CheckError(c);
        return CheckHandle(result, nameof(MkParams));
    }

    /// <summary>
    /// Increment the reference counter of the given parameter set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    public void ParamsIncRef(IntPtr c, IntPtr p)
    {
        nativeLibrary.ParamsIncRef(c, p);
        CheckError(c);
    }

    /// <summary>
    /// Decrement the reference counter of the given parameter set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    public void ParamsDecRef(IntPtr c, IntPtr p)
    {
        nativeLibrary.ParamsDecRef(c, p);
        CheckError(c);
    }

    /// <summary>
    /// Add a Boolean parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="bool">
    /// bool parameter
    /// </param>
    public void ParamsSetBool(IntPtr c, IntPtr p, string k, bool v)
    {
        using var kAnsi = new AnsiStringPtr(k);
        var kSymbol = nativeLibrary.MkStringSymbol(c, kAnsi);
        CheckError(c);
        nativeLibrary.ParamsSetBool(c, p, kSymbol, v);
        CheckError(c);
    }

    /// <summary>
    /// Add a Boolean parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="bool">
    /// bool parameter
    /// </param>
    public void ParamsSetBool(IntPtr c, IntPtr p, IntPtr k, bool v)
    {
        nativeLibrary.ParamsSetBool(c, p, k, v);
        CheckError(c);
    }

    /// <summary>
    /// Add a unsigned parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    public void ParamsSetUint(IntPtr c, IntPtr p, string k, uint v)
    {
        using var kAnsi = new AnsiStringPtr(k);
        var kSymbol = nativeLibrary.MkStringSymbol(c, kAnsi);
        CheckError(c);
        nativeLibrary.ParamsSetUint(c, p, kSymbol, v);
        CheckError(c);
    }

    /// <summary>
    /// Add a unsigned parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    public void ParamsSetUint(IntPtr c, IntPtr p, IntPtr k, uint v)
    {
        nativeLibrary.ParamsSetUint(c, p, k, v);
        CheckError(c);
    }

    /// <summary>
    /// Add a double parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="double">
    /// double parameter
    /// </param>
    public void ParamsSetDouble(IntPtr c, IntPtr p, string k, double v)
    {
        using var kAnsi = new AnsiStringPtr(k);
        var kSymbol = nativeLibrary.MkStringSymbol(c, kAnsi);
        CheckError(c);
        nativeLibrary.ParamsSetDouble(c, p, kSymbol, v);
        CheckError(c);
    }

    /// <summary>
    /// Add a double parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="double">
    /// double parameter
    /// </param>
    public void ParamsSetDouble(IntPtr c, IntPtr p, IntPtr k, double v)
    {
        nativeLibrary.ParamsSetDouble(c, p, k, v);
        CheckError(c);
    }

    /// <summary>
    /// Add a symbol parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k">
    /// symbol parameter
    /// </param>
    /// <param name="v">
    /// symbol parameter
    /// </param>
    public void ParamsSetSymbol(IntPtr c, IntPtr p, string k, string v)
    {
        using var kAnsi = new AnsiStringPtr(k);
        var kSymbol = nativeLibrary.MkStringSymbol(c, kAnsi);
        CheckError(c);
        using var vAnsi = new AnsiStringPtr(v);
        var vSymbol = nativeLibrary.MkStringSymbol(c, vAnsi);
        CheckError(c);
        nativeLibrary.ParamsSetSymbol(c, p, kSymbol, vSymbol);
        CheckError(c);
    }

    /// <summary>
    /// Add a symbol parameter k with value v to the parameter set p.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="k" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    /// <param name="v" ctype="Z3_symbol">
    /// symbol parameter
    /// </param>
    public void ParamsSetSymbol(IntPtr c, IntPtr p, IntPtr k, IntPtr v)
    {
        nativeLibrary.ParamsSetSymbol(c, p, k, v);
        CheckError(c);
    }

    /// <summary>
    /// Convert a parameter set into a string. This function is mainly used for printing the
    /// contents of a parameter set.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    public IntPtr ParamsToString(IntPtr c, IntPtr p)
    {
        var result = nativeLibrary.ParamsToString(c, p);
        CheckError(c);
        return CheckHandle(result, nameof(ParamsToString));
    }

    /// <summary>
    /// <para>
    /// Validate the parameter set p against the parameter description set d.
    /// </para>
    /// <para>
    /// The procedure invokes the error handler if p is invalid.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="p" ctype="Z3_params">
    /// params parameter
    /// </param>
    /// <param name="d" ctype="Z3_param_descrs">
    /// param_descrs parameter
    /// </param>
    public void ParamsValidate(IntPtr c, IntPtr p, IntPtr d)
    {
        nativeLibrary.ParamsValidate(c, p, d);
        CheckError(c);
    }

}
