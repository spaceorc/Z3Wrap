// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.PropositionalLogicAndEquality.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core.Library;

public sealed partial class Z3Library2
{
    /// <summary>
    /// Create an AST node representing true.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    public IntPtr MkTrue(IntPtr c)
    {
        var result = nativeLibrary.MkTrue(c);
        CheckError(c);
        return CheckHandle(result, nameof(MkTrue));
    }

    /// <summary>
    /// Create an AST node representing false.
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    public IntPtr MkFalse(IntPtr c)
    {
        var result = nativeLibrary.MkFalse(c);
        CheckError(c);
        return CheckHandle(result, nameof(MkFalse));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// l = r
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The nodes l and r must have the same type.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="l" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="r" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkEq(IntPtr c, IntPtr l, IntPtr r)
    {
        var result = nativeLibrary.MkEq(c, l, r);
        CheckError(c);
        return CheckHandle(result, nameof(MkEq));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// distinct(args[0], ..., args[num_args-1])
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The distinct construct is used for declaring the arguments pairwise distinct.
    /// That is,
    /// <code>
    /// Forall 0 &lt;= i &lt; j &lt; num_args. not args[i] = args[j]
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// All arguments must have the same sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="numArgs" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <param name="args" ctype="Z3_ast const[]">
    /// ast parameter
    /// </param>
    /// <remarks>
    /// The number of arguments of a distinct construct must be greater than one.
    /// </remarks>
    public IntPtr MkDistinct(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var result = nativeLibrary.MkDistinct(c, numArgs, args);
        CheckError(c);
        return CheckHandle(result, nameof(MkDistinct));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// not(a)
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The node a must have Boolean sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="a" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkNot(IntPtr c, IntPtr a)
    {
        var result = nativeLibrary.MkNot(c, a);
        CheckError(c);
        return CheckHandle(result, nameof(MkNot));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing an if-then-else:
    /// <code>
    /// ite(t1, t2, t3)
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The node t1 must have Boolean sort, t2 and t3 must have the same sort.
    /// The sort of the new node is equal to the sort of t2 and t3.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="t1" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="t2" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="t3" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkIte(IntPtr c, IntPtr t1, IntPtr t2, IntPtr t3)
    {
        var result = nativeLibrary.MkIte(c, t1, t2, t3);
        CheckError(c);
        return CheckHandle(result, nameof(MkIte));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// t1 iff t2
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The nodes t1 and t2 must have Boolean sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="t1" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="t2" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkIff(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var result = nativeLibrary.MkIff(c, t1, t2);
        CheckError(c);
        return CheckHandle(result, nameof(MkIff));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// t1 implies t2
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The nodes t1 and t2 must have Boolean sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="t1" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="t2" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkImplies(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var result = nativeLibrary.MkImplies(c, t1, t2);
        CheckError(c);
        return CheckHandle(result, nameof(MkImplies));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// t1 xor t2
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The nodes t1 and t2 must have Boolean sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="t1" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    /// <param name="t2" ctype="Z3_ast">
    /// ast parameter
    /// </param>
    public IntPtr MkXor(IntPtr c, IntPtr t1, IntPtr t2)
    {
        var result = nativeLibrary.MkXor(c, t1, t2);
        CheckError(c);
        return CheckHandle(result, nameof(MkXor));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// args[0] and ... and args[num_args-1]
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The array args must have num_args elements.
    /// All arguments must have Boolean sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="numArgs" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <param name="args" ctype="Z3_ast const[]">
    /// ast parameter
    /// </param>
    /// <remarks>
    /// The number of arguments must be greater than zero.
    /// </remarks>
    public IntPtr MkAnd(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var result = nativeLibrary.MkAnd(c, numArgs, args);
        CheckError(c);
        return CheckHandle(result, nameof(MkAnd));
    }

    /// <summary>
    /// <para>
    /// Create an AST node representing
    /// <code>
    /// args[0] or ... or args[num_args-1]
    /// </code>
    /// .
    /// </para>
    /// <para>
    /// The array args must have num_args elements.
    /// All arguments must have Boolean sort.
    /// </para>
    /// </summary>
    /// <param name="c" ctype="Z3_context">
    /// context parameter
    /// </param>
    /// <param name="numArgs" ctype="unsigned">
    /// unsigned parameter
    /// </param>
    /// <param name="args" ctype="Z3_ast const[]">
    /// ast parameter
    /// </param>
    /// <remarks>
    /// The number of arguments must be greater than zero.
    /// </remarks>
    public IntPtr MkOr(IntPtr c, uint numArgs, IntPtr[] args)
    {
        var result = nativeLibrary.MkOr(c, numArgs, args);
        CheckError(c);
        return CheckHandle(result, nameof(MkOr));
    }

}
