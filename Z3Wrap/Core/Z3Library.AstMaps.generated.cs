// <auto-generated>
// This file was generated by scripts/generate_library.py
// Source: NativeZ3Library.AstMaps.generated.cs
// DO NOT EDIT - Changes will be overwritten
// </auto-generated>

using System.Runtime.InteropServices;
using Spaceorc.Z3Wrap.Core.Interop;

namespace Spaceorc.Z3Wrap.Core;

public sealed partial class Z3Library
{
    /// <summary>
    ///  Return an empty mapping from AST to AST.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <returns ctype="Z3_ast_map">ast_map value</returns>
    /// <remarks>
    /// Reference counting must be used to manage AST maps, even when the Z3_context was created using MkContext instead of <see cref="MkContextRc"/> .
    /// </remarks>
    public IntPtr MkAstMap(IntPtr c)
    {
        var result = nativeLibrary.MkAstMap(c);
        CheckError(c);
        return CheckHandle(result, nameof(MkAstMap));
    }

    /// <summary>
    ///  Increment the reference counter of the given AST map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    public void AstMapIncRef(IntPtr c, IntPtr m)
    {
        nativeLibrary.AstMapIncRef(c, m);
        CheckError(c);
    }

    /// <summary>
    ///  Decrement the reference counter of the given AST map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    public void AstMapDecRef(IntPtr c, IntPtr m)
    {
        nativeLibrary.AstMapDecRef(c, m);
        CheckError(c);
    }

    /// <summary>
    ///  Return true if the map <c>m</c> contains the AST key <c>k</c> .
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <param name="k" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="bool">bool value</returns>
    public bool AstMapContains(IntPtr c, IntPtr m, IntPtr k)
    {
        var result = nativeLibrary.AstMapContains(c, m, k);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the value associated with the key <c>k</c> .
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <param name="k" ctype="Z3_ast">ast parameter</param>
    /// <returns ctype="Z3_ast">ast value</returns>
    /// <remarks>
    /// The procedure invokes the error handler if <c>k</c> is not in the map.
    /// </remarks>
    public IntPtr AstMapFind(IntPtr c, IntPtr m, IntPtr k)
    {
        var result = nativeLibrary.AstMapFind(c, m, k);
        CheckError(c);
        return CheckHandle(result, nameof(AstMapFind));
    }

    /// <summary>
    ///  Store/Replace a new key, value pair in the given map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <param name="k" ctype="Z3_ast">ast parameter</param>
    /// <param name="v" ctype="Z3_ast">ast parameter</param>
    public void AstMapInsert(IntPtr c, IntPtr m, IntPtr k, IntPtr v)
    {
        nativeLibrary.AstMapInsert(c, m, k, v);
        CheckError(c);
    }

    /// <summary>
    ///  Erase a key from the map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <param name="k" ctype="Z3_ast">ast parameter</param>
    public void AstMapErase(IntPtr c, IntPtr m, IntPtr k)
    {
        nativeLibrary.AstMapErase(c, m, k);
        CheckError(c);
    }

    /// <summary>
    ///  Remove all keys from the given map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    public void AstMapReset(IntPtr c, IntPtr m)
    {
        nativeLibrary.AstMapReset(c, m);
        CheckError(c);
    }

    /// <summary>
    ///  Return the size of the given map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <returns ctype="unsigned">unsigned value</returns>
    public uint AstMapSize(IntPtr c, IntPtr m)
    {
        var result = nativeLibrary.AstMapSize(c, m);
        CheckError(c);
        return result;
    }

    /// <summary>
    ///  Return the keys stored in the given map.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <returns ctype="Z3_ast_vector">ast_vector value</returns>
    public IntPtr AstMapKeys(IntPtr c, IntPtr m)
    {
        var result = nativeLibrary.AstMapKeys(c, m);
        CheckError(c);
        return CheckHandle(result, nameof(AstMapKeys));
    }

    /// <summary>
    ///  Convert the given map into a string.
    /// </summary>
    /// <param name="c" ctype="Z3_context">context parameter</param>
    /// <param name="m" ctype="Z3_ast_map">ast_map parameter</param>
    /// <returns ctype="Z3_string">string value</returns>
    public string AstMapToString(IntPtr c, IntPtr m)
    {
        var result = nativeLibrary.AstMapToString(c, m);
        CheckError(c);
        result = CheckHandle(result, nameof(AstMapToString));
        return Marshal.PtrToStringAnsi(result) ?? throw new InvalidOperationException("Failed to marshal string from native code.");
    }

}
