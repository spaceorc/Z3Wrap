name: Publish NuGet Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version to publish'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Install Z3
      run: |
        sudo apt-get update
        sudo apt-get install -y libz3-4

    - name: Restore dependencies
      run: dotnet restore

    - name: Set version from input
      run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Fetch release notes from GitHub
      id: release_notes
      run: |
        VERSION="${{ github.event.inputs.version }}"
        TAG="v$VERSION"

        # Fetch release notes from GitHub API
        RELEASE_NOTES=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" \
          | jq -r '.body // empty')

        if [ -z "$RELEASE_NOTES" ]; then
          echo "No release found for tag $TAG, using default release notes"
          RELEASE_NOTES="Release $VERSION - See https://github.com/${{ github.repository }}/releases/tag/$TAG for details"
        else
          echo "Found release notes for $TAG"
          # Clean up release notes for XML: escape special characters and remove markdown formatting
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&apos;/g')
          # Remove markdown headers and simplify formatting for NuGet
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^### /- /g; s/^## /- /g; s/^# //g')
        fi

        # Save release notes to environment variable (escape for multiline)
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        echo "Release notes prepared for version $VERSION"

    - name: Update project version and release notes
      run: |
        VERSION="${{ github.event.inputs.version }}"

        # Update project version
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" Z3Wrap/Z3Wrap.csproj
        echo "Updated project version to $VERSION"

        # Add or update PackageReleaseNotes
        if grep -q "<PackageReleaseNotes>" Z3Wrap/Z3Wrap.csproj; then
          # Update existing PackageReleaseNotes
          sed -i "s|<PackageReleaseNotes>.*</PackageReleaseNotes>|<PackageReleaseNotes>$RELEASE_NOTES</PackageReleaseNotes>|" Z3Wrap/Z3Wrap.csproj
        else
          # Add PackageReleaseNotes after Description
          sed -i "s|</Description>|</Description>\n        <PackageReleaseNotes>$RELEASE_NOTES</PackageReleaseNotes>|" Z3Wrap/Z3Wrap.csproj
        fi
        echo "Updated PackageReleaseNotes with release notes from GitHub"

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Pack
      run: dotnet pack Z3Wrap/Z3Wrap.csproj --configuration Release --no-build --output ./artifacts

    - name: List artifacts
      run: ls -la ./artifacts/

    - name: Publish to NuGet.org
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Publish to GitHub Packages
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/spaceorc/index.json --skip-duplicate

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg