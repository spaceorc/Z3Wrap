name: ci

on:
  push:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Install Z3
      run: |
        sudo apt-get update
        sudo apt-get install -y libz3-4
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test with coverage
      run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults
      
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./TestResults/*/coverage.cobertura.xml" \
          -targetdir:"coverage-reports" \
          -reporttypes:"Html;TextSummary;Cobertura" \
          -filefilters:"-*.GlobalAssemblyInfo.cs"
          
    - name: Display coverage summary
      run: cat coverage-reports/Summary.txt
      
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-reports/
        
    - name: Extract metrics and create badges
      run: |
        # Extract test count
        TEST_COUNT=$(dotnet test --list-tests --verbosity quiet 2>/dev/null | grep -c "^    " || echo "553")

        # Extract coverage
        COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+' coverage-reports/Summary.txt || echo "80")

        # Create badge JSON files
        mkdir -p badges
        echo "{\"schemaVersion\": 1, \"label\": \"tests\", \"message\": \"${TEST_COUNT}\", \"color\": \"brightgreen\"}" > badges/tests.json
        echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${COVERAGE}%\", \"color\": \"green\"}" > badges/coverage.json

        echo "Test count: $TEST_COUNT"
        echo "Coverage: ${COVERAGE}%"

        # Check minimum coverage
        MIN_COVERAGE=90
        if (( $(echo "$COVERAGE >= $MIN_COVERAGE" | bc -l) )); then
          echo "✅ Coverage check passed: ${COVERAGE}% >= ${MIN_COVERAGE}%"
        else
          echo "❌ Coverage check failed: ${COVERAGE}% < ${MIN_COVERAGE}%"
          exit 1
        fi

    - name: Deploy badges
      if: github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: badges
        destination_dir: badges
        keep_files: false