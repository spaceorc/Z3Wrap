name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: '$VERSION'"
          echo "Use semantic versioning (e.g., 1.0.0, 1.0.0-beta.1, 0.0.1)"
          exit 1
        fi
        echo "Version format is valid: $VERSION"

    - name: Check if tag exists
      run: |
        if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
          echo "Tag v${{ github.event.inputs.version }} already exists!"
          exit 1
        fi

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Install Z3
      run: |
        sudo apt-get update
        sudo apt-get install -y libz3-4

    - name: Update project version and changelog
      run: |
        VERSION="${{ github.event.inputs.version }}"
        TODAY=$(date +'%Y-%m-%d')

        # Update project version
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" Z3Wrap/Z3Wrap.csproj
        echo "Updated project version to $VERSION"

        # Update changelog: replace TBD with today's date for this version
        if [ -f "CHANGELOG.md" ]; then
          sed -i "s/## \[$VERSION\] - TBD/## [$VERSION] - $TODAY/" CHANGELOG.md
          echo "Updated changelog date for version $VERSION to $TODAY"
        fi

    - name: Extract changelog and update PackageReleaseNotes
      id: changelog
      run: |
        VERSION="${{ github.event.inputs.version }}"

        # Extract changelog content from [Unreleased] section
        python3 << 'EOF'
        import re
        import html
        import os

        version = os.environ.get('VERSION', '')

        # Read changelog and extract [Unreleased] section
        try:
            with open('CHANGELOG.md', 'r') as f:
                changelog_content = f.read()

            # Extract content between [Unreleased] and next version section
            unreleased_match = re.search(r'## \[Unreleased\]\s*\n(.*?)(?=\n## \[|\n$)', changelog_content, re.DOTALL)

            if unreleased_match:
                changelog_section = unreleased_match.group(1).strip()
                if not changelog_section:
                    changelog_section = f"Release {version}"
            else:
                changelog_section = f"Release {version}"

        except FileNotFoundError:
            changelog_section = f"Release {version}"

        print(f"Extracted changelog content: {changelog_section[:100]}...")

        # Escape for XML
        escaped_notes = html.escape(changelog_section)

        # Read the .csproj file
        with open('Z3Wrap/Z3Wrap.csproj', 'r') as f:
            content = f.read()

        # Replace empty PackageReleaseNotes
        content = re.sub(
            r'<PackageReleaseNotes></PackageReleaseNotes>',
            f'<PackageReleaseNotes>{escaped_notes}</PackageReleaseNotes>',
            content
        )

        # Write back to file
        with open('Z3Wrap/Z3Wrap.csproj', 'w') as f:
            f.write(content)

        print("Updated PackageReleaseNotes with changelog content")

        # Also save for GitHub release creation
        with open('/tmp/changelog_output.txt', 'w') as f:
            f.write(changelog_section)
        EOF

        # Set the changelog content for use in GitHub release
        CHANGELOG_CONTENT=$(cat /tmp/changelog_output.txt)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build and test
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet test --configuration Release --no-build

    - name: Pack NuGet packages
      run: |
        dotnet pack Z3Wrap/Z3Wrap.csproj --configuration Release --no-build --output ./artifacts
        echo "NuGet packages created in ./artifacts/"
        ls -la ./artifacts/

    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-v${{ github.event.inputs.version }}
        path: ./artifacts/*.nupkg
        retention-days: 90


    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: v${{ github.event.inputs.version }}
        body: |
          ## Z3Wrap v${{ github.event.inputs.version }}

          A complete, modern C# wrapper for Microsoft's Z3 theorem prover.

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Installation
          ```bash
          dotnet add package Spaceorc.Z3Wrap --version ${{ github.event.inputs.version }}
          ```

          ## Quick Start
          ```csharp
          using var context = new Z3Context();
          using var scope = context.SetUp();

          var x = context.IntConst("x");
          var y = context.IntConst("y");

          using var solver = context.CreateSolver();
          solver.Assert(x + y == 10);
          solver.Assert(x > y);

          if (solver.Check() == Z3Status.Satisfiable) {
              var model = solver.GetModel();
              Console.WriteLine($"x = {model.GetIntValue(x)}");
              Console.WriteLine($"y = {model.GetIntValue(y)}");
          }
          ```
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}